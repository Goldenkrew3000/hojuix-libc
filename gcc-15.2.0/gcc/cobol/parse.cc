/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* First part of user prologue.  */
#line 283 "parse.y"

#include "config.h"
#include <fstream>  // Before cobol-system because it uses poisoned functions
#include "cobol-system.h"
#include "coretypes.h"
#include "tree.h"
#undef cobol_dialect
#undef cobol_exceptions
#undef yy_flex_debug
#include "cdfval.h"
#include "../../libgcobol/ec.h"
#include "../../libgcobol/common-defs.h"
#include "util.h"
#include "cbldiag.h"
#include "symbols.h"
#include "inspect.h"
#include "../../libgcobol/io.h"
#include "genapi.h"
#include "../../libgcobol/exceptl.h"
#include "exceptg.h"
#include "parse_ante.h"

#line 94 "parse.cc"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "parse.h"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENTIFICATION_DIV = 3,         /* "IDENTIFICATION DIVISION"  */
  YYSYMBOL_ENVIRONMENT_DIV = 4,            /* "ENVIRONMENT DIVISION"  */
  YYSYMBOL_PROCEDURE_DIV = 5,              /* "PROCEDURE DIVISION"  */
  YYSYMBOL_DATA_DIV = 6,                   /* "DATA DIVISION"  */
  YYSYMBOL_FILE_SECT = 7,                  /* "FILE SECTION"  */
  YYSYMBOL_INPUT_OUTPUT_SECT = 8,          /* "INPUT-OUTPUT SECTION"  */
  YYSYMBOL_LINKAGE_SECT = 9,               /* "LINKAGE SECTION"  */
  YYSYMBOL_LOCAL_STORAGE_SECT = 10,        /* "LOCAL-STORAGE SECTION"  */
  YYSYMBOL_WORKING_STORAGE_SECT = 11,      /* "WORKING-STORAGE SECTION"  */
  YYSYMBOL_OBJECT_COMPUTER = 12,           /* "OBJECT COMPUTER"  */
  YYSYMBOL_DISPLAY_OF = 13,                /* "DISPLAY OF"  */
  YYSYMBOL_END_FUNCTION = 14,              /* "END FUNCTION"  */
  YYSYMBOL_END_PROGRAM = 15,               /* "END PROGRAM"  */
  YYSYMBOL_END_SUBPROGRAM = 16,            /* "END PROGRAM <contained program>"  */
  YYSYMBOL_JUSTIFIED = 17,                 /* JUSTIFIED  */
  YYSYMBOL_RETURNING = 18,                 /* RETURNING  */
  YYSYMBOL_NO_CONDITION = 19,              /* "invalid token"  */
  YYSYMBOL_ALNUM = 20,                     /* ALNUM  */
  YYSYMBOL_ALPHED = 21,                    /* ALPHED  */
  YYSYMBOL_ERROR = 22,                     /* ERROR  */
  YYSYMBOL_EXCEPTION = 23,                 /* EXCEPTION  */
  YYSYMBOL_SIZE_ERROR = 24,                /* "SIZE ERROR"  */
  YYSYMBOL_EXCEPTION_NAME = 25,            /* "EXCEPTION NAME"  */
  YYSYMBOL_LEVEL = 26,                     /* LEVEL  */
  YYSYMBOL_LEVEL66 = 27,                   /* "66"  */
  YYSYMBOL_LEVEL78 = 28,                   /* "78"  */
  YYSYMBOL_LEVEL88 = 29,                   /* "88"  */
  YYSYMBOL_CLASS_NAME = 30,                /* "class name"  */
  YYSYMBOL_NAME = 31,                      /* NAME  */
  YYSYMBOL_NAME88 = 32,                    /* "Level 88 NAME"  */
  YYSYMBOL_NUME = 33,                      /* "Name"  */
  YYSYMBOL_NUMED = 34,                     /* "NUMERIC-EDITED picture"  */
  YYSYMBOL_NUMED_CR = 35,                  /* "NUMERIC-EDITED CR picture"  */
  YYSYMBOL_NUMED_DB = 36,                  /* "NUMERIC-EDITED DB picture"  */
  YYSYMBOL_NINEDOT = 37,                   /* NINEDOT  */
  YYSYMBOL_NINES = 38,                     /* NINES  */
  YYSYMBOL_NINEV = 39,                     /* NINEV  */
  YYSYMBOL_PIC_P = 40,                     /* PIC_P  */
  YYSYMBOL_ONES = 41,                      /* ONES  */
  YYSYMBOL_SPACES = 42,                    /* SPACES  */
  YYSYMBOL_LITERAL = 43,                   /* LITERAL  */
  YYSYMBOL_END = 44,                       /* END  */
  YYSYMBOL_EOP = 45,                       /* EOP  */
  YYSYMBOL_FILENAME = 46,                  /* FILENAME  */
  YYSYMBOL_INVALID = 47,                   /* INVALID  */
  YYSYMBOL_NUMBER = 48,                    /* NUMBER  */
  YYSYMBOL_NEGATIVE = 49,                  /* NEGATIVE  */
  YYSYMBOL_NUMSTR = 50,                    /* "numeric literal"  */
  YYSYMBOL_OVERFLOW_kw = 51,               /* "OVERFLOW"  */
  YYSYMBOL_BINARY_INTEGER = 52,            /* BINARY_INTEGER  */
  YYSYMBOL_COMPUTATIONAL = 53,             /* COMPUTATIONAL  */
  YYSYMBOL_PERFORM = 54,                   /* PERFORM  */
  YYSYMBOL_BACKWARD = 55,                  /* BACKWARD  */
  YYSYMBOL_POSITIVE = 56,                  /* POSITIVE  */
  YYSYMBOL_POINTER = 57,                   /* POINTER  */
  YYSYMBOL_SECTION = 58,                   /* SECTION  */
  YYSYMBOL_STANDARD_ALPHABET = 59,         /* "STANDARD ALPHABET"  */
  YYSYMBOL_SWITCH = 60,                    /* SWITCH  */
  YYSYMBOL_UPSI = 61,                      /* UPSI  */
  YYSYMBOL_ZERO = 62,                      /* ZERO  */
  YYSYMBOL_SYSIN = 63,                     /* SYSIN  */
  YYSYMBOL_SYSIPT = 64,                    /* SYSIPT  */
  YYSYMBOL_SYSOUT = 65,                    /* SYSOUT  */
  YYSYMBOL_SYSLIST = 66,                   /* SYSLIST  */
  YYSYMBOL_SYSLST = 67,                    /* SYSLST  */
  YYSYMBOL_SYSPUNCH = 68,                  /* SYSPUNCH  */
  YYSYMBOL_SYSPCH = 69,                    /* SYSPCH  */
  YYSYMBOL_CONSOLE = 70,                   /* CONSOLE  */
  YYSYMBOL_C01 = 71,                       /* C01  */
  YYSYMBOL_C02 = 72,                       /* C02  */
  YYSYMBOL_C03 = 73,                       /* C03  */
  YYSYMBOL_C04 = 74,                       /* C04  */
  YYSYMBOL_C05 = 75,                       /* C05  */
  YYSYMBOL_C06 = 76,                       /* C06  */
  YYSYMBOL_C07 = 77,                       /* C07  */
  YYSYMBOL_C08 = 78,                       /* C08  */
  YYSYMBOL_C09 = 79,                       /* C09  */
  YYSYMBOL_C10 = 80,                       /* C10  */
  YYSYMBOL_C11 = 81,                       /* C11  */
  YYSYMBOL_C12 = 82,                       /* C12  */
  YYSYMBOL_CSP = 83,                       /* CSP  */
  YYSYMBOL_S01 = 84,                       /* S01  */
  YYSYMBOL_S02 = 85,                       /* S02  */
  YYSYMBOL_S03 = 86,                       /* S03  */
  YYSYMBOL_S04 = 87,                       /* S04  */
  YYSYMBOL_S05 = 88,                       /* S05  */
  YYSYMBOL_AFP_5A = 89,                    /* "AFP 5A"  */
  YYSYMBOL_STDIN = 90,                     /* STDIN  */
  YYSYMBOL_STDOUT = 91,                    /* STDOUT  */
  YYSYMBOL_STDERR = 92,                    /* STDERR  */
  YYSYMBOL_LIST = 93,                      /* LIST  */
  YYSYMBOL_MAP = 94,                       /* MAP  */
  YYSYMBOL_NOLIST = 95,                    /* NOLIST  */
  YYSYMBOL_NOMAP = 96,                     /* NOMAP  */
  YYSYMBOL_NOSOURCE = 97,                  /* NOSOURCE  */
  YYSYMBOL_MIGHT_BE = 98,                  /* "IS or IS NOT"  */
  YYSYMBOL_FUNCTION_UDF = 99,              /* "UDF name"  */
  YYSYMBOL_FUNCTION_UDF_0 = 100,           /* "UDF"  */
  YYSYMBOL_DATE_FMT = 101,                 /* "date format"  */
  YYSYMBOL_TIME_FMT = 102,                 /* "time format"  */
  YYSYMBOL_DATETIME_FMT = 103,             /* "datetime format"  */
  YYSYMBOL_BASIS = 104,                    /* BASIS  */
  YYSYMBOL_CBL = 105,                      /* CBL  */
  YYSYMBOL_CONSTANT = 106,                 /* CONSTANT  */
  YYSYMBOL_COPY = 107,                     /* COPY  */
  YYSYMBOL_DEFINED = 108,                  /* DEFINED  */
  YYSYMBOL_ENTER = 109,                    /* ENTER  */
  YYSYMBOL_FEATURE = 110,                  /* FEATURE  */
  YYSYMBOL_INSERTT = 111,                  /* INSERTT  */
  YYSYMBOL_LSUB = 112,                     /* "("  */
  YYSYMBOL_PARAMETER_kw = 113,             /* "PARAMETER"  */
  YYSYMBOL_OVERRIDE = 114,                 /* OVERRIDE  */
  YYSYMBOL_READY = 115,                    /* READY  */
  YYSYMBOL_RESET = 116,                    /* RESET  */
  YYSYMBOL_RSUB = 117,                     /* ")"  */
  YYSYMBOL_SERVICE_RELOAD = 118,           /* "SERVICE RELOAD"  */
  YYSYMBOL_STAR_CBL = 119,                 /* "*CBL"  */
  YYSYMBOL_SUBSCRIPT = 120,                /* SUBSCRIPT  */
  YYSYMBOL_SUPPRESS = 121,                 /* SUPPRESS  */
  YYSYMBOL_TITLE = 122,                    /* TITLE  */
  YYSYMBOL_TRACE = 123,                    /* TRACE  */
  YYSYMBOL_USE = 124,                      /* USE  */
  YYSYMBOL_COBOL_WORDS = 125,              /* ">>COBOL-WORDS"  */
  YYSYMBOL_EQUATE = 126,                   /* EQUATE  */
  YYSYMBOL_UNDEFINE = 127,                 /* UNDEFINE  */
  YYSYMBOL_CDF_DEFINE = 128,               /* ">>DEFINE"  */
  YYSYMBOL_CDF_DISPLAY = 129,              /* ">>DISPLAY"  */
  YYSYMBOL_CDF_IF = 130,                   /* ">>IF"  */
  YYSYMBOL_CDF_ELSE = 131,                 /* ">>ELSE"  */
  YYSYMBOL_CDF_END_IF = 132,               /* ">>END-IF"  */
  YYSYMBOL_CDF_EVALUATE = 133,             /* ">>EVALUATE"  */
  YYSYMBOL_CDF_WHEN = 134,                 /* ">>WHEN"  */
  YYSYMBOL_CDF_END_EVALUATE = 135,         /* ">>END-EVALUATE"  */
  YYSYMBOL_CALL_CONVENTION = 136,          /* ">>CALL-CONVENTION"  */
  YYSYMBOL_CALL_COBOL = 137,               /* "CALL"  */
  YYSYMBOL_CALL_VERBATIM = 138,            /* "CALL (as C)"  */
  YYSYMBOL_CDF_PUSH = 139,                 /* ">>PUSH"  */
  YYSYMBOL_CDF_POP = 140,                  /* ">>POP"  */
  YYSYMBOL_SOURCE_FORMAT = 141,            /* ">>SOURCE FORMAT"  */
  YYSYMBOL_IF = 142,                       /* IF  */
  YYSYMBOL_THEN = 143,                     /* THEN  */
  YYSYMBOL_ELSE = 144,                     /* ELSE  */
  YYSYMBOL_SENTENCE = 145,                 /* SENTENCE  */
  YYSYMBOL_ACCEPT = 146,                   /* ACCEPT  */
  YYSYMBOL_ADD = 147,                      /* ADD  */
  YYSYMBOL_ALTER = 148,                    /* ALTER  */
  YYSYMBOL_CALL = 149,                     /* CALL  */
  YYSYMBOL_CANCEL = 150,                   /* CANCEL  */
  YYSYMBOL_CLOSE = 151,                    /* CLOSE  */
  YYSYMBOL_COMPUTE = 152,                  /* COMPUTE  */
  YYSYMBOL_CONTINUE = 153,                 /* CONTINUE  */
  YYSYMBOL_DELETE = 154,                   /* DELETE  */
  YYSYMBOL_DISPLAY = 155,                  /* DISPLAY  */
  YYSYMBOL_DIVIDE = 156,                   /* DIVIDE  */
  YYSYMBOL_EVALUATE = 157,                 /* EVALUATE  */
  YYSYMBOL_EXIT = 158,                     /* EXIT  */
  YYSYMBOL_FILLER_kw = 159,                /* "FILLER"  */
  YYSYMBOL_GOBACK = 160,                   /* GOBACK  */
  YYSYMBOL_GOTO = 161,                     /* GOTO  */
  YYSYMBOL_INITIALIZE = 162,               /* INITIALIZE  */
  YYSYMBOL_INSPECT = 163,                  /* INSPECT  */
  YYSYMBOL_MERGE = 164,                    /* MERGE  */
  YYSYMBOL_MOVE = 165,                     /* MOVE  */
  YYSYMBOL_MULTIPLY = 166,                 /* MULTIPLY  */
  YYSYMBOL_OPEN = 167,                     /* OPEN  */
  YYSYMBOL_PARAGRAPH = 168,                /* PARAGRAPH  */
  YYSYMBOL_READ = 169,                     /* READ  */
  YYSYMBOL_RELEASE = 170,                  /* RELEASE  */
  YYSYMBOL_RETURN = 171,                   /* RETURN  */
  YYSYMBOL_REWRITE = 172,                  /* REWRITE  */
  YYSYMBOL_SEARCH = 173,                   /* SEARCH  */
  YYSYMBOL_SET = 174,                      /* SET  */
  YYSYMBOL_SELECT = 175,                   /* SELECT  */
  YYSYMBOL_SORT = 176,                     /* SORT  */
  YYSYMBOL_SORT_MERGE = 177,               /* "SORT-MERGE"  */
  YYSYMBOL_STRING_kw = 178,                /* "STRING"  */
  YYSYMBOL_STOP = 179,                     /* STOP  */
  YYSYMBOL_SUBTRACT = 180,                 /* SUBTRACT  */
  YYSYMBOL_START = 181,                    /* START  */
  YYSYMBOL_UNSTRING = 182,                 /* UNSTRING  */
  YYSYMBOL_WRITE = 183,                    /* WRITE  */
  YYSYMBOL_WHEN = 184,                     /* WHEN  */
  YYSYMBOL_ARGUMENT_NUMBER = 185,          /* ARGUMENT_NUMBER  */
  YYSYMBOL_ARGUMENT_VALUE = 186,           /* ARGUMENT_VALUE  */
  YYSYMBOL_ENVIRONMENT_NAME = 187,         /* ENVIRONMENT_NAME  */
  YYSYMBOL_ENVIRONMENT_VALUE = 188,        /* ENVIRONMENT_VALUE  */
  YYSYMBOL_ABS = 189,                      /* ABS  */
  YYSYMBOL_ACCESS = 190,                   /* ACCESS  */
  YYSYMBOL_ACOS = 191,                     /* ACOS  */
  YYSYMBOL_ACTUAL = 192,                   /* ACTUAL  */
  YYSYMBOL_ADVANCING = 193,                /* ADVANCING  */
  YYSYMBOL_AFTER = 194,                    /* AFTER  */
  YYSYMBOL_ALL = 195,                      /* ALL  */
  YYSYMBOL_ALLOCATE = 196,                 /* ALLOCATE  */
  YYSYMBOL_ALPHABET = 197,                 /* ALPHABET  */
  YYSYMBOL_ALPHABETIC = 198,               /* ALPHABETIC  */
  YYSYMBOL_ALPHABETIC_LOWER = 199,         /* "ALPHABETIC-LOWER"  */
  YYSYMBOL_ALPHABETIC_UPPER = 200,         /* "ALPHABETIC-UPPER"  */
  YYSYMBOL_ALPHANUMERIC = 201,             /* ALPHANUMERIC  */
  YYSYMBOL_ALPHANUMERIC_EDITED = 202,      /* "ALPHANUMERIC-EDITED"  */
  YYSYMBOL_ALSO = 203,                     /* ALSO  */
  YYSYMBOL_ALTERNATE = 204,                /* ALTERNATE  */
  YYSYMBOL_ANNUITY = 205,                  /* ANNUITY  */
  YYSYMBOL_ANUM = 206,                     /* ANUM  */
  YYSYMBOL_ANY = 207,                      /* ANY  */
  YYSYMBOL_ANYCASE = 208,                  /* ANYCASE  */
  YYSYMBOL_APPLY = 209,                    /* APPLY  */
  YYSYMBOL_ARE = 210,                      /* ARE  */
  YYSYMBOL_AREA = 211,                     /* AREA  */
  YYSYMBOL_AREAS = 212,                    /* AREAS  */
  YYSYMBOL_AS = 213,                       /* AS  */
  YYSYMBOL_ASCENDING = 214,                /* ASCENDING  */
  YYSYMBOL_ACTIVATING = 215,               /* ACTIVATING  */
  YYSYMBOL_ASIN = 216,                     /* ASIN  */
  YYSYMBOL_ASSIGN = 217,                   /* ASSIGN  */
  YYSYMBOL_AT = 218,                       /* AT  */
  YYSYMBOL_ATAN = 219,                     /* ATAN  */
  YYSYMBOL_BASED = 220,                    /* BASED  */
  YYSYMBOL_BASECONVERT = 221,              /* BASECONVERT  */
  YYSYMBOL_BEFORE = 222,                   /* BEFORE  */
  YYSYMBOL_BINARY = 223,                   /* BINARY  */
  YYSYMBOL_BIT = 224,                      /* BIT  */
  YYSYMBOL_BIT_OF = 225,                   /* "BIT-OF"  */
  YYSYMBOL_BIT_TO_CHAR = 226,              /* "BIT-TO-CHAR"  */
  YYSYMBOL_BLANK = 227,                    /* BLANK  */
  YYSYMBOL_BLOCK_kw = 228,                 /* BLOCK_kw  */
  YYSYMBOL_BOOLEAN_OF_INTEGER = 229,       /* "BOOLEAN-OF-INTEGER"  */
  YYSYMBOL_BOTTOM = 230,                   /* BOTTOM  */
  YYSYMBOL_BY = 231,                       /* BY  */
  YYSYMBOL_BYTE = 232,                     /* BYTE  */
  YYSYMBOL_BYTE_LENGTH = 233,              /* "BYTE-LENGTH"  */
  YYSYMBOL_CF = 234,                       /* CF  */
  YYSYMBOL_CH = 235,                       /* CH  */
  YYSYMBOL_CHANGED = 236,                  /* CHANGED  */
  YYSYMBOL_CHAR = 237,                     /* CHAR  */
  YYSYMBOL_CHAR_NATIONAL = 238,            /* "CHAR-NATIONAL"  */
  YYSYMBOL_CHARACTER = 239,                /* CHARACTER  */
  YYSYMBOL_CHARACTERS = 240,               /* CHARACTERS  */
  YYSYMBOL_CHECKING = 241,                 /* CHECKING  */
  YYSYMBOL_CLASS = 242,                    /* CLASS  */
  YYSYMBOL_COBOL = 243,                    /* COBOL  */
  YYSYMBOL_CODE = 244,                     /* CODE  */
  YYSYMBOL_CODESET = 245,                  /* CODESET  */
  YYSYMBOL_COLLATING = 246,                /* COLLATING  */
  YYSYMBOL_COLUMN = 247,                   /* COLUMN  */
  YYSYMBOL_COMBINED_DATETIME = 248,        /* "COMBINED-DATETIME"  */
  YYSYMBOL_COMMA = 249,                    /* COMMA  */
  YYSYMBOL_COMMAND_LINE = 250,             /* "COMMAND-LINE"  */
  YYSYMBOL_COMMAND_LINE_COUNT = 251,       /* "COMMAND-LINE-COUNT"  */
  YYSYMBOL_COMMIT = 252,                   /* COMMIT  */
  YYSYMBOL_COMMON = 253,                   /* COMMON  */
  YYSYMBOL_CONCAT = 254,                   /* CONCAT  */
  YYSYMBOL_CONDITION = 255,                /* CONDITION  */
  YYSYMBOL_CONFIGURATION_SECT = 256,       /* "CONFIGURATION SECTION"  */
  YYSYMBOL_CONTAINS = 257,                 /* CONTAINS  */
  YYSYMBOL_CONTENT = 258,                  /* CONTENT  */
  YYSYMBOL_CONTROL = 259,                  /* CONTROL  */
  YYSYMBOL_CONTROLS = 260,                 /* CONTROLS  */
  YYSYMBOL_CONVERT = 261,                  /* CONVERT  */
  YYSYMBOL_CONVERTING = 262,               /* CONVERTING  */
  YYSYMBOL_CORRESPONDING = 263,            /* CORRESPONDING  */
  YYSYMBOL_COS = 264,                      /* COS  */
  YYSYMBOL_COUNT = 265,                    /* COUNT  */
  YYSYMBOL_CURRENCY = 266,                 /* CURRENCY  */
  YYSYMBOL_CURRENT = 267,                  /* CURRENT  */
  YYSYMBOL_CURRENT_DATE = 268,             /* CURRENT_DATE  */
  YYSYMBOL_DATA = 269,                     /* DATA  */
  YYSYMBOL_DATE = 270,                     /* DATE  */
  YYSYMBOL_DATE_COMPILED = 271,            /* DATE_COMPILED  */
  YYSYMBOL_DATE_OF_INTEGER = 272,          /* "DATE-OF-INTEGER"  */
  YYSYMBOL_DATE_TO_YYYYMMDD = 273,         /* "DATE-TO-YYYYMMDD"  */
  YYSYMBOL_DATE_WRITTEN = 274,             /* "DATE-WRITTEN"  */
  YYSYMBOL_DAY = 275,                      /* DAY  */
  YYSYMBOL_DAY_OF_INTEGER = 276,           /* "DAY-OF-INTEGER"  */
  YYSYMBOL_DAY_OF_WEEK = 277,              /* "DAY-OF-WEEK"  */
  YYSYMBOL_DAY_TO_YYYYDDD = 278,           /* "DAY-TO-YYYYDDD"  */
  YYSYMBOL_DBCS = 279,                     /* DBCS  */
  YYSYMBOL_DE = 280,                       /* DE  */
  YYSYMBOL_DEBUGGING = 281,                /* DEBUGGING  */
  YYSYMBOL_DECIMAL_POINT = 282,            /* DECIMAL_POINT  */
  YYSYMBOL_DECLARATIVES = 283,             /* DECLARATIVES  */
  YYSYMBOL_DEFAULT = 284,                  /* DEFAULT  */
  YYSYMBOL_DELIMITED = 285,                /* DELIMITED  */
  YYSYMBOL_DELIMITER = 286,                /* DELIMITER  */
  YYSYMBOL_DEPENDING = 287,                /* DEPENDING  */
  YYSYMBOL_DESCENDING = 288,               /* DESCENDING  */
  YYSYMBOL_DETAIL = 289,                   /* DETAIL  */
  YYSYMBOL_DIRECT = 290,                   /* DIRECT  */
  YYSYMBOL_DIRECT_ACCESS = 291,            /* "DIRECT-ACCESS"  */
  YYSYMBOL_DOWN = 292,                     /* DOWN  */
  YYSYMBOL_DUPLICATES = 293,               /* DUPLICATES  */
  YYSYMBOL_DYNAMIC = 294,                  /* DYNAMIC  */
  YYSYMBOL_E = 295,                        /* E  */
  YYSYMBOL_EBCDIC = 296,                   /* EBCDIC  */
  YYSYMBOL_EC = 297,                       /* EC  */
  YYSYMBOL_EGCS = 298,                     /* EGCS  */
  YYSYMBOL_ENTRY = 299,                    /* ENTRY  */
  YYSYMBOL_ENVIRONMENT = 300,              /* ENVIRONMENT  */
  YYSYMBOL_EQUAL = 301,                    /* EQUAL  */
  YYSYMBOL_EVERY = 302,                    /* EVERY  */
  YYSYMBOL_EXAMINE = 303,                  /* EXAMINE  */
  YYSYMBOL_EXHIBIT = 304,                  /* EXHIBIT  */
  YYSYMBOL_EXP = 305,                      /* EXP  */
  YYSYMBOL_EXP10 = 306,                    /* EXP10  */
  YYSYMBOL_EXTEND = 307,                   /* EXTEND  */
  YYSYMBOL_EXTERNAL = 308,                 /* EXTERNAL  */
  YYSYMBOL_EXCEPTION_FILE = 309,           /* "EXCEPTION-FILE"  */
  YYSYMBOL_EXCEPTION_FILE_N = 310,         /* "EXCEPTION-FILE-N"  */
  YYSYMBOL_EXCEPTION_LOCATION = 311,       /* "EXCEPTION-LOCATION"  */
  YYSYMBOL_EXCEPTION_LOCATION_N = 312,     /* "EXCEPTION-LOCATION-N"  */
  YYSYMBOL_EXCEPTION_STATEMENT = 313,      /* "EXCEPTION-STATEMENT"  */
  YYSYMBOL_EXCEPTION_STATUS = 314,         /* "EXCEPTION-STATUS"  */
  YYSYMBOL_FACTORIAL = 315,                /* FACTORIAL  */
  YYSYMBOL_FALSE_kw = 316,                 /* "False"  */
  YYSYMBOL_FD = 317,                       /* FD  */
  YYSYMBOL_FILE_CONTROL = 318,             /* "FILE-CONTROL"  */
  YYSYMBOL_FILE_KW = 319,                  /* "File"  */
  YYSYMBOL_FILE_LIMIT = 320,               /* "FILE-LIMIT"  */
  YYSYMBOL_FINAL = 321,                    /* FINAL  */
  YYSYMBOL_FINALLY = 322,                  /* FINALLY  */
  YYSYMBOL_FIND_STRING = 323,              /* "FIND-STRING"  */
  YYSYMBOL_FIRST = 324,                    /* FIRST  */
  YYSYMBOL_FIXED = 325,                    /* FIXED  */
  YYSYMBOL_FOOTING = 326,                  /* FOOTING  */
  YYSYMBOL_FOR = 327,                      /* FOR  */
  YYSYMBOL_FORMATTED_CURRENT_DATE = 328,   /* "FORMATTED-CURRENT-DATE"  */
  YYSYMBOL_FORMATTED_DATE = 329,           /* "FORMATTED-DATE"  */
  YYSYMBOL_FORMATTED_DATETIME = 330,       /* "FORMATTED-DATETIME"  */
  YYSYMBOL_FORMATTED_TIME = 331,           /* "FORMATTED-TIME"  */
  YYSYMBOL_FORM_OVERFLOW = 332,            /* "FORM-OVERFLOW"  */
  YYSYMBOL_FREE = 333,                     /* FREE  */
  YYSYMBOL_FRACTION_PART = 334,            /* "FRACTION-PART"  */
  YYSYMBOL_FROM = 335,                     /* FROM  */
  YYSYMBOL_FUNCTION = 336,                 /* FUNCTION  */
  YYSYMBOL_GENERATE = 337,                 /* GENERATE  */
  YYSYMBOL_GIVING = 338,                   /* GIVING  */
  YYSYMBOL_GLOBAL = 339,                   /* GLOBAL  */
  YYSYMBOL_GO = 340,                       /* GO  */
  YYSYMBOL_GROUP = 341,                    /* GROUP  */
  YYSYMBOL_HEADING = 342,                  /* HEADING  */
  YYSYMBOL_HEX = 343,                      /* HEX  */
  YYSYMBOL_HEX_OF = 344,                   /* "HEX-OF"  */
  YYSYMBOL_HEX_TO_CHAR = 345,              /* "HEX-TO-CHAR"  */
  YYSYMBOL_HIGH_VALUES = 346,              /* "HIGH-VALUES"  */
  YYSYMBOL_HIGHEST_ALGEBRAIC = 347,        /* "HIGHEST-ALGEBRAIC"  */
  YYSYMBOL_HOLD = 348,                     /* HOLD  */
  YYSYMBOL_IBM_360 = 349,                  /* IBM_360  */
  YYSYMBOL_IN = 350,                       /* IN  */
  YYSYMBOL_INCLUDE = 351,                  /* INCLUDE  */
  YYSYMBOL_INDEX = 352,                    /* INDEX  */
  YYSYMBOL_INDEXED = 353,                  /* INDEXED  */
  YYSYMBOL_INDICATE = 354,                 /* INDICATE  */
  YYSYMBOL_INITIAL_kw = 355,               /* "INITIAL"  */
  YYSYMBOL_INITIATE = 356,                 /* INITIATE  */
  YYSYMBOL_INPUT = 357,                    /* INPUT  */
  YYSYMBOL_INSTALLATION = 358,             /* INSTALLATION  */
  YYSYMBOL_INTERFACE = 359,                /* INTERFACE  */
  YYSYMBOL_INTEGER = 360,                  /* INTEGER  */
  YYSYMBOL_INTEGER_OF_BOOLEAN = 361,       /* "INTEGER-OF-BOOLEAN"  */
  YYSYMBOL_INTEGER_OF_DATE = 362,          /* "INTEGER-OF-DATE"  */
  YYSYMBOL_INTEGER_OF_DAY = 363,           /* "INTEGER-OF-DAY"  */
  YYSYMBOL_INTEGER_OF_FORMATTED_DATE = 364, /* "INTEGER-OF-FORMATTED-DATE"  */
  YYSYMBOL_INTEGER_PART = 365,             /* "INTEGER-PART"  */
  YYSYMBOL_INTO = 366,                     /* INTO  */
  YYSYMBOL_INTRINSIC = 367,                /* INTRINSIC  */
  YYSYMBOL_INVOKE = 368,                   /* INVOKE  */
  YYSYMBOL_IO = 369,                       /* IO  */
  YYSYMBOL_IO_CONTROL = 370,               /* "IO-CONTROL"  */
  YYSYMBOL_IS = 371,                       /* IS  */
  YYSYMBOL_ISNT = 372,                     /* "IS NOT"  */
  YYSYMBOL_KANJI = 373,                    /* KANJI  */
  YYSYMBOL_KEY = 374,                      /* KEY  */
  YYSYMBOL_LABEL = 375,                    /* LABEL  */
  YYSYMBOL_LAST = 376,                     /* LAST  */
  YYSYMBOL_LEADING = 377,                  /* LEADING  */
  YYSYMBOL_LEFT = 378,                     /* LEFT  */
  YYSYMBOL_LENGTH = 379,                   /* LENGTH  */
  YYSYMBOL_LENGTH_OF = 380,                /* "LENGTH-OF"  */
  YYSYMBOL_LIMIT = 381,                    /* LIMIT  */
  YYSYMBOL_LIMITS = 382,                   /* LIMITS  */
  YYSYMBOL_LINE = 383,                     /* LINE  */
  YYSYMBOL_LINES = 384,                    /* LINES  */
  YYSYMBOL_LINE_COUNTER = 385,             /* "LINE-COUNTER"  */
  YYSYMBOL_LINAGE = 386,                   /* LINAGE  */
  YYSYMBOL_LINKAGE = 387,                  /* LINKAGE  */
  YYSYMBOL_LOCALE = 388,                   /* LOCALE  */
  YYSYMBOL_LOCALE_COMPARE = 389,           /* "LOCALE-COMPARE"  */
  YYSYMBOL_LOCALE_DATE = 390,              /* "LOCALE-DATE"  */
  YYSYMBOL_LOCALE_TIME = 391,              /* "LOCALE-TIME"  */
  YYSYMBOL_LOCALE_TIME_FROM_SECONDS = 392, /* "LOCALE-TIME-FROM-SECONDS"  */
  YYSYMBOL_LOCAL_STORAGE = 393,            /* "LOCAL-STORAGE"  */
  YYSYMBOL_LOCATION = 394,                 /* LOCATION  */
  YYSYMBOL_LOCK = 395,                     /* LOCK  */
  YYSYMBOL_LOCK_ON = 396,                  /* LOCK_ON  */
  YYSYMBOL_LOG = 397,                      /* LOG  */
  YYSYMBOL_LOG10 = 398,                    /* LOG10  */
  YYSYMBOL_LOWER_CASE = 399,               /* "LOWER-CASE"  */
  YYSYMBOL_LOW_VALUES = 400,               /* "LOW-VALUES"  */
  YYSYMBOL_LOWEST_ALGEBRAIC = 401,         /* "LOWEST-ALGEBRAIC"  */
  YYSYMBOL_LPAREN = 402,                   /* " )"  */
  YYSYMBOL_MANUAL = 403,                   /* MANUAL  */
  YYSYMBOL_MAXX = 404,                     /* "Max"  */
  YYSYMBOL_MEAN = 405,                     /* MEAN  */
  YYSYMBOL_MEDIAN = 406,                   /* MEDIAN  */
  YYSYMBOL_MIDRANGE = 407,                 /* MIDRANGE  */
  YYSYMBOL_MINN = 408,                     /* "Min"  */
  YYSYMBOL_MULTIPLE = 409,                 /* MULTIPLE  */
  YYSYMBOL_MOD = 410,                      /* MOD  */
  YYSYMBOL_MODE = 411,                     /* MODE  */
  YYSYMBOL_MODULE_NAME = 412,              /* "MODULE-NAME "  */
  YYSYMBOL_NAMED = 413,                    /* NAMED  */
  YYSYMBOL_NAT = 414,                      /* NAT  */
  YYSYMBOL_NATIONAL = 415,                 /* NATIONAL  */
  YYSYMBOL_NATIONAL_EDITED = 416,          /* "NATIONAL-EDITED"  */
  YYSYMBOL_NATIONAL_OF = 417,              /* "NATIONAL-OF"  */
  YYSYMBOL_NATIVE = 418,                   /* NATIVE  */
  YYSYMBOL_NESTED = 419,                   /* NESTED  */
  YYSYMBOL_NEXT = 420,                     /* NEXT  */
  YYSYMBOL_NO = 421,                       /* NO  */
  YYSYMBOL_NOTE = 422,                     /* NOTE  */
  YYSYMBOL_NULLS = 423,                    /* NULLS  */
  YYSYMBOL_NULLPTR = 424,                  /* NULLPTR  */
  YYSYMBOL_NUMERIC = 425,                  /* NUMERIC  */
  YYSYMBOL_NUMERIC_EDITED = 426,           /* NUMERIC_EDITED  */
  YYSYMBOL_NUMVAL = 427,                   /* NUMVAL  */
  YYSYMBOL_NUMVAL_C = 428,                 /* "NUMVAL-C"  */
  YYSYMBOL_NUMVAL_F = 429,                 /* "NUMVAL-F"  */
  YYSYMBOL_OCCURS = 430,                   /* OCCURS  */
  YYSYMBOL_OF = 431,                       /* OF  */
  YYSYMBOL_OFF = 432,                      /* OFF  */
  YYSYMBOL_OMITTED = 433,                  /* OMITTED  */
  YYSYMBOL_ON = 434,                       /* ON  */
  YYSYMBOL_ONLY = 435,                     /* ONLY  */
  YYSYMBOL_OPTIONAL = 436,                 /* OPTIONAL  */
  YYSYMBOL_OPTIONS = 437,                  /* OPTIONS  */
  YYSYMBOL_ORD = 438,                      /* ORD  */
  YYSYMBOL_ORDER = 439,                    /* ORDER  */
  YYSYMBOL_ORD_MAX = 440,                  /* "ORD-MAX"  */
  YYSYMBOL_ORD_MIN = 441,                  /* "ORD-MIN"  */
  YYSYMBOL_ORGANIZATION = 442,             /* ORGANIZATION  */
  YYSYMBOL_OTHER = 443,                    /* OTHER  */
  YYSYMBOL_OTHERWISE = 444,                /* OTHERWISE  */
  YYSYMBOL_OUTPUT = 445,                   /* OUTPUT  */
  YYSYMBOL_PACKED_DECIMAL = 446,           /* PACKED_DECIMAL  */
  YYSYMBOL_PADDING = 447,                  /* PADDING  */
  YYSYMBOL_PAGE = 448,                     /* PAGE  */
  YYSYMBOL_PAGE_COUNTER = 449,             /* "PAGE-COUNTER"  */
  YYSYMBOL_PF = 450,                       /* PF  */
  YYSYMBOL_PH = 451,                       /* PH  */
  YYSYMBOL_PI = 452,                       /* PI  */
  YYSYMBOL_PIC = 453,                      /* PIC  */
  YYSYMBOL_PICTURE = 454,                  /* PICTURE  */
  YYSYMBOL_PLUS = 455,                     /* PLUS  */
  YYSYMBOL_PRESENT_VALUE = 456,            /* PRESENT_VALUE  */
  YYSYMBOL_PRINT_SWITCH = 457,             /* PRINT_SWITCH  */
  YYSYMBOL_PROCEDURE = 458,                /* PROCEDURE  */
  YYSYMBOL_PROCEDURES = 459,               /* PROCEDURES  */
  YYSYMBOL_PROCEED = 460,                  /* PROCEED  */
  YYSYMBOL_PROCESS = 461,                  /* PROCESS  */
  YYSYMBOL_PROGRAM_ID = 462,               /* "PROGRAM-ID"  */
  YYSYMBOL_PROGRAM_kw = 463,               /* "Program"  */
  YYSYMBOL_PROPERTY = 464,                 /* PROPERTY  */
  YYSYMBOL_PROTOTYPE = 465,                /* PROTOTYPE  */
  YYSYMBOL_PSEUDOTEXT = 466,               /* PSEUDOTEXT  */
  YYSYMBOL_QUOTES = 467,                   /* "QUOTE"  */
  YYSYMBOL_RANDOM = 468,                   /* RANDOM  */
  YYSYMBOL_RANDOM_SEED = 469,              /* RANDOM_SEED  */
  YYSYMBOL_RANGE = 470,                    /* RANGE  */
  YYSYMBOL_RAISE = 471,                    /* RAISE  */
  YYSYMBOL_RAISING = 472,                  /* RAISING  */
  YYSYMBOL_RD = 473,                       /* RD  */
  YYSYMBOL_RECORD = 474,                   /* RECORD  */
  YYSYMBOL_RECORDING = 475,                /* RECORDING  */
  YYSYMBOL_RECORDS = 476,                  /* RECORDS  */
  YYSYMBOL_RECURSIVE = 477,                /* RECURSIVE  */
  YYSYMBOL_REDEFINES = 478,                /* REDEFINES  */
  YYSYMBOL_REEL = 479,                     /* REEL  */
  YYSYMBOL_REFERENCE = 480,                /* REFERENCE  */
  YYSYMBOL_RELATIVE = 481,                 /* RELATIVE  */
  YYSYMBOL_REM = 482,                      /* REM  */
  YYSYMBOL_REMAINDER = 483,                /* REMAINDER  */
  YYSYMBOL_REMARKS = 484,                  /* REMARKS  */
  YYSYMBOL_REMOVAL = 485,                  /* REMOVAL  */
  YYSYMBOL_RENAMES = 486,                  /* RENAMES  */
  YYSYMBOL_REPLACE = 487,                  /* REPLACE  */
  YYSYMBOL_REPLACING = 488,                /* REPLACING  */
  YYSYMBOL_REPORT = 489,                   /* REPORT  */
  YYSYMBOL_REPORTING = 490,                /* REPORTING  */
  YYSYMBOL_REPORTS = 491,                  /* REPORTS  */
  YYSYMBOL_REPOSITORY = 492,               /* REPOSITORY  */
  YYSYMBOL_RERUN = 493,                    /* RERUN  */
  YYSYMBOL_RESERVE = 494,                  /* RESERVE  */
  YYSYMBOL_RESTRICTED = 495,               /* RESTRICTED  */
  YYSYMBOL_RESUME = 496,                   /* RESUME  */
  YYSYMBOL_REVERSE = 497,                  /* REVERSE  */
  YYSYMBOL_REVERSED = 498,                 /* REVERSED  */
  YYSYMBOL_REWIND = 499,                   /* REWIND  */
  YYSYMBOL_RF = 500,                       /* RF  */
  YYSYMBOL_RH = 501,                       /* RH  */
  YYSYMBOL_RIGHT = 502,                    /* RIGHT  */
  YYSYMBOL_ROUNDED = 503,                  /* ROUNDED  */
  YYSYMBOL_RUN = 504,                      /* RUN  */
  YYSYMBOL_SAME = 505,                     /* SAME  */
  YYSYMBOL_SCREEN = 506,                   /* SCREEN  */
  YYSYMBOL_SD = 507,                       /* SD  */
  YYSYMBOL_SECONDS_FROM_FORMATTED_TIME = 508, /* "SECONDS-FROM-FORMATTED-TIME"  */
  YYSYMBOL_SECONDS_PAST_MIDNIGHT = 509,    /* "SECONDS-PAST-MIDNIGHT"  */
  YYSYMBOL_SECURITY = 510,                 /* SECURITY  */
  YYSYMBOL_SEPARATE = 511,                 /* SEPARATE  */
  YYSYMBOL_SEQUENCE = 512,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENTIAL = 513,               /* SEQUENTIAL  */
  YYSYMBOL_SHARING = 514,                  /* SHARING  */
  YYSYMBOL_SIMPLE_EXIT = 515,              /* "(simple) EXIT"  */
  YYSYMBOL_SIGN = 516,                     /* SIGN  */
  YYSYMBOL_SIN = 517,                      /* SIN  */
  YYSYMBOL_SIZE = 518,                     /* SIZE  */
  YYSYMBOL_SMALLEST_ALGEBRAIC = 519,       /* "SMALLEST-ALGEBRAIC"  */
  YYSYMBOL_SOURCE = 520,                   /* SOURCE  */
  YYSYMBOL_SOURCE_COMPUTER = 521,          /* "SOURCE-COMPUTER"  */
  YYSYMBOL_SPECIAL_NAMES = 522,            /* SPECIAL_NAMES  */
  YYSYMBOL_SQRT = 523,                     /* SQRT  */
  YYSYMBOL_STACK = 524,                    /* STACK  */
  YYSYMBOL_STANDARD = 525,                 /* STANDARD  */
  YYSYMBOL_STANDARD_1 = 526,               /* "STANDARD-1"  */
  YYSYMBOL_STANDARD_DEVIATION = 527,       /* "STANDARD-DEVIATION "  */
  YYSYMBOL_STANDARD_COMPARE = 528,         /* "STANDARD-COMPARE"  */
  YYSYMBOL_STATUS = 529,                   /* STATUS  */
  YYSYMBOL_STRONG = 530,                   /* STRONG  */
  YYSYMBOL_SUBSTITUTE = 531,               /* SUBSTITUTE  */
  YYSYMBOL_SUM = 532,                      /* SUM  */
  YYSYMBOL_SYMBOL = 533,                   /* SYMBOL  */
  YYSYMBOL_SYMBOLIC = 534,                 /* SYMBOLIC  */
  YYSYMBOL_SYNCHRONIZED = 535,             /* SYNCHRONIZED  */
  YYSYMBOL_TALLY = 536,                    /* TALLY  */
  YYSYMBOL_TALLYING = 537,                 /* TALLYING  */
  YYSYMBOL_TAN = 538,                      /* TAN  */
  YYSYMBOL_TERMINATE = 539,                /* TERMINATE  */
  YYSYMBOL_TEST = 540,                     /* TEST  */
  YYSYMBOL_TEST_DATE_YYYYMMDD = 541,       /* "TEST-DATE-YYYYMMDD"  */
  YYSYMBOL_TEST_DAY_YYYYDDD = 542,         /* "TEST-DAY-YYYYDDD"  */
  YYSYMBOL_TEST_FORMATTED_DATETIME = 543,  /* "TEST-FORMATTED-DATETIME"  */
  YYSYMBOL_TEST_NUMVAL = 544,              /* "TEST-NUMVAL"  */
  YYSYMBOL_TEST_NUMVAL_C = 545,            /* "TEST-NUMVAL-C"  */
  YYSYMBOL_TEST_NUMVAL_F = 546,            /* "TEST-NUMVAL-F"  */
  YYSYMBOL_THAN = 547,                     /* THAN  */
  YYSYMBOL_TIME = 548,                     /* TIME  */
  YYSYMBOL_TIMES = 549,                    /* TIMES  */
  YYSYMBOL_TO = 550,                       /* TO  */
  YYSYMBOL_TOP = 551,                      /* TOP  */
  YYSYMBOL_TOP_LEVEL = 552,                /* TOP_LEVEL  */
  YYSYMBOL_TRACKS = 553,                   /* TRACKS  */
  YYSYMBOL_TRACK_AREA = 554,               /* TRACK_AREA  */
  YYSYMBOL_TRAILING = 555,                 /* TRAILING  */
  YYSYMBOL_TRANSFORM = 556,                /* TRANSFORM  */
  YYSYMBOL_TRIM = 557,                     /* TRIM  */
  YYSYMBOL_TRUE_kw = 558,                  /* "True"  */
  YYSYMBOL_TRY = 559,                      /* TRY  */
  YYSYMBOL_TURN = 560,                     /* TURN  */
  YYSYMBOL_TYPE = 561,                     /* TYPE  */
  YYSYMBOL_TYPEDEF = 562,                  /* TYPEDEF  */
  YYSYMBOL_ULENGTH = 563,                  /* ULENGTH  */
  YYSYMBOL_UNBOUNDED = 564,                /* UNBOUNDED  */
  YYSYMBOL_UNIT = 565,                     /* UNIT  */
  YYSYMBOL_UNITS = 566,                    /* UNITS  */
  YYSYMBOL_UNIT_RECORD = 567,              /* UNIT_RECORD  */
  YYSYMBOL_UNTIL = 568,                    /* UNTIL  */
  YYSYMBOL_UP = 569,                       /* UP  */
  YYSYMBOL_UPON = 570,                     /* UPON  */
  YYSYMBOL_UPOS = 571,                     /* UPOS  */
  YYSYMBOL_UPPER_CASE = 572,               /* UPPER_CASE  */
  YYSYMBOL_USAGE = 573,                    /* USAGE  */
  YYSYMBOL_USING = 574,                    /* USING  */
  YYSYMBOL_USUBSTR = 575,                  /* USUBSTR  */
  YYSYMBOL_USUPPLEMENTARY = 576,           /* USUPPLEMENTARY  */
  YYSYMBOL_UTILITY = 577,                  /* UTILITY  */
  YYSYMBOL_UUID4 = 578,                    /* UUID4  */
  YYSYMBOL_UVALID = 579,                   /* UVALID  */
  YYSYMBOL_UWIDTH = 580,                   /* UWIDTH  */
  YYSYMBOL_VALUE = 581,                    /* VALUE  */
  YYSYMBOL_VARIANCE = 582,                 /* VARIANCE  */
  YYSYMBOL_VARYING = 583,                  /* VARYING  */
  YYSYMBOL_VOLATILE = 584,                 /* VOLATILE  */
  YYSYMBOL_WHEN_COMPILED = 585,            /* WHEN_COMPILED  */
  YYSYMBOL_WITH = 586,                     /* WITH  */
  YYSYMBOL_WORKING_STORAGE = 587,          /* WORKING_STORAGE  */
  YYSYMBOL_XML = 588,                      /* XML  */
  YYSYMBOL_XMLGENERATE = 589,              /* XMLGENERATE  */
  YYSYMBOL_XMLPARSE = 590,                 /* XMLPARSE  */
  YYSYMBOL_YEAR_TO_YYYY = 591,             /* YEAR_TO_YYYY  */
  YYSYMBOL_YYYYDDD = 592,                  /* YYYYDDD  */
  YYSYMBOL_YYYYMMDD = 593,                 /* YYYYMMDD  */
  YYSYMBOL_ARITHMETIC = 594,               /* ARITHMETIC  */
  YYSYMBOL_ATTRIBUTE = 595,                /* ATTRIBUTE  */
  YYSYMBOL_AUTO = 596,                     /* AUTO  */
  YYSYMBOL_AUTOMATIC = 597,                /* AUTOMATIC  */
  YYSYMBOL_AWAY_FROM_ZERO = 598,           /* "AWAY-FROM-ZERO"  */
  YYSYMBOL_BACKGROUND_COLOR = 599,         /* "BACKGROUND-COLOR"  */
  YYSYMBOL_BELL = 600,                     /* BELL  */
  YYSYMBOL_BINARY_ENCODING = 601,          /* "BINARY-ENCODING"  */
  YYSYMBOL_BLINK = 602,                    /* BLINK  */
  YYSYMBOL_CAPACITY = 603,                 /* CAPACITY  */
  YYSYMBOL_CENTER = 604,                   /* CENTER  */
  YYSYMBOL_CLASSIFICATION = 605,           /* CLASSIFICATION  */
  YYSYMBOL_CYCLE = 606,                    /* CYCLE  */
  YYSYMBOL_DECIMAL_ENCODING = 607,         /* "DECIMAL-ENCODING"  */
  YYSYMBOL_ENTRY_CONVENTION = 608,         /* ENTRY_CONVENTION  */
  YYSYMBOL_EOL = 609,                      /* EOL  */
  YYSYMBOL_EOS = 610,                      /* EOS  */
  YYSYMBOL_ERASE = 611,                    /* ERASE  */
  YYSYMBOL_EXPANDS = 612,                  /* EXPANDS  */
  YYSYMBOL_FLOAT_BINARY = 613,             /* "FLOAT-BINARY"  */
  YYSYMBOL_FLOAT_DECIMAL = 614,            /* "FLOAT-DECIMAL"  */
  YYSYMBOL_FOREGROUND_COLOR = 615,         /* FOREGROUND_COLOR  */
  YYSYMBOL_FOREVER = 616,                  /* FOREVER  */
  YYSYMBOL_FULL = 617,                     /* FULL  */
  YYSYMBOL_HIGHLIGHT = 618,                /* HIGHLIGHT  */
  YYSYMBOL_HIGH_ORDER_LEFT = 619,          /* "HIGH-ORDER-LEFT"  */
  YYSYMBOL_HIGH_ORDER_RIGHT = 620,         /* "HIGH-ORDER-RIGHT"  */
  YYSYMBOL_IGNORING = 621,                 /* IGNORING  */
  YYSYMBOL_IMPLEMENTS = 622,               /* IMPLEMENTS  */
  YYSYMBOL_INITIALIZED = 623,              /* INITIALIZED  */
  YYSYMBOL_INTERMEDIATE = 624,             /* INTERMEDIATE  */
  YYSYMBOL_LC_ALL_kw = 625,                /* "LC-ALL"  */
  YYSYMBOL_LC_COLLATE_kw = 626,            /* "LC-COLLATE"  */
  YYSYMBOL_LC_CTYPE_kw = 627,              /* "LC-CTYPE"  */
  YYSYMBOL_LC_MESSAGES_kw = 628,           /* "LC-MESSAGES"  */
  YYSYMBOL_LC_MONETARY_kw = 629,           /* "LC-MONETARY"  */
  YYSYMBOL_LC_NUMERIC_kw = 630,            /* "LC-NUMERIC"  */
  YYSYMBOL_LC_TIME_kw = 631,               /* "LC-TIME"  */
  YYSYMBOL_LOWLIGHT = 632,                 /* LOWLIGHT  */
  YYSYMBOL_NEAREST_AWAY_FROM_ZERO = 633,   /* "NEAREST-AWAY-FROM-ZERO"  */
  YYSYMBOL_NEAREST_EVEN = 634,             /* NEAREST_EVEN  */
  YYSYMBOL_NEAREST_TOWARD_ZERO = 635,      /* "NEAREST-EVEN NEAREST-TOWARD-ZERO"  */
  YYSYMBOL_NONE = 636,                     /* NONE  */
  YYSYMBOL_NORMAL = 637,                   /* NORMAL  */
  YYSYMBOL_NUMBERS = 638,                  /* NUMBERS  */
  YYSYMBOL_PREFIXED = 639,                 /* PREFIXED  */
  YYSYMBOL_PREVIOUS = 640,                 /* PREVIOUS  */
  YYSYMBOL_PROHIBITED = 641,               /* PROHIBITED  */
  YYSYMBOL_RELATION = 642,                 /* RELATION  */
  YYSYMBOL_REQUIRED = 643,                 /* REQUIRED  */
  YYSYMBOL_REVERSE_VIDEO = 644,            /* REVERSE_VIDEO  */
  YYSYMBOL_ROUNDING = 645,                 /* ROUNDING  */
  YYSYMBOL_SECONDS = 646,                  /* SECONDS  */
  YYSYMBOL_SECURE = 647,                   /* SECURE  */
  YYSYMBOL_SHORT = 648,                    /* SHORT  */
  YYSYMBOL_SIGNED_kw = 649,                /* SIGNED_kw  */
  YYSYMBOL_STANDARD_BINARY = 650,          /* "STANDARD-BINARY"  */
  YYSYMBOL_STANDARD_DECIMAL = 651,         /* "STANDARD-DECIMAL"  */
  YYSYMBOL_STATEMENT = 652,                /* STATEMENT  */
  YYSYMBOL_STEP = 653,                     /* STEP  */
  YYSYMBOL_STRUCTURE = 654,                /* STRUCTURE  */
  YYSYMBOL_TOWARD_GREATER = 655,           /* "TOWARD-GREATER"  */
  YYSYMBOL_TOWARD_LESSER = 656,            /* "TOWARD-LESSER"  */
  YYSYMBOL_TRUNCATION = 657,               /* TRUNCATION  */
  YYSYMBOL_UCS_4 = 658,                    /* "UCS-4"  */
  YYSYMBOL_UNDERLINE = 659,                /* UNDERLINE  */
  YYSYMBOL_UNSIGNED_kw = 660,              /* UNSIGNED_kw  */
  YYSYMBOL_UTF_16 = 661,                   /* "UTF-16"  */
  YYSYMBOL_UTF_8 = 662,                    /* "UTF-8"  */
  YYSYMBOL_ADDRESS = 663,                  /* ADDRESS  */
  YYSYMBOL_END_ACCEPT = 664,               /* "END-ACCEPT"  */
  YYSYMBOL_END_ADD = 665,                  /* "END-ADD"  */
  YYSYMBOL_END_CALL = 666,                 /* "END-CALL"  */
  YYSYMBOL_END_COMPUTE = 667,              /* "END-COMPUTE"  */
  YYSYMBOL_END_DELETE = 668,               /* "END-DELETE"  */
  YYSYMBOL_END_DISPLAY = 669,              /* "END-DISPLAY"  */
  YYSYMBOL_END_DIVIDE = 670,               /* "END-DIVIDE"  */
  YYSYMBOL_END_EVALUATE = 671,             /* "END-EVALUATE"  */
  YYSYMBOL_END_MULTIPLY = 672,             /* "END-MULTIPLY"  */
  YYSYMBOL_END_PERFORM = 673,              /* "END-PERFORM"  */
  YYSYMBOL_END_READ = 674,                 /* "END-READ"  */
  YYSYMBOL_END_RETURN = 675,               /* "END-RETURN"  */
  YYSYMBOL_END_REWRITE = 676,              /* "END-REWRITE"  */
  YYSYMBOL_END_SEARCH = 677,               /* "END-SEARCH"  */
  YYSYMBOL_END_START = 678,                /* "END-START"  */
  YYSYMBOL_END_STRING = 679,               /* "END-STRING"  */
  YYSYMBOL_END_SUBTRACT = 680,             /* "END-SUBTRACT"  */
  YYSYMBOL_END_UNSTRING = 681,             /* "END-UNSTRING"  */
  YYSYMBOL_END_WRITE = 682,                /* "END-WRITE"  */
  YYSYMBOL_END_IF = 683,                   /* "END-IF"  */
  YYSYMBOL_THRU = 684,                     /* THRU  */
  YYSYMBOL_OR = 685,                       /* OR  */
  YYSYMBOL_AND = 686,                      /* AND  */
  YYSYMBOL_NOT = 687,                      /* NOT  */
  YYSYMBOL_688_ = 688,                     /* '<'  */
  YYSYMBOL_689_ = 689,                     /* '>'  */
  YYSYMBOL_690_ = 690,                     /* '='  */
  YYSYMBOL_NE = 691,                       /* NE  */
  YYSYMBOL_LE = 692,                       /* LE  */
  YYSYMBOL_GE = 693,                       /* GE  */
  YYSYMBOL_694_ = 694,                     /* '-'  */
  YYSYMBOL_695_ = 695,                     /* '+'  */
  YYSYMBOL_696_ = 696,                     /* '*'  */
  YYSYMBOL_697_ = 697,                     /* '/'  */
  YYSYMBOL_POW = 698,                      /* POW  */
  YYSYMBOL_NEG = 699,                      /* NEG  */
  YYSYMBOL_700_ = 700,                     /* '.'  */
  YYSYMBOL_701_ = 701,                     /* '&'  */
  YYSYMBOL_702_S_ = 702,                   /* 'S'  */
  YYSYMBOL_703_ = 703,                     /* '('  */
  YYSYMBOL_704_ = 704,                     /* ')'  */
  YYSYMBOL_705_ = 705,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 706,                 /* $accept  */
  YYSYMBOL_top = 707,                      /* top  */
  YYSYMBOL_programs = 708,                 /* programs  */
  YYSYMBOL_program = 709,                  /* program  */
  YYSYMBOL_710_1 = 710,                    /* $@1  */
  YYSYMBOL_id_div = 711,                   /* id_div  */
  YYSYMBOL_cdf_words = 712,                /* cdf_words  */
  YYSYMBOL_cobol_words = 713,              /* cobol_words  */
  YYSYMBOL_cobol_words1 = 714,             /* cobol_words1  */
  YYSYMBOL_program_id = 715,               /* program_id  */
  YYSYMBOL_dot = 716,                      /* dot  */
  YYSYMBOL_program_as = 717,               /* program_as  */
  YYSYMBOL_function_id = 718,              /* function_id  */
  YYSYMBOL_options_para = 719,             /* options_para  */
  YYSYMBOL_opt_clauses = 720,              /* opt_clauses  */
  YYSYMBOL_opt_clause = 721,               /* opt_clause  */
  YYSYMBOL_opt_arith = 722,                /* opt_arith  */
  YYSYMBOL_opt_arith_type = 723,           /* opt_arith_type  */
  YYSYMBOL_opt_round = 724,                /* opt_round  */
  YYSYMBOL_opt_entry = 725,                /* opt_entry  */
  YYSYMBOL_opt_binary = 726,               /* opt_binary  */
  YYSYMBOL_default_kw = 727,               /* default_kw  */
  YYSYMBOL_opt_decimal = 728,              /* opt_decimal  */
  YYSYMBOL_opt_intermediate = 729,         /* opt_intermediate  */
  YYSYMBOL_opt_init = 730,                 /* opt_init  */
  YYSYMBOL_opt_section = 731,              /* opt_section  */
  YYSYMBOL_opt_init_sects = 732,           /* opt_init_sects  */
  YYSYMBOL_opt_init_sect = 733,            /* opt_init_sect  */
  YYSYMBOL_opt_init_value = 734,           /* opt_init_value  */
  YYSYMBOL_namestr = 735,                  /* namestr  */
  YYSYMBOL_program_attrs = 736,            /* program_attrs  */
  YYSYMBOL_comminits = 737,                /* comminits  */
  YYSYMBOL_comminit = 738,                 /* comminit  */
  YYSYMBOL_env_div = 739,                  /* env_div  */
  YYSYMBOL_740_2 = 740,                    /* $@2  */
  YYSYMBOL_env_sections = 741,             /* env_sections  */
  YYSYMBOL_env_section = 742,              /* env_section  */
  YYSYMBOL_io_sections = 743,              /* io_sections  */
  YYSYMBOL_io_section = 744,               /* io_section  */
  YYSYMBOL_io_control_clauses = 745,       /* io_control_clauses  */
  YYSYMBOL_io_control_clause = 746,        /* io_control_clause  */
  YYSYMBOL_area = 747,                     /* area  */
  YYSYMBOL_smerge = 748,                   /* smerge  */
  YYSYMBOL_selects = 749,                  /* selects  */
  YYSYMBOL_select = 750,                   /* select  */
  YYSYMBOL_selected_name = 751,            /* selected_name  */
  YYSYMBOL_external = 752,                 /* external  */
  YYSYMBOL_select_clauses = 753,           /* select_clauses  */
  YYSYMBOL_select_clause = 754,            /* select_clause  */
  YYSYMBOL_access_clause = 755,            /* access_clause  */
  YYSYMBOL_access_mode = 756,              /* access_mode  */
  YYSYMBOL_alt_key_clause = 757,           /* alt_key_clause  */
  YYSYMBOL_key_source = 758,               /* key_source  */
  YYSYMBOL_key_sources = 759,              /* key_sources  */
  YYSYMBOL_unique_key = 760,               /* unique_key  */
  YYSYMBOL_assign_clause = 761,            /* assign_clause  */
  YYSYMBOL_collate_clause = 762,           /* collate_clause  */
  YYSYMBOL_collate_claus1 = 763,           /* collate_claus1  */
  YYSYMBOL_status_clause = 764,            /* status_clause  */
  YYSYMBOL_lock_mode_clause = 765,         /* lock_mode_clause  */
  YYSYMBOL_lock_how = 766,                 /* lock_how  */
  YYSYMBOL_lock_mode = 767,                /* lock_mode  */
  YYSYMBOL_multiple = 768,                 /* multiple  */
  YYSYMBOL_records = 769,                  /* records  */
  YYSYMBOL_org_clause = 770,               /* org_clause  */
  YYSYMBOL_org_is = 771,                   /* org_is  */
  YYSYMBOL_org_clause1 = 772,              /* org_clause1  */
  YYSYMBOL_padding_clause = 773,           /* padding_clause  */
  YYSYMBOL_character = 774,                /* character  */
  YYSYMBOL_padding_char = 775,             /* padding_char  */
  YYSYMBOL_record_delim_clause = 776,      /* record_delim_clause  */
  YYSYMBOL_record_key_clause = 777,        /* record_key_clause  */
  YYSYMBOL_relative_key_clause = 778,      /* relative_key_clause  */
  YYSYMBOL_reserve_clause = 779,           /* reserve_clause  */
  YYSYMBOL_reserve_area = 780,             /* reserve_area  */
  YYSYMBOL_sharing_clause = 781,           /* sharing_clause  */
  YYSYMBOL_sharing_who = 782,              /* sharing_who  */
  YYSYMBOL_other = 783,                    /* other  */
  YYSYMBOL_config_paragraphs = 784,        /* config_paragraphs  */
  YYSYMBOL_config_paragraph = 785,         /* config_paragraph  */
  YYSYMBOL_repo_members = 786,             /* repo_members  */
  YYSYMBOL_repo_member = 787,              /* repo_member  */
  YYSYMBOL_repo_class = 788,               /* repo_class  */
  YYSYMBOL_repo_as = 789,                  /* repo_as  */
  YYSYMBOL_repo_expands = 790,             /* repo_expands  */
  YYSYMBOL_repo_interface = 791,           /* repo_interface  */
  YYSYMBOL_repo_func = 792,                /* repo_func  */
  YYSYMBOL_repo_func_names = 793,          /* repo_func_names  */
  YYSYMBOL_repo_func_name = 794,           /* repo_func_name  */
  YYSYMBOL_repo_program = 795,             /* repo_program  */
  YYSYMBOL_repo_property = 796,            /* repo_property  */
  YYSYMBOL_with_debug = 797,               /* with_debug  */
  YYSYMBOL_collating_sequence = 798,       /* collating_sequence  */
  YYSYMBOL_specials = 799,                 /* specials  */
  YYSYMBOL_special_names = 800,            /* special_names  */
  YYSYMBOL_special_name = 801,             /* special_name  */
  YYSYMBOL_locale_spec = 802,              /* locale_spec  */
  YYSYMBOL_symbolic = 803,                 /* symbolic  */
  YYSYMBOL_is_alphabet = 804,              /* is_alphabet  */
  YYSYMBOL_dev_mnemonic = 805,             /* dev_mnemonic  */
  YYSYMBOL_device_name = 806,              /* device_name  */
  YYSYMBOL_alphabet_name = 807,            /* alphabet_name  */
  YYSYMBOL_alphabet_seqs = 808,            /* alphabet_seqs  */
  YYSYMBOL_alphabet_seq = 809,             /* alphabet_seq  */
  YYSYMBOL_alphabet_etc = 810,             /* alphabet_etc  */
  YYSYMBOL_alphabet_lit = 811,             /* alphabet_lit  */
  YYSYMBOL_upsi = 812,                     /* upsi  */
  YYSYMBOL_upsi_entry = 813,               /* upsi_entry  */
  YYSYMBOL_picture_sym = 814,              /* picture_sym  */
  YYSYMBOL_domains = 815,                  /* domains  */
  YYSYMBOL_domain = 816,                   /* domain  */
  YYSYMBOL_when_set_to = 817,              /* when_set_to  */
  YYSYMBOL_data_div = 818,                 /* data_div  */
  YYSYMBOL_819_3 = 819,                    /* $@3  */
  YYSYMBOL_data_sections = 820,            /* data_sections  */
  YYSYMBOL_data_section = 821,             /* data_section  */
  YYSYMBOL_822_4 = 822,                    /* $@4  */
  YYSYMBOL_823_5 = 823,                    /* $@5  */
  YYSYMBOL_824_6 = 824,                    /* $@6  */
  YYSYMBOL_825_7 = 825,                    /* $@7  */
  YYSYMBOL_file_descrs = 826,              /* file_descrs  */
  YYSYMBOL_file_descr = 827,               /* file_descr  */
  YYSYMBOL_828_8 = 828,                    /* $@8  */
  YYSYMBOL_829_9 = 829,                    /* $@9  */
  YYSYMBOL_fd_name = 830,                  /* fd_name  */
  YYSYMBOL_fd_clauses = 831,               /* fd_clauses  */
  YYSYMBOL_fd_clause = 832,                /* fd_clause  */
  YYSYMBOL_block_desc = 833,               /* block_desc  */
  YYSYMBOL_rec_contains = 834,             /* rec_contains  */
  YYSYMBOL_chars_recs = 835,               /* chars_recs  */
  YYSYMBOL_label_desc = 836,               /* label_desc  */
  YYSYMBOL_record_is = 837,                /* record_is  */
  YYSYMBOL_fd_values = 838,                /* fd_values  */
  YYSYMBOL_fd_value = 839,                 /* fd_value  */
  YYSYMBOL_alpha_val = 840,                /* alpha_val  */
  YYSYMBOL_fd_labels = 841,                /* fd_labels  */
  YYSYMBOL_fd_label = 842,                 /* fd_label  */
  YYSYMBOL_record_desc = 843,              /* record_desc  */
  YYSYMBOL_record_vary = 844,              /* record_vary  */
  YYSYMBOL_in_size = 845,                  /* in_size  */
  YYSYMBOL_from_to = 846,                  /* from_to  */
  YYSYMBOL_depending = 847,                /* depending  */
  YYSYMBOL_fd_linage = 848,                /* fd_linage  */
  YYSYMBOL_with_footings = 849,            /* with_footings  */
  YYSYMBOL_with_footing = 850,             /* with_footing  */
  YYSYMBOL_top_bot = 851,                  /* top_bot  */
  YYSYMBOL_fd_report = 852,                /* fd_report  */
  YYSYMBOL_fields_maybe = 853,             /* fields_maybe  */
  YYSYMBOL_fields = 854,                   /* fields  */
  YYSYMBOL_field = 855,                    /* field  */
  YYSYMBOL_occurs_clause = 856,            /* occurs_clause  */
  YYSYMBOL_cardinal_lb = 857,              /* cardinal_lb  */
  YYSYMBOL_cardinal = 858,                 /* cardinal  */
  YYSYMBOL_depending_on = 859,             /* depending_on  */
  YYSYMBOL_bound = 860,                    /* bound  */
  YYSYMBOL_key_descrs = 861,               /* key_descrs  */
  YYSYMBOL_key_descr = 862,                /* key_descr  */
  YYSYMBOL_ordering = 863,                 /* ordering  */
  YYSYMBOL_key_fields = 864,               /* key_fields  */
  YYSYMBOL_key_field1 = 865,               /* key_field1  */
  YYSYMBOL_indexed = 866,                  /* indexed  */
  YYSYMBOL_index_fields = 867,             /* index_fields  */
  YYSYMBOL_index_field1 = 868,             /* index_field1  */
  YYSYMBOL_level_name = 869,               /* level_name  */
  YYSYMBOL_data_descr = 870,               /* data_descr  */
  YYSYMBOL_const_value = 871,              /* const_value  */
  YYSYMBOL_value78 = 872,                  /* value78  */
  YYSYMBOL_data_descr1 = 873,              /* data_descr1  */
  YYSYMBOL_literalism = 874,               /* literalism  */
  YYSYMBOL_name66 = 875,                   /* name66  */
  YYSYMBOL_data_clauses = 876,             /* data_clauses  */
  YYSYMBOL_data_clause = 877,              /* data_clause  */
  YYSYMBOL_picture_clause = 878,           /* picture_clause  */
  YYSYMBOL_ones = 879,                     /* ones  */
  YYSYMBOL_alphanum_pic = 880,             /* alphanum_pic  */
  YYSYMBOL_alphanum_part = 881,            /* alphanum_part  */
  YYSYMBOL_signed = 882,                   /* signed  */
  YYSYMBOL_nps = 883,                      /* nps  */
  YYSYMBOL_nine = 884,                     /* nine  */
  YYSYMBOL_nines = 885,                    /* nines  */
  YYSYMBOL_count = 886,                    /* count  */
  YYSYMBOL_numed = 887,                    /* numed  */
  YYSYMBOL_usage_clause = 888,             /* usage_clause  */
  YYSYMBOL_usage_clause1 = 889,            /* usage_clause1  */
  YYSYMBOL_value_clause = 890,             /* value_clause  */
  YYSYMBOL_global_clause = 891,            /* global_clause  */
  YYSYMBOL_external_clause = 892,          /* external_clause  */
  YYSYMBOL_justified_clause = 893,         /* justified_clause  */
  YYSYMBOL_redefines_clause = 894,         /* redefines_clause  */
  YYSYMBOL_any_length = 895,               /* any_length  */
  YYSYMBOL_based_clause = 896,             /* based_clause  */
  YYSYMBOL_blank_zero_clause = 897,        /* blank_zero_clause  */
  YYSYMBOL_blank_when_zero = 898,          /* blank_when_zero  */
  YYSYMBOL_synched_clause = 899,           /* synched_clause  */
  YYSYMBOL_same_clause = 900,              /* same_clause  */
  YYSYMBOL_sign_clause = 901,              /* sign_clause  */
  YYSYMBOL_sign_is = 902,                  /* sign_is  */
  YYSYMBOL_sign_leading = 903,             /* sign_leading  */
  YYSYMBOL_sign_separate = 904,            /* sign_separate  */
  YYSYMBOL_type_clause = 905,              /* type_clause  */
  YYSYMBOL_typedef_clause = 906,           /* typedef_clause  */
  YYSYMBOL_volatile_clause = 907,          /* volatile_clause  */
  YYSYMBOL_procedure_div = 908,            /* procedure_div  */
  YYSYMBOL_909_10 = 909,                   /* $@10  */
  YYSYMBOL_procedure_args = 910,           /* procedure_args  */
  YYSYMBOL_procedure_uses = 911,           /* procedure_uses  */
  YYSYMBOL_procedure_use = 912,            /* procedure_use  */
  YYSYMBOL_by_value_arg = 913,             /* by_value_arg  */
  YYSYMBOL_declaratives = 914,             /* declaratives  */
  YYSYMBOL_915_11 = 915,                   /* @11  */
  YYSYMBOL_sentences = 916,                /* sentences  */
  YYSYMBOL_paragraph_name = 917,           /* paragraph_name  */
  YYSYMBOL_sentence = 918,                 /* sentence  */
  YYSYMBOL_statements = 919,               /* statements  */
  YYSYMBOL_statement = 920,                /* statement  */
  YYSYMBOL_accept = 921,                   /* accept  */
  YYSYMBOL_end_accept = 922,               /* end_accept  */
  YYSYMBOL_accept_body = 923,              /* accept_body  */
  YYSYMBOL_accept_refer = 924,             /* accept_refer  */
  YYSYMBOL_accept_excepts = 925,           /* accept_excepts  */
  YYSYMBOL_accept_except = 926,            /* accept_except  */
  YYSYMBOL_envar = 927,                    /* envar  */
  YYSYMBOL_acceptable = 928,               /* acceptable  */
  YYSYMBOL_add = 929,                      /* add  */
  YYSYMBOL_add_impl = 930,                 /* add_impl  */
  YYSYMBOL_add_cond = 931,                 /* add_cond  */
  YYSYMBOL_end_add = 932,                  /* end_add  */
  YYSYMBOL_add_body = 933,                 /* add_body  */
  YYSYMBOL_rounded = 934,                  /* rounded  */
  YYSYMBOL_rounded_mode = 935,             /* rounded_mode  */
  YYSYMBOL_rounded_type = 936,             /* rounded_type  */
  YYSYMBOL_round_between = 937,            /* round_between  */
  YYSYMBOL_might_be = 938,                 /* might_be  */
  YYSYMBOL_posneg = 939,                   /* posneg  */
  YYSYMBOL_scalar88s = 940,                /* scalar88s  */
  YYSYMBOL_name88 = 941,                   /* name88  */
  YYSYMBOL_scalar88 = 942,                 /* scalar88  */
  YYSYMBOL_allocate = 943,                 /* allocate  */
  YYSYMBOL_initialized = 944,              /* initialized  */
  YYSYMBOL_alloc_ret = 945,                /* alloc_ret  */
  YYSYMBOL_compute = 946,                  /* compute  */
  YYSYMBOL_compute_impl = 947,             /* compute_impl  */
  YYSYMBOL_compute_cond = 948,             /* compute_cond  */
  YYSYMBOL_end_compute = 949,              /* end_compute  */
  YYSYMBOL_compute_body = 950,             /* compute_body  */
  YYSYMBOL_951_12 = 951,                   /* $@12  */
  YYSYMBOL_compute_expr = 952,             /* compute_expr  */
  YYSYMBOL_953_13 = 953,                   /* $@13  */
  YYSYMBOL_954_14 = 954,                   /* $@14  */
  YYSYMBOL_display = 955,                  /* display  */
  YYSYMBOL_end_display = 956,              /* end_display  */
  YYSYMBOL_disp_body = 957,                /* disp_body  */
  YYSYMBOL_disp_vargs = 958,               /* disp_vargs  */
  YYSYMBOL_disp_upon = 959,                /* disp_upon  */
  YYSYMBOL_exhibit_stmt = 960,             /* exhibit_stmt  */
  YYSYMBOL_exh_changed = 961,              /* exh_changed  */
  YYSYMBOL_exh_named = 962,                /* exh_named  */
  YYSYMBOL_divide = 963,                   /* divide  */
  YYSYMBOL_divide_impl = 964,              /* divide_impl  */
  YYSYMBOL_divide_cond = 965,              /* divide_cond  */
  YYSYMBOL_end_divide = 966,               /* end_divide  */
  YYSYMBOL_divide_body = 967,              /* divide_body  */
  YYSYMBOL_divide_into = 968,              /* divide_into  */
  YYSYMBOL_divide_by = 969,                /* divide_by  */
  YYSYMBOL_end_program = 970,              /* end_program  */
  YYSYMBOL_end_program1 = 971,             /* end_program1  */
  YYSYMBOL_continue_stmt = 972,            /* continue_stmt  */
  YYSYMBOL_exit = 973,                     /* exit  */
  YYSYMBOL_974_15 = 974,                   /* $@15  */
  YYSYMBOL_exit_with = 975,                /* exit_with  */
  YYSYMBOL_exit_what = 976,                /* exit_what  */
  YYSYMBOL_exit_raising = 977,             /* exit_raising  */
  YYSYMBOL_free = 978,                     /* free  */
  YYSYMBOL_free_tgts = 979,                /* free_tgts  */
  YYSYMBOL_free_tgt = 980,                 /* free_tgt  */
  YYSYMBOL_simple_cond = 981,              /* simple_cond  */
  YYSYMBOL_kind_of_name = 982,             /* kind_of_name  */
  YYSYMBOL_bool_expr = 983,                /* bool_expr  */
  YYSYMBOL_log_expr = 984,                 /* log_expr  */
  YYSYMBOL_log_term = 985,                 /* log_term  */
  YYSYMBOL_rel_expr = 986,                 /* rel_expr  */
  YYSYMBOL_rel_abbrs = 987,                /* rel_abbrs  */
  YYSYMBOL_rel_lhs = 988,                  /* rel_lhs  */
  YYSYMBOL_rel_abbr = 989,                 /* rel_abbr  */
  YYSYMBOL_rel_term = 990,                 /* rel_term  */
  YYSYMBOL_rel_term1 = 991,                /* rel_term1  */
  YYSYMBOL_expr = 992,                     /* expr  */
  YYSYMBOL_expr_term = 993,                /* expr_term  */
  YYSYMBOL_num_term = 994,                 /* num_term  */
  YYSYMBOL_value = 995,                    /* value  */
  YYSYMBOL_factor = 996,                   /* factor  */
  YYSYMBOL_if_stmt = 997,                  /* if_stmt  */
  YYSYMBOL_if_impl = 998,                  /* if_impl  */
  YYSYMBOL_if_verb = 999,                  /* if_verb  */
  YYSYMBOL_if_test = 1000,                 /* if_test  */
  YYSYMBOL_if_body = 1001,                 /* if_body  */
  YYSYMBOL_1002_16 = 1002,                 /* $@16  */
  YYSYMBOL_next_statements = 1003,         /* next_statements  */
  YYSYMBOL_end_if = 1004,                  /* end_if  */
  YYSYMBOL_evaluate = 1005,                /* evaluate  */
  YYSYMBOL_eval_verb = 1006,               /* eval_verb  */
  YYSYMBOL_eval_subjects = 1007,           /* eval_subjects  */
  YYSYMBOL_eval_subject = 1008,            /* eval_subject  */
  YYSYMBOL_eval_subject1 = 1009,           /* eval_subject1  */
  YYSYMBOL_eval_switch = 1010,             /* eval_switch  */
  YYSYMBOL_1011_17 = 1011,                 /* $@17  */
  YYSYMBOL_eval_cases = 1012,              /* eval_cases  */
  YYSYMBOL_eval_case = 1013,               /* eval_case  */
  YYSYMBOL_eval_objects = 1014,            /* eval_objects  */
  YYSYMBOL_eval_whens = 1015,              /* eval_whens  */
  YYSYMBOL_eval_when = 1016,               /* eval_when  */
  YYSYMBOL_1017_18 = 1017,                 /* $@18  */
  YYSYMBOL_eval_obj_cols = 1018,           /* eval_obj_cols  */
  YYSYMBOL_eval_obj_col = 1019,            /* eval_obj_col  */
  YYSYMBOL_eval_posneg = 1020,             /* eval_posneg  */
  YYSYMBOL_eval_abbrs = 1021,              /* eval_abbrs  */
  YYSYMBOL_eval_abbr = 1022,               /* eval_abbr  */
  YYSYMBOL_end_evaluate = 1023,            /* end_evaluate  */
  YYSYMBOL_true_false = 1024,              /* true_false  */
  YYSYMBOL_scalar = 1025,                  /* scalar  */
  YYSYMBOL_tableref = 1026,                /* tableref  */
  YYSYMBOL_tableish = 1027,                /* tableish  */
  YYSYMBOL_refmod = 1028,                  /* refmod  */
  YYSYMBOL_typename = 1029,                /* typename  */
  YYSYMBOL_name = 1030,                    /* name  */
  YYSYMBOL_qname = 1031,                   /* qname  */
  YYSYMBOL_inof = 1032,                    /* inof  */
  YYSYMBOL_ctx_name = 1033,                /* ctx_name  */
  YYSYMBOL_context_word = 1034,            /* context_word  */
  YYSYMBOL_move = 1035,                    /* move  */
  YYSYMBOL_move_tgts = 1036,               /* move_tgts  */
  YYSYMBOL_move_tgt = 1037,                /* move_tgt  */
  YYSYMBOL_multiply = 1038,                /* multiply  */
  YYSYMBOL_multiply_impl = 1039,           /* multiply_impl  */
  YYSYMBOL_multiply_cond = 1040,           /* multiply_cond  */
  YYSYMBOL_end_multiply = 1041,            /* end_multiply  */
  YYSYMBOL_multiply_body = 1042,           /* multiply_body  */
  YYSYMBOL_arith_errs = 1043,              /* arith_errs  */
  YYSYMBOL_arith_err = 1044,               /* arith_err  */
  YYSYMBOL_relop = 1045,                   /* relop  */
  YYSYMBOL_rnames = 1046,                  /* rnames  */
  YYSYMBOL_sum = 1047,                     /* sum  */
  YYSYMBOL_num_operand = 1048,             /* num_operand  */
  YYSYMBOL_num_value = 1049,               /* num_value  */
  YYSYMBOL_cce_expr = 1050,                /* cce_expr  */
  YYSYMBOL_cce_factor = 1051,              /* cce_factor  */
  YYSYMBOL_section_name = 1052,            /* section_name  */
  YYSYMBOL_1053_19 = 1053,                 /* @19  */
  YYSYMBOL_section_kw = 1054,              /* section_kw  */
  YYSYMBOL_stop = 1055,                    /* stop  */
  YYSYMBOL_stop_status = 1056,             /* stop_status  */
  YYSYMBOL_subscripts = 1057,              /* subscripts  */
  YYSYMBOL_subscript_exprs = 1058,         /* subscript_exprs  */
  YYSYMBOL_arg_list = 1059,                /* arg_list  */
  YYSYMBOL_any_arg = 1060,                 /* any_arg  */
  YYSYMBOL_signed_literal = 1061,          /* signed_literal  */
  YYSYMBOL_num_literal = 1062,             /* num_literal  */
  YYSYMBOL_open = 1063,                    /* open  */
  YYSYMBOL_1064_20 = 1064,                 /* $@20  */
  YYSYMBOL_open_files = 1065,              /* open_files  */
  YYSYMBOL_open_file = 1066,               /* open_file  */
  YYSYMBOL_open_io = 1067,                 /* open_io  */
  YYSYMBOL_close = 1068,                   /* close  */
  YYSYMBOL_1069_21 = 1069,                 /* $@21  */
  YYSYMBOL_close_files = 1070,             /* close_files  */
  YYSYMBOL_close_file = 1071,              /* close_file  */
  YYSYMBOL_close_how = 1072,               /* close_how  */
  YYSYMBOL_reel_unit = 1073,               /* reel_unit  */
  YYSYMBOL_for_kw = 1074,                  /* for_kw  */
  YYSYMBOL_perform = 1075,                 /* perform  */
  YYSYMBOL_perform_stmts = 1076,           /* perform_stmts  */
  YYSYMBOL_perform_proc = 1077,            /* perform_proc  */
  YYSYMBOL_perform_names = 1078,           /* perform_names  */
  YYSYMBOL_perform_times = 1079,           /* perform_times  */
  YYSYMBOL_perform_vary = 1080,            /* perform_vary  */
  YYSYMBOL_perform_verb = 1081,            /* perform_verb  */
  YYSYMBOL_perform_until = 1082,           /* perform_until  */
  YYSYMBOL_perform_cond = 1083,            /* perform_cond  */
  YYSYMBOL_1084_22 = 1084,                 /* $@22  */
  YYSYMBOL_perform_inline = 1085,          /* perform_inline  */
  YYSYMBOL_perform_start = 1086,           /* perform_start  */
  YYSYMBOL_perform_except = 1087,          /* perform_except  */
  YYSYMBOL_1088_23 = 1088,                 /* $@23  */
  YYSYMBOL_1089_24 = 1089,                 /* $@24  */
  YYSYMBOL_perform_when = 1090,            /* perform_when  */
  YYSYMBOL_perform_when1 = 1091,           /* perform_when1  */
  YYSYMBOL_1092_25 = 1092,                 /* $@25  */
  YYSYMBOL_perform_ec = 1093,              /* perform_ec  */
  YYSYMBOL_except_names = 1094,            /* except_names  */
  YYSYMBOL_except_name = 1095,             /* except_name  */
  YYSYMBOL_except_files = 1096,            /* except_files  */
  YYSYMBOL_perform_ec_other = 1097,        /* perform_ec_other  */
  YYSYMBOL_1098_26 = 1098,                 /* $@26  */
  YYSYMBOL_perform_ec_common = 1099,       /* perform_ec_common  */
  YYSYMBOL_1100_27 = 1100,                 /* $@27  */
  YYSYMBOL_perform_ec_finally = 1101,      /* perform_ec_finally  */
  YYSYMBOL_1102_28 = 1102,                 /* $@28  */
  YYSYMBOL_test_before = 1103,             /* test_before  */
  YYSYMBOL_varying = 1104,                 /* varying  */
  YYSYMBOL_vary_afters = 1105,             /* vary_afters  */
  YYSYMBOL_vary_after = 1106,              /* vary_after  */
  YYSYMBOL_vary_by = 1107,                 /* vary_by  */
  YYSYMBOL_reserved_value = 1108,          /* reserved_value  */
  YYSYMBOL_spaces_etc = 1109,              /* spaces_etc  */
  YYSYMBOL_variable_type = 1110,           /* variable_type  */
  YYSYMBOL_subtract = 1111,                /* subtract  */
  YYSYMBOL_subtract_impl = 1112,           /* subtract_impl  */
  YYSYMBOL_subtract_cond = 1113,           /* subtract_cond  */
  YYSYMBOL_end_subtract = 1114,            /* end_subtract  */
  YYSYMBOL_subtract_body = 1115,           /* subtract_body  */
  YYSYMBOL_vargs = 1116,                   /* vargs  */
  YYSYMBOL_varg = 1117,                    /* varg  */
  YYSYMBOL_varg1 = 1118,                   /* varg1  */
  YYSYMBOL_varg1a = 1119,                  /* varg1a  */
  YYSYMBOL_binary_type = 1120,             /* binary_type  */
  YYSYMBOL_literal = 1121,                 /* literal  */
  YYSYMBOL_raise = 1122,                   /* raise  */
  YYSYMBOL_read = 1123,                    /* read  */
  YYSYMBOL_read_file = 1124,               /* read_file  */
  YYSYMBOL_read_body = 1125,               /* read_body  */
  YYSYMBOL_read_next = 1126,               /* read_next  */
  YYSYMBOL_read_into = 1127,               /* read_into  */
  YYSYMBOL_read_eofs = 1128,               /* read_eofs  */
  YYSYMBOL_read_eof = 1129,                /* read_eof  */
  YYSYMBOL_1130_29 = 1130,                 /* $@29  */
  YYSYMBOL_write_eops = 1131,              /* write_eops  */
  YYSYMBOL_write_eop = 1132,               /* write_eop  */
  YYSYMBOL_1133_30 = 1133,                 /* $@30  */
  YYSYMBOL_read_key = 1134,                /* read_key  */
  YYSYMBOL_write = 1135,                   /* write  */
  YYSYMBOL_write_file = 1136,              /* write_file  */
  YYSYMBOL_write_body = 1137,              /* write_body  */
  YYSYMBOL_write_what = 1138,              /* write_what  */
  YYSYMBOL_file_record = 1139,             /* file_record  */
  YYSYMBOL_advance_when = 1140,            /* advance_when  */
  YYSYMBOL_advancing = 1141,               /* advancing  */
  YYSYMBOL_advance_by = 1142,              /* advance_by  */
  YYSYMBOL_io_invalids = 1143,             /* io_invalids  */
  YYSYMBOL_io_invalid = 1144,              /* io_invalid  */
  YYSYMBOL_1145_31 = 1145,                 /* $@31  */
  YYSYMBOL_delete = 1146,                  /* delete  */
  YYSYMBOL_delete_impl = 1147,             /* delete_impl  */
  YYSYMBOL_delete_cond = 1148,             /* delete_cond  */
  YYSYMBOL_delete_body = 1149,             /* delete_body  */
  YYSYMBOL_end_delete = 1150,              /* end_delete  */
  YYSYMBOL_rewrite = 1151,                 /* rewrite  */
  YYSYMBOL_rewrite1 = 1152,                /* rewrite1  */
  YYSYMBOL_rewrite_body = 1153,            /* rewrite_body  */
  YYSYMBOL_end_rewrite = 1154,             /* end_rewrite  */
  YYSYMBOL_start = 1155,                   /* start  */
  YYSYMBOL_start_impl = 1156,              /* start_impl  */
  YYSYMBOL_start_cond = 1157,              /* start_cond  */
  YYSYMBOL_end_start = 1158,               /* end_start  */
  YYSYMBOL_start_body = 1159,              /* start_body  */
  YYSYMBOL_merge = 1160,                   /* merge  */
  YYSYMBOL_1161_32 = 1161,                 /* $@32  */
  YYSYMBOL_set_tgts = 1162,                /* set_tgts  */
  YYSYMBOL_set_operand = 1163,             /* set_operand  */
  YYSYMBOL_set_tgt = 1164,                 /* set_tgt  */
  YYSYMBOL_set = 1165,                     /* set  */
  YYSYMBOL_1166_33 = 1166,                 /* $@33  */
  YYSYMBOL_many_switches = 1167,           /* many_switches  */
  YYSYMBOL_set_switches = 1168,            /* set_switches  */
  YYSYMBOL_switches = 1169,                /* switches  */
  YYSYMBOL_one_switch = 1170,              /* one_switch  */
  YYSYMBOL_on_off = 1171,                  /* on_off  */
  YYSYMBOL_search = 1172,                  /* search  */
  YYSYMBOL_search_linear = 1173,           /* search_linear  */
  YYSYMBOL_end_search = 1174,              /* end_search  */
  YYSYMBOL_search_1_place = 1175,          /* search_1_place  */
  YYSYMBOL_search_1_body = 1176,           /* search_1_body  */
  YYSYMBOL_search_varying = 1177,          /* search_varying  */
  YYSYMBOL_search_1_cases = 1178,          /* search_1_cases  */
  YYSYMBOL_search_1_case = 1179,           /* search_1_case  */
  YYSYMBOL_search_1_when = 1180,           /* search_1_when  */
  YYSYMBOL_search_1_test = 1181,           /* search_1_test  */
  YYSYMBOL_search_binary = 1182,           /* search_binary  */
  YYSYMBOL_search_2_body = 1183,           /* search_2_body  */
  YYSYMBOL_search_2_cases = 1184,          /* search_2_cases  */
  YYSYMBOL_search_2_case = 1185,           /* search_2_case  */
  YYSYMBOL_1186_34 = 1186,                 /* $@34  */
  YYSYMBOL_search_stmts = 1187,            /* search_stmts  */
  YYSYMBOL_search_terms = 1188,            /* search_terms  */
  YYSYMBOL_search_term = 1189,             /* search_term  */
  YYSYMBOL_search_expr = 1190,             /* search_expr  */
  YYSYMBOL_sort = 1191,                    /* sort  */
  YYSYMBOL_sort_table = 1192,              /* sort_table  */
  YYSYMBOL_sort_file = 1193,               /* sort_file  */
  YYSYMBOL_sort_keys = 1194,               /* sort_keys  */
  YYSYMBOL_sort_key = 1195,                /* sort_key  */
  YYSYMBOL_forward_order = 1196,           /* forward_order  */
  YYSYMBOL_field_list = 1197,              /* field_list  */
  YYSYMBOL_sort_dup = 1198,                /* sort_dup  */
  YYSYMBOL_sort_seq = 1199,                /* sort_seq  */
  YYSYMBOL_sort_input = 1200,              /* sort_input  */
  YYSYMBOL_sort_output = 1201,             /* sort_output  */
  YYSYMBOL_sort_target = 1202,             /* sort_target  */
  YYSYMBOL_release = 1203,                 /* release  */
  YYSYMBOL_return_stmt = 1204,             /* return_stmt  */
  YYSYMBOL_return_impl = 1205,             /* return_impl  */
  YYSYMBOL_return_cond = 1206,             /* return_cond  */
  YYSYMBOL_return_end = 1207,              /* return_end  */
  YYSYMBOL_return_body = 1208,             /* return_body  */
  YYSYMBOL_return_file = 1209,             /* return_file  */
  YYSYMBOL_return_outputs = 1210,          /* return_outputs  */
  YYSYMBOL_return_output = 1211,           /* return_output  */
  YYSYMBOL_output_atend = 1212,            /* output_atend  */
  YYSYMBOL_filenames = 1213,               /* filenames  */
  YYSYMBOL_filename = 1214,                /* filename  */
  YYSYMBOL_label_name = 1215,              /* label_name  */
  YYSYMBOL_inspected = 1216,               /* inspected  */
  YYSYMBOL_backward = 1217,                /* backward  */
  YYSYMBOL_inspect = 1218,                 /* inspect  */
  YYSYMBOL_tallies = 1219,                 /* tallies  */
  YYSYMBOL_1220_35 = 1220,                 /* $@35  */
  YYSYMBOL_1221_36 = 1221,                 /* $@36  */
  YYSYMBOL_tally = 1222,                   /* tally  */
  YYSYMBOL_tally_fors = 1223,              /* tally_fors  */
  YYSYMBOL_tally_forth = 1224,             /* tally_forth  */
  YYSYMBOL_tally_matches = 1225,           /* tally_matches  */
  YYSYMBOL_tally_match = 1226,             /* tally_match  */
  YYSYMBOL_numeref = 1227,                 /* numeref  */
  YYSYMBOL_nume = 1228,                    /* nume  */
  YYSYMBOL_qnume = 1229,                   /* qnume  */
  YYSYMBOL_replacements = 1230,            /* replacements  */
  YYSYMBOL_replacement = 1231,             /* replacement  */
  YYSYMBOL_replace_oper = 1232,            /* replace_oper  */
  YYSYMBOL_x_by_ys = 1233,                 /* x_by_ys  */
  YYSYMBOL_x_by_y = 1234,                  /* x_by_y  */
  YYSYMBOL_insp_mtqual = 1235,             /* insp_mtqual  */
  YYSYMBOL_insp_quals = 1236,              /* insp_quals  */
  YYSYMBOL_insp_qual = 1237,               /* insp_qual  */
  YYSYMBOL_first_leading = 1238,           /* first_leading  */
  YYSYMBOL_alphaval = 1239,                /* alphaval  */
  YYSYMBOL_befter = 1240,                  /* befter  */
  YYSYMBOL_initialize = 1241,              /* initialize  */
  YYSYMBOL_init_clause = 1242,             /* init_clause  */
  YYSYMBOL_init_value = 1243,              /* init_value  */
  YYSYMBOL_init_categora = 1244,           /* init_categora  */
  YYSYMBOL_init_category = 1245,           /* init_category  */
  YYSYMBOL_init_replace = 1246,            /* init_replace  */
  YYSYMBOL_init_bys = 1247,                /* init_bys  */
  YYSYMBOL_init_by = 1248,                 /* init_by  */
  YYSYMBOL_init_data = 1249,               /* init_data  */
  YYSYMBOL_call = 1250,                    /* call  */
  YYSYMBOL_call_impl = 1251,               /* call_impl  */
  YYSYMBOL_call_cond = 1252,               /* call_cond  */
  YYSYMBOL_end_call = 1253,                /* end_call  */
  YYSYMBOL_call_body = 1254,               /* call_body  */
  YYSYMBOL_call_returning = 1255,          /* call_returning  */
  YYSYMBOL_entry = 1256,                   /* entry  */
  YYSYMBOL_ffi_name = 1257,                /* ffi_name  */
  YYSYMBOL_parameters = 1258,              /* parameters  */
  YYSYMBOL_parameter = 1259,               /* parameter  */
  YYSYMBOL_ffi_by_ref = 1260,              /* ffi_by_ref  */
  YYSYMBOL_ffi_by_con = 1261,              /* ffi_by_con  */
  YYSYMBOL_ffi_by_val = 1262,              /* ffi_by_val  */
  YYSYMBOL_scalar_arg = 1263,              /* scalar_arg  */
  YYSYMBOL_call_excepts = 1264,            /* call_excepts  */
  YYSYMBOL_call_except = 1265,             /* call_except  */
  YYSYMBOL_cancel = 1266,                  /* cancel  */
  YYSYMBOL_ffi_names = 1267,               /* ffi_names  */
  YYSYMBOL_alter = 1268,                   /* alter  */
  YYSYMBOL_1269_37 = 1269,                 /* $@37  */
  YYSYMBOL_alter_tgts = 1270,              /* alter_tgts  */
  YYSYMBOL_alter_tgt = 1271,               /* alter_tgt  */
  YYSYMBOL_alter_to = 1272,                /* alter_to  */
  YYSYMBOL_go_to = 1273,                   /* go_to  */
  YYSYMBOL_resume = 1274,                  /* resume  */
  YYSYMBOL_labels = 1275,                  /* labels  */
  YYSYMBOL_label_1 = 1276,                 /* label_1  */
  YYSYMBOL_string = 1277,                  /* string  */
  YYSYMBOL_string_impl = 1278,             /* string_impl  */
  YYSYMBOL_string_cond = 1279,             /* string_cond  */
  YYSYMBOL_end_string = 1280,              /* end_string  */
  YYSYMBOL_string_body = 1281,             /* string_body  */
  YYSYMBOL_str_delimiteds = 1282,          /* str_delimiteds  */
  YYSYMBOL_str_delimited = 1283,           /* str_delimited  */
  YYSYMBOL_str_input = 1284,               /* str_input  */
  YYSYMBOL_str_size = 1285,                /* str_size  */
  YYSYMBOL_str_into = 1286,                /* str_into  */
  YYSYMBOL_on_overflows = 1287,            /* on_overflows  */
  YYSYMBOL_on_overflow = 1288,             /* on_overflow  */
  YYSYMBOL_unstring = 1289,                /* unstring  */
  YYSYMBOL_end_unstring = 1290,            /* end_unstring  */
  YYSYMBOL_unstring_impl = 1291,           /* unstring_impl  */
  YYSYMBOL_unstring_cond = 1292,           /* unstring_cond  */
  YYSYMBOL_unstring_body = 1293,           /* unstring_body  */
  YYSYMBOL_unstring_src = 1294,            /* unstring_src  */
  YYSYMBOL_uns_delimited = 1295,           /* uns_delimited  */
  YYSYMBOL_uns_delimiters = 1296,          /* uns_delimiters  */
  YYSYMBOL_uns_delimiter = 1297,           /* uns_delimiter  */
  YYSYMBOL_uns_into = 1298,                /* uns_into  */
  YYSYMBOL_uns_tgts = 1299,                /* uns_tgts  */
  YYSYMBOL_uns_tgt = 1300,                 /* uns_tgt  */
  YYSYMBOL_intrinsic_call = 1301,          /* intrinsic_call  */
  YYSYMBOL_function = 1302,                /* function  */
  YYSYMBOL_function_udf = 1303,            /* function_udf  */
  YYSYMBOL_intrinsic = 1304,               /* intrinsic  */
  YYSYMBOL_module_type = 1305,             /* module_type  */
  YYSYMBOL_convert_src = 1306,             /* convert_src  */
  YYSYMBOL_convert_dst = 1307,             /* convert_dst  */
  YYSYMBOL_convert_fmt = 1308,             /* convert_fmt  */
  YYSYMBOL_numval_locale = 1309,           /* numval_locale  */
  YYSYMBOL_subst_inputs = 1310,            /* subst_inputs  */
  YYSYMBOL_subst_input = 1311,             /* subst_input  */
  YYSYMBOL_intrinsic_locale = 1312,        /* intrinsic_locale  */
  YYSYMBOL_lopper_case = 1313,             /* lopper_case  */
  YYSYMBOL_trim_trailing = 1314,           /* trim_trailing  */
  YYSYMBOL_intrinsic0 = 1315,              /* intrinsic0  */
  YYSYMBOL_intrinsic_I = 1316,             /* intrinsic_I  */
  YYSYMBOL_intrinsic_I2 = 1317,            /* intrinsic_I2  */
  YYSYMBOL_intrinsic_N = 1318,             /* intrinsic_N  */
  YYSYMBOL_intrinsic_N2 = 1319,            /* intrinsic_N2  */
  YYSYMBOL_intrinsic_X = 1320,             /* intrinsic_X  */
  YYSYMBOL_intrinsic_X2 = 1321,            /* intrinsic_X2  */
  YYSYMBOL_intrinsic_v = 1322,             /* intrinsic_v  */
  YYSYMBOL_all = 1323,                     /* all  */
  YYSYMBOL_anycase = 1324,                 /* anycase  */
  YYSYMBOL_as = 1325,                      /* as  */
  YYSYMBOL_at = 1326,                      /* at  */
  YYSYMBOL_by = 1327,                      /* by  */
  YYSYMBOL_characters = 1328,              /* characters  */
  YYSYMBOL_collating = 1329,               /* collating  */
  YYSYMBOL_contains = 1330,                /* contains  */
  YYSYMBOL_in = 1331,                      /* in  */
  YYSYMBOL_data = 1332,                    /* data  */
  YYSYMBOL_exception = 1333,               /* exception  */
  YYSYMBOL_file = 1334,                    /* file  */
  YYSYMBOL_first_last = 1335,              /* first_last  */
  YYSYMBOL_is_global = 1336,               /* is_global  */
  YYSYMBOL_global = 1337,                  /* global  */
  YYSYMBOL_initial = 1338,                 /* initial  */
  YYSYMBOL_is = 1339,                      /* is  */
  YYSYMBOL_key = 1340,                     /* key  */
  YYSYMBOL_last = 1341,                    /* last  */
  YYSYMBOL_lines = 1342,                   /* lines  */
  YYSYMBOL_mode = 1343,                    /* mode  */
  YYSYMBOL_native = 1344,                  /* native  */
  YYSYMBOL_of = 1345,                      /* of  */
  YYSYMBOL_on = 1346,                      /* on  */
  YYSYMBOL_optional = 1347,                /* optional  */
  YYSYMBOL_program_kw = 1348,              /* program_kw  */
  YYSYMBOL_order = 1349,                   /* order  */
  YYSYMBOL_record = 1350,                  /* record  */
  YYSYMBOL_sign = 1351,                    /* sign  */
  YYSYMBOL_is_signed = 1352,               /* is_signed  */
  YYSYMBOL_start_after = 1353,             /* start_after  */
  YYSYMBOL_status = 1354,                  /* status  */
  YYSYMBOL_strong = 1355,                  /* strong  */
  YYSYMBOL_times = 1356,                   /* times  */
  YYSYMBOL_then = 1357,                    /* then  */
  YYSYMBOL_to = 1358,                      /* to  */
  YYSYMBOL_usage = 1359,                   /* usage  */
  YYSYMBOL_with = 1360,                    /* with  */
  YYSYMBOL_cdf = 1361,                     /* cdf  */
  YYSYMBOL_cdf_library = 1362,             /* cdf_library  */
  YYSYMBOL_cdf_basis = 1363,               /* cdf_basis  */
  YYSYMBOL_cdf_use = 1364,                 /* cdf_use  */
  YYSYMBOL_cdf_use_when = 1365,            /* cdf_use_when  */
  YYSYMBOL_cdf_use_excepts = 1366,         /* cdf_use_excepts  */
  YYSYMBOL_cdf_use_except = 1367,          /* cdf_use_except  */
  YYSYMBOL_cdf_use_files = 1368,           /* cdf_use_files  */
  YYSYMBOL_io_mode = 1369,                 /* io_mode  */
  YYSYMBOL_globally = 1370,                /* globally  */
  YYSYMBOL_mistake = 1371,                 /* mistake  */
  YYSYMBOL_procedure = 1372,               /* procedure  */
  YYSYMBOL_cdf_listing = 1373,             /* cdf_listing  */
  YYSYMBOL_star_cbl_opts = 1374,           /* star_cbl_opts  */
  YYSYMBOL_star_cbl_opt = 1375,            /* star_cbl_opt  */
  YYSYMBOL_cdf_option = 1376,              /* cdf_option  */
  YYSYMBOL_cbl_options = 1377,             /* cbl_options  */
  YYSYMBOL_cbl_option = 1378,              /* cbl_option  */
  YYSYMBOL_cdf_none = 1379                 /* cdf_none  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;


/* Second part of user prologue.  */
#line 1288 "parse.y"

  static cbl_field_type_t
  set_operand_type(const cbl_refer_t& refer) {
    if( refer.field == NULL ) return FldInvalid;
    return refer.addr_of? FldPointer : refer.field->type;
  }

  static bool
  refer_pointer( const cbl_num_result_t& elem ) {
    assert(elem.refer.field);
    return elem.refer.is_pointer();
  }
  static bool
  valid_set_targets( const tgt_list_t& tgts, bool want_pointers ) {
    bool ok = true;
    // The only targets that can have addr_of are BASED or in Linkage Section.
    auto baddie = std::find_if( tgts.targets.begin(),
                                tgts.targets.end(),
                          []( const auto& num_result ) {
                          if( num_result.refer.addr_of ) {
                            auto f = num_result.refer.field;
                            if( ! (f->has_attr(based_e) || f->has_attr(linkage_e)) ) {
                              return true;
                            }
                          }
                          return false;
                        } );
    if( baddie != tgts.targets.end() ) {
     auto loc = symbol_field_location(field_index(baddie->refer.field));
     error_msg(loc,"target %s must be BASED or in LINKAGE SECTION",
               baddie->refer.name() );
      return false;
    }

    for( const auto& num_result : tgts.targets ) {
      auto loc = symbol_field_location(field_index(num_result.refer.field));
      if( refer_pointer(num_result) ) {
        if( !want_pointers ) {
          ok = false;
          error_msg( loc, "%s is a pointer", num_result.refer.name() );
        }
      } else {
        if( want_pointers ) {
          ok = false;
          error_msg( loc, "%s is not a pointer", num_result.refer.name() );
        }
      }
    }
    return ok;
  }

  static void initialize_allocated( const cbl_refer_t& input );
  static void
  initialize_statement( std::list<cbl_num_result_t>& tgts,
                        bool with_filler,
                        data_category_t category,
                        const category_map_t& replacement = category_map_t());


  unsigned char cbl_alphabet_t::nul_string[2] = ""; // 2 NULs lets us use one
  unsigned char *nul_string() { return cbl_alphabet_t::nul_string; }

  static inline literal_t literal_of( char *s ) {
                        literal_t output;
                        return output.set( strlen(s), s, "" );
  }
  static inline char * string_of( const literal_t& lit ) {
      return strlen(lit.data) == lit.len? lit.data : NULL;
  }

  static inline void strip_trailing_zeroes(char * const psz)
    {
    if( yydebug) return;
    // The idea here is to take the output of real_to_decimal and make it
    // more integer friendly.  Any integer value that can be expressed in 1
    // to MAX_FIXED_POINT_DIGITS digits is converted to a string without a
    // decimal point and no exponent.

    char *pdot = strchr(psz, '.');
    gcc_assert(pdot);
    char *pe = strchr(psz, 'e');
    if( !pe )
      {
      // The most likely cause of this is a "0.0" result.
      strcpy(psz, "0");
      return;
      }
    char *pnz = pe-1;
    while(*pnz == '0')
      {
      pnz--;
      }
    // pdot points to the decimal point.
    // pe points to the 'e'.
    // pnz points to the rightmost non-zero significand digit.

    // Put the exponent on top of the trailing zeroes:
    memmove(pnz+1, pe, strlen(pe)+1);
    pe = pnz+1;
    int exp = atoi(pe+1);
    // Compute the number digits to the right of the decimal point:
    int non_zero_digits = pe - (pdot+1);
    if( exp >= 1 && exp <= MAX_FIXED_POINT_DIGITS && non_zero_digits <= exp)
      {
      // Further simplification is possible, because the value does not actually
      // need a decimal point.  That's because we are dealing with something
      // like 1.e+0, or 1.23e2 or 1.23e3

      // Terminate the value where the 'e' is now:
      *pe = '\0';
      // Figure out where the extra zeroes will go:
      pe -= 1;
      // Get rid of the decimal place:
      memmove(pdot, pdot+1, strlen(pdot)+1);
      // Tack on the additional zeroes:
      for(int i=0; i<exp - non_zero_digits; i++)
        {
        *pe++ = '0';
        }
      *pe++ = '\0';
      }
    }

  static inline char * string_of( const REAL_VALUE_TYPE &cce ) {
      char output[64];
      real_to_decimal( output, &cce, sizeof(output), 32, 0 );
      strip_trailing_zeroes(output);
      char decimal = symbol_decimal_point();
      std::replace(output, output + strlen(output), '.', decimal);
      return xstrdup(output);
  }

  static inline char * string_of( tree cce ) {
      return string_of (TREE_REAL_CST (cce));
  }

  cbl_field_t *
  new_literal( const literal_t& lit, enum cbl_field_attr_t attr );

  static YYLTYPE first_line_of( YYLTYPE loc );

#line 1649 "parse.cc"


#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if 1

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* 1 */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  13
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   52293

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  706
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  674
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1837
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2787

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   947


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   701,     2,
     703,   704,   696,   695,     2,   694,   700,   697,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   705,     2,
     688,   690,   689,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   702,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   691,   692,   693,   698,   699
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,  1437,  1437,  1444,  1449,  1450,  1453,  1452,  1465,  1466,
    1467,  1470,  1471,  1474,  1475,  1477,  1480,  1483,  1486,  1491,
    1520,  1521,  1523,  1524,  1527,  1561,  1567,  1568,  1569,  1572,
    1573,  1575,  1576,  1577,  1578,  1579,  1582,  1583,  1586,  1592,
    1593,  1594,  1595,  1597,  1601,  1605,  1612,  1620,  1621,  1623,
    1630,  1637,  1644,  1653,  1658,  1668,  1669,  1671,  1672,  1682,
    1699,  1700,  1701,  1703,  1704,  1705,  1720,  1721,  1724,  1731,
    1744,  1745,  1747,  1748,  1775,  1782,  1783,  1789,  1790,  1791,
    1791,  1796,  1797,  1800,  1801,  1802,  1803,  1804,  1805,  1808,
    1809,  1812,  1813,  1814,  1815,  1818,  1819,  1822,  1826,  1830,
    1835,  1836,  1838,  1839,  1842,  1843,  1846,  1920,  1931,  1932,
    1948,  1949,  1952,  1953,  2077,  2078,  2079,  2080,  2081,  2082,
    2083,  2084,  2085,  2086,  2087,  2088,  2089,  2092,  2099,  2100,
    2101,  2104,  2123,  2124,  2126,  2127,  2129,  2130,  2133,  2138,
    2143,  2148,  2155,  2160,  2161,  2162,  2165,  2171,  2181,  2191,
    2192,  2194,  2195,  2196,  2198,  2199,  2201,  2202,  2205,  2212,
    2213,  2214,  2215,  2218,  2221,  2226,  2230,  2240,  2246,  2247,
    2249,  2250,  2251,  2254,  2261,  2278,  2287,  2293,  2294,  2295,
    2298,  2304,  2305,  2306,  2308,  2309,  2312,  2313,  2317,  2318,
    2319,  2320,  2321,  2322,  2332,  2333,  2336,  2337,  2339,  2341,
    2343,  2344,  2345,  2349,  2351,  2352,  2354,  2355,  2358,  2361,
    2372,  2376,  2399,  2403,  2409,  2417,  2452,  2455,  2456,  2463,
    2464,  2465,  2466,  2467,  2470,  2472,  2473,  2476,  2477,  2484,
    2506,  2519,  2523,  2529,  2530,  2535,  2536,  2539,  2540,  2542,
    2543,  2546,  2573,  2588,  2589,  2590,  2591,  2592,  2593,  2594,
    2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,  2603,  2604,
    2605,  2606,  2607,  2608,  2609,  2610,  2611,  2612,  2613,  2614,
    2615,  2616,  2617,  2624,  2625,  2626,  2627,  2631,  2638,  2659,
    2673,  2686,  2702,  2704,  2712,  2723,  2724,  2730,  2739,  2762,
    2780,  2786,  2792,  2798,  2806,  2807,  2822,  2823,  2826,  2836,
    2849,  2855,  2862,  2869,  2880,  2888,  2896,  2902,  2907,  2908,
    2909,  2910,  2911,  2912,  2913,  2914,  2917,  2918,  2919,  2919,
    2926,  2927,  2930,  2931,  2931,  2934,  2934,  2937,  2937,  2940,
    2940,  2943,  2948,  2949,  2951,  2951,  2952,  2952,  2955,  2956,
    2959,  2960,  2962,  2979,  2980,  2981,  2982,  2996,  2997,  2998,
    3003,  3008,  3014,  3015,  3021,  3023,  3032,  3055,  3056,  3057,
    3060,  3061,  3062,  3065,  3066,  3069,  3070,  3074,  3076,  3077,
    3080,  3081,  3083,  3086,  3087,  3090,  3091,  3092,  3093,  3096,
    3097,  3098,  3101,  3117,  3134,  3145,  3155,  3166,  3169,  3170,
    3193,  3194,  3196,  3197,  3199,  3200,  3202,  3203,  3206,  3207,
    3210,  3211,  3213,  3214,  3217,  3218,  3266,  3267,  3268,  3269,
    3270,  3281,  3287,  3294,  3301,  3309,  3310,  3313,  3314,  3316,
    3318,  3322,  3327,  3328,  3330,  3336,  3337,  3339,  3340,  3342,
    3368,  3393,  3418,  3422,  3425,  3426,  3427,  3428,  3429,  3433,
    3440,  3446,  3452,  3459,  3467,  3486,  3500,  3518,  3537,  3565,
    3591,  3614,  3647,  3710,  3826,  3827,  3846,  3857,  3874,  3981,
    3982,  3983,  3984,  3985,  3986,  3987,  4002,  4003,  4004,  4005,
    4006,  4007,  4008,  4009,  4010,  4032,  4035,  4065,  4087,  4107,
    4143,  4161,  4193,  4195,  4201,  4205,  4220,  4236,  4237,  4240,
    4241,  4244,  4245,  4253,  4254,  4257,  4258,  4266,  4294,  4295,
    4296,  4299,  4308,  4312,  4397,  4478,  4479,  4480,  4498,  4502,
    4529,  4536,  4560,  4584,  4591,  4596,  4602,  4608,  4615,  4622,
    4679,  4696,  4705,  4715,  4716,  4719,  4720,  4721,  4724,  4765,
    4777,  4778,  4780,  4781,  4783,  4784,  4785,  4805,  4813,  4827,
    4850,  4860,  4863,  4863,  4866,  4867,  4870,  4874,  4882,  4891,
    4892,  4894,  4899,  4904,  4908,  4913,  4914,  4915,  4921,  4923,
    4922,  4951,  4955,  4956,  4967,  4972,  4973,  4985,  4986,  4989,
    4990,  4998,  5020,  5030,  5031,  5034,  5044,  5045,  5046,  5047,
    5048,  5049,  5050,  5051,  5052,  5053,  5054,  5055,  5056,  5057,
    5058,  5059,  5060,  5061,  5062,  5063,  5064,  5065,  5066,  5067,
    5068,  5069,  5070,  5071,  5072,  5073,  5074,  5075,  5076,  5077,
    5078,  5079,  5080,  5081,  5082,  5083,  5084,  5100,  5124,  5158,
    5159,  5162,  5167,  5176,  5185,  5194,  5203,  5213,  5222,  5228,
    5234,  5239,  5245,  5251,  5254,  5282,  5292,  5307,  5308,  5314,
    5322,  5358,  5365,  5372,  5381,  5382,  5384,  5390,  5398,  5399,
    5402,  5409,  5417,  5424,  5446,  5447,  5448,  5450,  5452,  5453,
    5454,  5455,  5456,  5458,  5459,  5460,  5461,  5464,  5465,  5468,
    5469,  5470,  5473,  5474,  5477,  5492,  5502,  5512,  5519,  5525,
    5539,  5556,  5557,  5559,  5560,  5563,  5564,  5566,  5573,  5581,
    5582,  5585,  5585,  5592,  5592,  5598,  5598,  5608,  5616,  5617,
    5618,  5619,  5621,  5626,  5632,  5638,  5641,  5671,  5678,  5685,
    5694,  5701,  5702,  5704,  5705,  5708,  5709,  5712,  5718,  5726,
    5727,  5730,  5738,  5739,  5749,  5750,  5762,  5772,  5783,  5824,
    5841,  5847,  5853,  5858,  5865,  5869,  5875,  5880,  5885,  5885,
    5886,  5900,  5920,  5924,  5928,  5936,  5937,  5938,  5939,  5940,
    5950,  5954,  5958,  5964,  5972,  5973,  5975,  5979,  5990,  5994,
    6005,  6012,  6019,  6027,  6035,  6041,  6055,  6068,  6071,  6072,
    6077,  6083,  6088,  6096,  6100,  6105,  6106,  6110,  6117,  6133,
    6138,  6139,  6144,  6148,  6152,  6156,  6162,  6170,  6185,  6206,
    6209,  6215,  6221,  6227,  6233,  6237,  6243,  6245,  6249,  6253,
    6256,  6260,  6264,  6267,  6271,  6272,  6273,  6276,  6277,  6280,
    6283,  6288,  6290,  6301,  6305,  6305,  6311,  6312,  6319,  6320,
    6323,  6330,  6336,  6337,  6339,  6344,  6345,  6346,  6355,  6356,
    6356,  6363,  6364,  6367,  6372,  6381,  6387,  6388,  6391,  6391,
    6405,  6408,  6409,  6412,  6420,  6435,  6447,  6463,  6467,  6485,
    6491,  6492,  6495,  6518,  6551,  6555,  6559,  6563,  6567,  6573,
    6583,  6594,  6595,  6598,  6599,  6602,  6610,  6621,  6631,  6638,
    6644,  6650,  6657,  6665,  6676,  6707,  6711,  6716,  6717,  6720,
    6721,  6724,  6726,  6728,  6730,  6732,  6734,  6736,  6738,  6740,
    6742,  6744,  6746,  6748,  6750,  6752,  6754,  6756,  6758,  6760,
    6762,  6764,  6766,  6768,  6770,  6772,  6774,  6776,  6778,  6780,
    6782,  6784,  6786,  6788,  6790,  6792,  6794,  6796,  6798,  6800,
    6802,  6804,  6806,  6808,  6810,  6812,  6814,  6816,  6818,  6820,
    6822,  6824,  6826,  6828,  6830,  6832,  6834,  6836,  6838,  6840,
    6842,  6844,  6846,  6848,  6850,  6852,  6854,  6856,  6858,  6860,
    6862,  6864,  6866,  6868,  6870,  6872,  6874,  6876,  6878,  6880,
    6882,  6884,  6886,  6888,  6890,  6892,  6896,  6906,  6914,  6937,
    6944,  6950,  6969,  6973,  6978,  6984,  7005,  7016,  7017,  7019,
    7025,  7033,  7034,  7037,  7045,  7050,  7059,  7064,  7071,  7078,
    7108,  7139,  7140,  7141,  7142,  7143,  7144,  7147,  7151,  7159,
    7160,  7163,  7164,  7165,  7168,  7169,  7170,  7171,  7172,  7173,
    7182,  7191,  7231,  7232,  7236,  7240,  7244,  7248,  7249,  7250,
    7253,  7268,  7276,  7275,  7288,  7310,  7316,  7321,  7331,  7342,
    7343,  7344,  7349,  7369,  7374,  7383,  7389,  7390,  7392,  7393,
    7400,  7401,  7402,  7408,  7417,  7426,  7441,  7442,  7445,  7445,
    7447,  7448,  7450,  7457,  7458,  7459,  7460,  7463,  7463,  7465,
    7466,  7468,  7502,  7503,  7504,  7507,  7510,  7511,  7513,  7514,
    7516,  7517,  7520,  7521,  7525,  7531,  7539,  7548,  7552,  7558,
    7564,  7570,  7577,  7589,  7593,  7599,  7605,  7609,  7610,  7614,
    7617,  7623,  7632,  7641,  7641,  7654,  7663,  7674,  7678,  7686,
    7693,  7684,  7704,  7705,  7707,  7707,  7728,  7746,  7750,  7762,
    7779,  7780,  7784,  7790,  7807,  7812,  7812,  7821,  7826,  7826,
    7835,  7841,  7841,  7852,  7853,  7856,  7864,  7865,  7867,  7874,
    7875,  7878,  7879,  7880,  7882,  7883,  7884,  7885,  7888,  7889,
    7890,  7891,  7892,  7893,  7896,  7897,  7899,  7905,  7913,  7914,
    7917,  7924,  7932,  7954,  7955,  7958,  7959,  7962,  7963,  7965,
    7969,  7970,  7974,  7978,  7987,  7996,  8011,  8012,  8015,  8022,
    8026,  8030,  8034,  8040,  8050,  8063,  8069,  8073,  8077,  8088,
    8097,  8102,  8109,  8148,  8149,  8150,  8151,  8152,  8153,  8156,
    8157,  8166,  8167,  8183,  8182,  8205,  8206,  8221,  8220,  8242,
    8243,  8246,  8252,  8258,  8264,  8268,  8272,  8277,  8284,  8295,
    8318,  8323,  8325,  8336,  8347,  8352,  8353,  8356,  8357,  8359,
    8360,  8361,  8370,  8373,  8374,  8389,  8389,  8423,  8424,  8426,
    8432,  8451,  8458,  8459,  8462,  8468,  8472,  8491,  8500,  8501,
    8504,  8508,  8513,  8517,  8522,  8523,  8526,  8532,  8546,  8553,
    8559,  8567,  8567,  8599,  8603,  8608,  8609,  8610,  8626,  8642,
    8648,  8649,  8652,  8691,  8699,  8703,  8707,  8715,  8725,  8735,
    8740,  8746,  8752,  8772,  8772,  8775,  8776,  8779,  8797,  8798,
    8800,  8805,  8806,  8809,  8810,  8813,  8819,  8820,  8823,  8824,
    8827,  8851,  8852,  8855,  8870,  8872,  8874,  8876,  8881,  8886,
    8893,  8904,  8905,  8907,  8907,  8911,  8912,  8918,  8919,  8921,
    8939,  8945,  8946,  8949,  8950,  8953,  8971,  8986,  9028,  9034,
    9038,  9041,  9045,  9052,  9053,  9055,  9056,  9059,  9060,  9062,
    9063,  9074,  9079,  9085,  9089,  9095,  9099,  9105,  9112,  9120,
    9121,  9124,  9132,  9139,  9140,  9143,  9147,  9153,  9160,  9168,
    9169,  9171,  9174,  9181,  9182,  9184,  9195,  9206,  9207,  9209,
    9210,  9212,  9217,  9230,  9241,  9287,  9287,  9291,  9291,  9326,
    9336,  9337,  9340,  9349,  9353,  9357,  9361,  9370,  9371,  9376,
    9383,  9384,  9388,  9391,  9410,  9411,  9414,  9420,  9425,  9430,
    9437,  9444,  9448,  9453,  9461,  9462,  9464,  9473,  9484,  9493,
    9494,  9495,  9496,  9503,  9504,  9508,  9511,  9512,  9515,  9520,
    9525,  9531,  9537,  9545,  9546,  9551,  9556,  9563,  9567,  9571,
    9577,  9578,  9580,  9581,  9582,  9583,  9584,  9585,  9586,  9587,
    9588,  9591,  9593,  9599,  9606,  9612,  9613,  9618,  9619,  9622,
    9639,  9657,  9658,  9661,  9668,  9674,  9680,  9687,  9688,  9695,
    9700,  9716,  9731,  9734,  9735,  9741,  9742,  9743,  9744,  9746,
    9750,  9754,  9761,  9766,  9771,  9778,  9782,  9787,  9791,  9797,
    9798,  9801,  9829,  9839,  9852,  9867,  9876,  9877,  9880,  9880,
    9883,  9884,  9886,  9898,  9899,  9902,  9917,  9928,  9935,  9940,
    9949,  9950,  9952,  9977,  9988,  9989,  9991,  9997, 10004, 10005,
   10008, 10016, 10021, 10034, 10039, 10046, 10047, 10048, 10052, 10055,
   10056, 10057, 10058, 10064, 10069, 10076, 10084, 10115, 10130, 10131,
   10133, 10134, 10137, 10143, 10151, 10158, 10159, 10160, 10166, 10167,
   10170, 10171, 10177, 10184, 10188, 10192, 10196, 10202, 10203, 10205,
   10209, 10213, 10225, 10240, 10244, 10260, 10266, 10270, 10276, 10298,
   10327, 10328, 10329, 10351, 10371, 10377, 10382, 10388, 10395, 10400,
   10406, 10412, 10420, 10428, 10437, 10445, 10448, 10456, 10464, 10471,
   10478, 10485, 10493, 10500, 10508, 10515, 10524, 10529, 10536, 10543,
   10549, 10555, 10561, 10567, 10573, 10580, 10587, 10594, 10602, 10618,
   10624, 10628, 10652, 10659, 10666, 10673, 10698, 10705, 10722, 10738,
   10747, 10764, 10780, 10789, 10806, 10822, 10831, 10849, 10855, 10858,
   10859, 10860, 10861, 10862, 10865, 10866, 10867, 10869, 10870, 10872,
   10873, 10874, 10875, 10878, 10882, 10885, 10888, 10889, 10891, 10897,
   10904, 10911, 10918, 10924, 10931, 10937, 10944, 10952, 10953, 10956,
   10957, 10958, 10961, 10966, 10972, 10978, 10983, 10988, 10993, 10998,
   11004, 11009, 11014, 11019, 11027, 11030, 11033, 11034, 11035, 11036,
   11037, 11038, 11039, 11042, 11043, 11044, 11045, 11046, 11047, 11048,
   11049, 11050, 11051, 11052, 11053, 11056, 11059, 11060, 11061, 11062,
   11063, 11064, 11065, 11066, 11067, 11068, 11069, 11072, 11073, 11076,
   11077, 11078, 11081, 11082, 11083, 11084, 11085, 11086, 11087, 11088,
   11091, 11094, 11095, 11096, 11097, 11098, 11099, 11100, 11101, 11102,
   11103, 11104, 11105, 11108, 11109, 11112, 11113, 11116, 11117, 11120,
   11121, 11124, 11125, 11128, 11129, 11132, 11133, 11136, 11137, 11140,
   11141, 11144, 11145, 11148, 11149, 11152, 11153, 11156, 11157, 11158,
   11161, 11162, 11165, 11166, 11169, 11170, 11173, 11174, 11177, 11178,
   11181, 11182, 11185, 11186, 11187, 11190, 11191, 11194, 11195, 11198,
   11199, 11202, 11203, 11206, 11207, 11210, 11211, 11214, 11215, 11218,
   11219, 11222, 11223, 11226, 11227, 11228, 11231, 11232, 11235, 11236,
   11238, 11239, 11242, 11243, 11245, 11246, 11249, 11250, 11253, 11254,
   11255, 11258, 11259, 11265, 11266, 11267, 11268, 11271, 11273, 11275,
   11276, 11279, 11284, 11294, 11305, 11323, 11336, 11346, 11347, 11349,
   11374, 11375, 11378, 11379, 11380, 11381, 11384, 11385, 11386, 11387,
   11389, 11390, 11392, 11393, 11396, 11398, 11399, 11401, 11402, 11406,
   11408, 11409, 11411, 11415, 11416, 11417, 11418, 11419
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if 1
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"",
  "\"IDENTIFICATION DIVISION\"", "\"ENVIRONMENT DIVISION\"",
  "\"PROCEDURE DIVISION\"", "\"DATA DIVISION\"", "\"FILE SECTION\"",
  "\"INPUT-OUTPUT SECTION\"", "\"LINKAGE SECTION\"",
  "\"LOCAL-STORAGE SECTION\"", "\"WORKING-STORAGE SECTION\"",
  "\"OBJECT COMPUTER\"", "\"DISPLAY OF\"", "\"END FUNCTION\"",
  "\"END PROGRAM\"", "\"END PROGRAM <contained program>\"", "JUSTIFIED",
  "RETURNING", "\"invalid token\"", "ALNUM", "ALPHED", "ERROR",
  "EXCEPTION", "\"SIZE ERROR\"", "\"EXCEPTION NAME\"", "LEVEL", "\"66\"",
  "\"78\"", "\"88\"", "\"class name\"", "NAME", "\"Level 88 NAME\"",
  "\"Name\"", "\"NUMERIC-EDITED picture\"",
  "\"NUMERIC-EDITED CR picture\"", "\"NUMERIC-EDITED DB picture\"",
  "NINEDOT", "NINES", "NINEV", "PIC_P", "ONES", "SPACES", "LITERAL", "END",
  "EOP", "FILENAME", "INVALID", "NUMBER", "NEGATIVE",
  "\"numeric literal\"", "\"OVERFLOW\"", "BINARY_INTEGER", "COMPUTATIONAL",
  "PERFORM", "BACKWARD", "POSITIVE", "POINTER", "SECTION",
  "\"STANDARD ALPHABET\"", "SWITCH", "UPSI", "ZERO", "SYSIN", "SYSIPT",
  "SYSOUT", "SYSLIST", "SYSLST", "SYSPUNCH", "SYSPCH", "CONSOLE", "C01",
  "C02", "C03", "C04", "C05", "C06", "C07", "C08", "C09", "C10", "C11",
  "C12", "CSP", "S01", "S02", "S03", "S04", "S05", "\"AFP 5A\"", "STDIN",
  "STDOUT", "STDERR", "LIST", "MAP", "NOLIST", "NOMAP", "NOSOURCE",
  "\"IS or IS NOT\"", "\"UDF name\"", "\"UDF\"", "\"date format\"",
  "\"time format\"", "\"datetime format\"", "BASIS", "CBL", "CONSTANT",
  "COPY", "DEFINED", "ENTER", "FEATURE", "INSERTT", "\"(\"",
  "\"PARAMETER\"", "OVERRIDE", "READY", "RESET", "\")\"",
  "\"SERVICE RELOAD\"", "\"*CBL\"", "SUBSCRIPT", "SUPPRESS", "TITLE",
  "TRACE", "USE", "\">>COBOL-WORDS\"", "EQUATE", "UNDEFINE",
  "\">>DEFINE\"", "\">>DISPLAY\"", "\">>IF\"", "\">>ELSE\"",
  "\">>END-IF\"", "\">>EVALUATE\"", "\">>WHEN\"", "\">>END-EVALUATE\"",
  "\">>CALL-CONVENTION\"", "\"CALL\"", "\"CALL (as C)\"", "\">>PUSH\"",
  "\">>POP\"", "\">>SOURCE FORMAT\"", "IF", "THEN", "ELSE", "SENTENCE",
  "ACCEPT", "ADD", "ALTER", "CALL", "CANCEL", "CLOSE", "COMPUTE",
  "CONTINUE", "DELETE", "DISPLAY", "DIVIDE", "EVALUATE", "EXIT",
  "\"FILLER\"", "GOBACK", "GOTO", "INITIALIZE", "INSPECT", "MERGE", "MOVE",
  "MULTIPLY", "OPEN", "PARAGRAPH", "READ", "RELEASE", "RETURN", "REWRITE",
  "SEARCH", "SET", "SELECT", "SORT", "\"SORT-MERGE\"", "\"STRING\"",
  "STOP", "SUBTRACT", "START", "UNSTRING", "WRITE", "WHEN",
  "ARGUMENT_NUMBER", "ARGUMENT_VALUE", "ENVIRONMENT_NAME",
  "ENVIRONMENT_VALUE", "ABS", "ACCESS", "ACOS", "ACTUAL", "ADVANCING",
  "AFTER", "ALL", "ALLOCATE", "ALPHABET", "ALPHABETIC",
  "\"ALPHABETIC-LOWER\"", "\"ALPHABETIC-UPPER\"", "ALPHANUMERIC",
  "\"ALPHANUMERIC-EDITED\"", "ALSO", "ALTERNATE", "ANNUITY", "ANUM", "ANY",
  "ANYCASE", "APPLY", "ARE", "AREA", "AREAS", "AS", "ASCENDING",
  "ACTIVATING", "ASIN", "ASSIGN", "AT", "ATAN", "BASED", "BASECONVERT",
  "BEFORE", "BINARY", "BIT", "\"BIT-OF\"", "\"BIT-TO-CHAR\"", "BLANK",
  "BLOCK_kw", "\"BOOLEAN-OF-INTEGER\"", "BOTTOM", "BY", "BYTE",
  "\"BYTE-LENGTH\"", "CF", "CH", "CHANGED", "CHAR", "\"CHAR-NATIONAL\"",
  "CHARACTER", "CHARACTERS", "CHECKING", "CLASS", "COBOL", "CODE",
  "CODESET", "COLLATING", "COLUMN", "\"COMBINED-DATETIME\"", "COMMA",
  "\"COMMAND-LINE\"", "\"COMMAND-LINE-COUNT\"", "COMMIT", "COMMON",
  "CONCAT", "CONDITION", "\"CONFIGURATION SECTION\"", "CONTAINS",
  "CONTENT", "CONTROL", "CONTROLS", "CONVERT", "CONVERTING",
  "CORRESPONDING", "COS", "COUNT", "CURRENCY", "CURRENT", "CURRENT_DATE",
  "DATA", "DATE", "DATE_COMPILED", "\"DATE-OF-INTEGER\"",
  "\"DATE-TO-YYYYMMDD\"", "\"DATE-WRITTEN\"", "DAY", "\"DAY-OF-INTEGER\"",
  "\"DAY-OF-WEEK\"", "\"DAY-TO-YYYYDDD\"", "DBCS", "DE", "DEBUGGING",
  "DECIMAL_POINT", "DECLARATIVES", "DEFAULT", "DELIMITED", "DELIMITER",
  "DEPENDING", "DESCENDING", "DETAIL", "DIRECT", "\"DIRECT-ACCESS\"",
  "DOWN", "DUPLICATES", "DYNAMIC", "E", "EBCDIC", "EC", "EGCS", "ENTRY",
  "ENVIRONMENT", "EQUAL", "EVERY", "EXAMINE", "EXHIBIT", "EXP", "EXP10",
  "EXTEND", "EXTERNAL", "\"EXCEPTION-FILE\"", "\"EXCEPTION-FILE-N\"",
  "\"EXCEPTION-LOCATION\"", "\"EXCEPTION-LOCATION-N\"",
  "\"EXCEPTION-STATEMENT\"", "\"EXCEPTION-STATUS\"", "FACTORIAL",
  "\"False\"", "FD", "\"FILE-CONTROL\"", "\"File\"", "\"FILE-LIMIT\"",
  "FINAL", "FINALLY", "\"FIND-STRING\"", "FIRST", "FIXED", "FOOTING",
  "FOR", "\"FORMATTED-CURRENT-DATE\"", "\"FORMATTED-DATE\"",
  "\"FORMATTED-DATETIME\"", "\"FORMATTED-TIME\"", "\"FORM-OVERFLOW\"",
  "FREE", "\"FRACTION-PART\"", "FROM", "FUNCTION", "GENERATE", "GIVING",
  "GLOBAL", "GO", "GROUP", "HEADING", "HEX", "\"HEX-OF\"",
  "\"HEX-TO-CHAR\"", "\"HIGH-VALUES\"", "\"HIGHEST-ALGEBRAIC\"", "HOLD",
  "IBM_360", "IN", "INCLUDE", "INDEX", "INDEXED", "INDICATE",
  "\"INITIAL\"", "INITIATE", "INPUT", "INSTALLATION", "INTERFACE",
  "INTEGER", "\"INTEGER-OF-BOOLEAN\"", "\"INTEGER-OF-DATE\"",
  "\"INTEGER-OF-DAY\"", "\"INTEGER-OF-FORMATTED-DATE\"",
  "\"INTEGER-PART\"", "INTO", "INTRINSIC", "INVOKE", "IO",
  "\"IO-CONTROL\"", "IS", "\"IS NOT\"", "KANJI", "KEY", "LABEL", "LAST",
  "LEADING", "LEFT", "LENGTH", "\"LENGTH-OF\"", "LIMIT", "LIMITS", "LINE",
  "LINES", "\"LINE-COUNTER\"", "LINAGE", "LINKAGE", "LOCALE",
  "\"LOCALE-COMPARE\"", "\"LOCALE-DATE\"", "\"LOCALE-TIME\"",
  "\"LOCALE-TIME-FROM-SECONDS\"", "\"LOCAL-STORAGE\"", "LOCATION", "LOCK",
  "LOCK_ON", "LOG", "LOG10", "\"LOWER-CASE\"", "\"LOW-VALUES\"",
  "\"LOWEST-ALGEBRAIC\"", "\" )\"", "MANUAL", "\"Max\"", "MEAN", "MEDIAN",
  "MIDRANGE", "\"Min\"", "MULTIPLE", "MOD", "MODE", "\"MODULE-NAME \"",
  "NAMED", "NAT", "NATIONAL", "\"NATIONAL-EDITED\"", "\"NATIONAL-OF\"",
  "NATIVE", "NESTED", "NEXT", "NO", "NOTE", "NULLS", "NULLPTR", "NUMERIC",
  "NUMERIC_EDITED", "NUMVAL", "\"NUMVAL-C\"", "\"NUMVAL-F\"", "OCCURS",
  "OF", "OFF", "OMITTED", "ON", "ONLY", "OPTIONAL", "OPTIONS", "ORD",
  "ORDER", "\"ORD-MAX\"", "\"ORD-MIN\"", "ORGANIZATION", "OTHER",
  "OTHERWISE", "OUTPUT", "PACKED_DECIMAL", "PADDING", "PAGE",
  "\"PAGE-COUNTER\"", "PF", "PH", "PI", "PIC", "PICTURE", "PLUS",
  "PRESENT_VALUE", "PRINT_SWITCH", "PROCEDURE", "PROCEDURES", "PROCEED",
  "PROCESS", "\"PROGRAM-ID\"", "\"Program\"", "PROPERTY", "PROTOTYPE",
  "PSEUDOTEXT", "\"QUOTE\"", "RANDOM", "RANDOM_SEED", "RANGE", "RAISE",
  "RAISING", "RD", "RECORD", "RECORDING", "RECORDS", "RECURSIVE",
  "REDEFINES", "REEL", "REFERENCE", "RELATIVE", "REM", "REMAINDER",
  "REMARKS", "REMOVAL", "RENAMES", "REPLACE", "REPLACING", "REPORT",
  "REPORTING", "REPORTS", "REPOSITORY", "RERUN", "RESERVE", "RESTRICTED",
  "RESUME", "REVERSE", "REVERSED", "REWIND", "RF", "RH", "RIGHT",
  "ROUNDED", "RUN", "SAME", "SCREEN", "SD",
  "\"SECONDS-FROM-FORMATTED-TIME\"", "\"SECONDS-PAST-MIDNIGHT\"",
  "SECURITY", "SEPARATE", "SEQUENCE", "SEQUENTIAL", "SHARING",
  "\"(simple) EXIT\"", "SIGN", "SIN", "SIZE", "\"SMALLEST-ALGEBRAIC\"",
  "SOURCE", "\"SOURCE-COMPUTER\"", "SPECIAL_NAMES", "SQRT", "STACK",
  "STANDARD", "\"STANDARD-1\"", "\"STANDARD-DEVIATION \"",
  "\"STANDARD-COMPARE\"", "STATUS", "STRONG", "SUBSTITUTE", "SUM",
  "SYMBOL", "SYMBOLIC", "SYNCHRONIZED", "TALLY", "TALLYING", "TAN",
  "TERMINATE", "TEST", "\"TEST-DATE-YYYYMMDD\"", "\"TEST-DAY-YYYYDDD\"",
  "\"TEST-FORMATTED-DATETIME\"", "\"TEST-NUMVAL\"", "\"TEST-NUMVAL-C\"",
  "\"TEST-NUMVAL-F\"", "THAN", "TIME", "TIMES", "TO", "TOP", "TOP_LEVEL",
  "TRACKS", "TRACK_AREA", "TRAILING", "TRANSFORM", "TRIM", "\"True\"",
  "TRY", "TURN", "TYPE", "TYPEDEF", "ULENGTH", "UNBOUNDED", "UNIT",
  "UNITS", "UNIT_RECORD", "UNTIL", "UP", "UPON", "UPOS", "UPPER_CASE",
  "USAGE", "USING", "USUBSTR", "USUPPLEMENTARY", "UTILITY", "UUID4",
  "UVALID", "UWIDTH", "VALUE", "VARIANCE", "VARYING", "VOLATILE",
  "WHEN_COMPILED", "WITH", "WORKING_STORAGE", "XML", "XMLGENERATE",
  "XMLPARSE", "YEAR_TO_YYYY", "YYYYDDD", "YYYYMMDD", "ARITHMETIC",
  "ATTRIBUTE", "AUTO", "AUTOMATIC", "\"AWAY-FROM-ZERO\"",
  "\"BACKGROUND-COLOR\"", "BELL", "\"BINARY-ENCODING\"", "BLINK",
  "CAPACITY", "CENTER", "CLASSIFICATION", "CYCLE", "\"DECIMAL-ENCODING\"",
  "ENTRY_CONVENTION", "EOL", "EOS", "ERASE", "EXPANDS", "\"FLOAT-BINARY\"",
  "\"FLOAT-DECIMAL\"", "FOREGROUND_COLOR", "FOREVER", "FULL", "HIGHLIGHT",
  "\"HIGH-ORDER-LEFT\"", "\"HIGH-ORDER-RIGHT\"", "IGNORING", "IMPLEMENTS",
  "INITIALIZED", "INTERMEDIATE", "\"LC-ALL\"", "\"LC-COLLATE\"",
  "\"LC-CTYPE\"", "\"LC-MESSAGES\"", "\"LC-MONETARY\"", "\"LC-NUMERIC\"",
  "\"LC-TIME\"", "LOWLIGHT", "\"NEAREST-AWAY-FROM-ZERO\"", "NEAREST_EVEN",
  "\"NEAREST-EVEN NEAREST-TOWARD-ZERO\"", "NONE", "NORMAL", "NUMBERS",
  "PREFIXED", "PREVIOUS", "PROHIBITED", "RELATION", "REQUIRED",
  "REVERSE_VIDEO", "ROUNDING", "SECONDS", "SECURE", "SHORT", "SIGNED_kw",
  "\"STANDARD-BINARY\"", "\"STANDARD-DECIMAL\"", "STATEMENT", "STEP",
  "STRUCTURE", "\"TOWARD-GREATER\"", "\"TOWARD-LESSER\"", "TRUNCATION",
  "\"UCS-4\"", "UNDERLINE", "UNSIGNED_kw", "\"UTF-16\"", "\"UTF-8\"",
  "ADDRESS", "\"END-ACCEPT\"", "\"END-ADD\"", "\"END-CALL\"",
  "\"END-COMPUTE\"", "\"END-DELETE\"", "\"END-DISPLAY\"", "\"END-DIVIDE\"",
  "\"END-EVALUATE\"", "\"END-MULTIPLY\"", "\"END-PERFORM\"",
  "\"END-READ\"", "\"END-RETURN\"", "\"END-REWRITE\"", "\"END-SEARCH\"",
  "\"END-START\"", "\"END-STRING\"", "\"END-SUBTRACT\"",
  "\"END-UNSTRING\"", "\"END-WRITE\"", "\"END-IF\"", "THRU", "OR", "AND",
  "NOT", "'<'", "'>'", "'='", "NE", "LE", "GE", "'-'", "'+'", "'*'", "'/'",
  "POW", "NEG", "'.'", "'&'", "'S'", "'('", "')'", "':'", "$accept", "top",
  "programs", "program", "$@1", "id_div", "cdf_words", "cobol_words",
  "cobol_words1", "program_id", "dot", "program_as", "function_id",
  "options_para", "opt_clauses", "opt_clause", "opt_arith",
  "opt_arith_type", "opt_round", "opt_entry", "opt_binary", "default_kw",
  "opt_decimal", "opt_intermediate", "opt_init", "opt_section",
  "opt_init_sects", "opt_init_sect", "opt_init_value", "namestr",
  "program_attrs", "comminits", "comminit", "env_div", "$@2",
  "env_sections", "env_section", "io_sections", "io_section",
  "io_control_clauses", "io_control_clause", "area", "smerge", "selects",
  "select", "selected_name", "external", "select_clauses", "select_clause",
  "access_clause", "access_mode", "alt_key_clause", "key_source",
  "key_sources", "unique_key", "assign_clause", "collate_clause",
  "collate_claus1", "status_clause", "lock_mode_clause", "lock_how",
  "lock_mode", "multiple", "records", "org_clause", "org_is",
  "org_clause1", "padding_clause", "character", "padding_char",
  "record_delim_clause", "record_key_clause", "relative_key_clause",
  "reserve_clause", "reserve_area", "sharing_clause", "sharing_who",
  "other", "config_paragraphs", "config_paragraph", "repo_members",
  "repo_member", "repo_class", "repo_as", "repo_expands", "repo_interface",
  "repo_func", "repo_func_names", "repo_func_name", "repo_program",
  "repo_property", "with_debug", "collating_sequence", "specials",
  "special_names", "special_name", "locale_spec", "symbolic",
  "is_alphabet", "dev_mnemonic", "device_name", "alphabet_name",
  "alphabet_seqs", "alphabet_seq", "alphabet_etc", "alphabet_lit", "upsi",
  "upsi_entry", "picture_sym", "domains", "domain", "when_set_to",
  "data_div", "$@3", "data_sections", "data_section", "$@4", "$@5", "$@6",
  "$@7", "file_descrs", "file_descr", "$@8", "$@9", "fd_name",
  "fd_clauses", "fd_clause", "block_desc", "rec_contains", "chars_recs",
  "label_desc", "record_is", "fd_values", "fd_value", "alpha_val",
  "fd_labels", "fd_label", "record_desc", "record_vary", "in_size",
  "from_to", "depending", "fd_linage", "with_footings", "with_footing",
  "top_bot", "fd_report", "fields_maybe", "fields", "field",
  "occurs_clause", "cardinal_lb", "cardinal", "depending_on", "bound",
  "key_descrs", "key_descr", "ordering", "key_fields", "key_field1",
  "indexed", "index_fields", "index_field1", "level_name", "data_descr",
  "const_value", "value78", "data_descr1", "literalism", "name66",
  "data_clauses", "data_clause", "picture_clause", "ones", "alphanum_pic",
  "alphanum_part", "signed", "nps", "nine", "nines", "count", "numed",
  "usage_clause", "usage_clause1", "value_clause", "global_clause",
  "external_clause", "justified_clause", "redefines_clause", "any_length",
  "based_clause", "blank_zero_clause", "blank_when_zero", "synched_clause",
  "same_clause", "sign_clause", "sign_is", "sign_leading", "sign_separate",
  "type_clause", "typedef_clause", "volatile_clause", "procedure_div",
  "$@10", "procedure_args", "procedure_uses", "procedure_use",
  "by_value_arg", "declaratives", "@11", "sentences", "paragraph_name",
  "sentence", "statements", "statement", "accept", "end_accept",
  "accept_body", "accept_refer", "accept_excepts", "accept_except",
  "envar", "acceptable", "add", "add_impl", "add_cond", "end_add",
  "add_body", "rounded", "rounded_mode", "rounded_type", "round_between",
  "might_be", "posneg", "scalar88s", "name88", "scalar88", "allocate",
  "initialized", "alloc_ret", "compute", "compute_impl", "compute_cond",
  "end_compute", "compute_body", "$@12", "compute_expr", "$@13", "$@14",
  "display", "end_display", "disp_body", "disp_vargs", "disp_upon",
  "exhibit_stmt", "exh_changed", "exh_named", "divide", "divide_impl",
  "divide_cond", "end_divide", "divide_body", "divide_into", "divide_by",
  "end_program", "end_program1", "continue_stmt", "exit", "$@15",
  "exit_with", "exit_what", "exit_raising", "free", "free_tgts",
  "free_tgt", "simple_cond", "kind_of_name", "bool_expr", "log_expr",
  "log_term", "rel_expr", "rel_abbrs", "rel_lhs", "rel_abbr", "rel_term",
  "rel_term1", "expr", "expr_term", "num_term", "value", "factor",
  "if_stmt", "if_impl", "if_verb", "if_test", "if_body", "$@16",
  "next_statements", "end_if", "evaluate", "eval_verb", "eval_subjects",
  "eval_subject", "eval_subject1", "eval_switch", "$@17", "eval_cases",
  "eval_case", "eval_objects", "eval_whens", "eval_when", "$@18",
  "eval_obj_cols", "eval_obj_col", "eval_posneg", "eval_abbrs",
  "eval_abbr", "end_evaluate", "true_false", "scalar", "tableref",
  "tableish", "refmod", "typename", "name", "qname", "inof", "ctx_name",
  "context_word", "move", "move_tgts", "move_tgt", "multiply",
  "multiply_impl", "multiply_cond", "end_multiply", "multiply_body",
  "arith_errs", "arith_err", "relop", "rnames", "sum", "num_operand",
  "num_value", "cce_expr", "cce_factor", "section_name", "@19",
  "section_kw", "stop", "stop_status", "subscripts", "subscript_exprs",
  "arg_list", "any_arg", "signed_literal", "num_literal", "open", "$@20",
  "open_files", "open_file", "open_io", "close", "$@21", "close_files",
  "close_file", "close_how", "reel_unit", "for_kw", "perform",
  "perform_stmts", "perform_proc", "perform_names", "perform_times",
  "perform_vary", "perform_verb", "perform_until", "perform_cond", "$@22",
  "perform_inline", "perform_start", "perform_except", "$@23", "$@24",
  "perform_when", "perform_when1", "$@25", "perform_ec", "except_names",
  "except_name", "except_files", "perform_ec_other", "$@26",
  "perform_ec_common", "$@27", "perform_ec_finally", "$@28", "test_before",
  "varying", "vary_afters", "vary_after", "vary_by", "reserved_value",
  "spaces_etc", "variable_type", "subtract", "subtract_impl",
  "subtract_cond", "end_subtract", "subtract_body", "vargs", "varg",
  "varg1", "varg1a", "binary_type", "literal", "raise", "read",
  "read_file", "read_body", "read_next", "read_into", "read_eofs",
  "read_eof", "$@29", "write_eops", "write_eop", "$@30", "read_key",
  "write", "write_file", "write_body", "write_what", "file_record",
  "advance_when", "advancing", "advance_by", "io_invalids", "io_invalid",
  "$@31", "delete", "delete_impl", "delete_cond", "delete_body",
  "end_delete", "rewrite", "rewrite1", "rewrite_body", "end_rewrite",
  "start", "start_impl", "start_cond", "end_start", "start_body", "merge",
  "$@32", "set_tgts", "set_operand", "set_tgt", "set", "$@33",
  "many_switches", "set_switches", "switches", "one_switch", "on_off",
  "search", "search_linear", "end_search", "search_1_place",
  "search_1_body", "search_varying", "search_1_cases", "search_1_case",
  "search_1_when", "search_1_test", "search_binary", "search_2_body",
  "search_2_cases", "search_2_case", "$@34", "search_stmts",
  "search_terms", "search_term", "search_expr", "sort", "sort_table",
  "sort_file", "sort_keys", "sort_key", "forward_order", "field_list",
  "sort_dup", "sort_seq", "sort_input", "sort_output", "sort_target",
  "release", "return_stmt", "return_impl", "return_cond", "return_end",
  "return_body", "return_file", "return_outputs", "return_output",
  "output_atend", "filenames", "filename", "label_name", "inspected",
  "backward", "inspect", "tallies", "$@35", "$@36", "tally", "tally_fors",
  "tally_forth", "tally_matches", "tally_match", "numeref", "nume",
  "qnume", "replacements", "replacement", "replace_oper", "x_by_ys",
  "x_by_y", "insp_mtqual", "insp_quals", "insp_qual", "first_leading",
  "alphaval", "befter", "initialize", "init_clause", "init_value",
  "init_categora", "init_category", "init_replace", "init_bys", "init_by",
  "init_data", "call", "call_impl", "call_cond", "end_call", "call_body",
  "call_returning", "entry", "ffi_name", "parameters", "parameter",
  "ffi_by_ref", "ffi_by_con", "ffi_by_val", "scalar_arg", "call_excepts",
  "call_except", "cancel", "ffi_names", "alter", "$@37", "alter_tgts",
  "alter_tgt", "alter_to", "go_to", "resume", "labels", "label_1",
  "string", "string_impl", "string_cond", "end_string", "string_body",
  "str_delimiteds", "str_delimited", "str_input", "str_size", "str_into",
  "on_overflows", "on_overflow", "unstring", "end_unstring",
  "unstring_impl", "unstring_cond", "unstring_body", "unstring_src",
  "uns_delimited", "uns_delimiters", "uns_delimiter", "uns_into",
  "uns_tgts", "uns_tgt", "intrinsic_call", "function", "function_udf",
  "intrinsic", "module_type", "convert_src", "convert_dst", "convert_fmt",
  "numval_locale", "subst_inputs", "subst_input", "intrinsic_locale",
  "lopper_case", "trim_trailing", "intrinsic0", "intrinsic_I",
  "intrinsic_I2", "intrinsic_N", "intrinsic_N2", "intrinsic_X",
  "intrinsic_X2", "intrinsic_v", "all", "anycase", "as", "at", "by",
  "characters", "collating", "contains", "in", "data", "exception", "file",
  "first_last", "is_global", "global", "initial", "is", "key", "last",
  "lines", "mode", "native", "of", "on", "optional", "program_kw", "order",
  "record", "sign", "is_signed", "start_after", "status", "strong",
  "times", "then", "to", "usage", "with", "cdf", "cdf_library",
  "cdf_basis", "cdf_use", "cdf_use_when", "cdf_use_excepts",
  "cdf_use_except", "cdf_use_files", "io_mode", "globally", "mistake",
  "procedure", "cdf_listing", "star_cbl_opts", "star_cbl_opt",
  "cdf_option", "cbl_options", "cbl_option", "cdf_none", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2118)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1792)

#define yytable_value_is_error(Yyn) \
  0

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
     249,   276,   333,   848, -2118,   -59,   112,   249, -2118,   370,
     894,   902,   971, -2118, 33083, 33418,   976,    52,   188,   703,
     368,   392, -2118, -2118,   531, -2118, -2118,   891, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118,   329,   640,   809,   809,   923,   923,
     587,   136, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
     540,  1237,   393, -2118, 46802,  1217,  1228, -2118, -2118, -2118,
   -2118,    35, -2118,   851, -2118,  -173,  1037, -2118,   809,   809,
     809, -2118, -2118,  1324,   133, -2118,  1256, -2118, -2118,  1081,
   -2118, -2118, -2118,   748, -2118, -2118,   809, -2118, -2118, -2118,
   -2118, -2118, -2118,   550,   670,   557,  1142,   176,  1298,  1081,
    1263,   -36, -2118,   787,   818, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118,   620,  1064,  1289, -2118,
   -2118, -2118, -2118, -2118,  1161, -2118,   636,  1142, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118,   641,   649,   663,   697,  1326,
     176, -2118,    43, -2118,  -233, -2118,   392,   506, -2118, -2118,
    1337, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
     676, -2118, -2118, -2118,  1289, -2118, -2118, -2118,  1161, -2118,
     102, -2118,   -94, -2118, -2118, -2118,   732, -2118, 50595,   -49,
   -2118,   739,   746,   514, -2118, -2118, -2118, -2118,   -25, -2118,
   -2118,  1008,   750,   754,   547, -2118,  1280, -2118, -2118, -2118,
     756,   392,   757,   758,   102, -2118,   -52,  3007,  3007,  3007,
   -2118, -2118,   -84, -2118, -2118, -2118,    66, -2118,     4, 50595,
    1177,   878, -2118,   761, -2118, -2118, -2118,  1433,  1280,   -20,
   -2118, -2118,  1435,   684,  1436,  3993, -2118,  1438,  1439,   -52,
   -2118,   685, -2118, 50595,  1440,  1445,  1447, -2118,  3150, -2118,
     184,   779, -2118,  1001, -2118, -2118, -2118, -2118, -2118, 50595,
   50595, -2118,  1487,  1008, 43447, -2118, -2118, -2118,  1099,   794,
   12907, 12907, -2118,  1498,  1280,  1250,   267,  -109, -2118,   -54,
    1475,   189,  1476,  1478,  1482,   -65, -2118, -2118, -2118, -2118,
   -2118, -2118,    -7,   809,   475, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118,  1484,  1486,  1002,   809,  1488,
    1282,   825,  3993, -2118, -2118,   809, -2118, -2118, -2118, -2118,
    1266,   809,   279,   279,   809,   100,   851, -2118, -2118,  1096,
   -2118,   956, -2118, -2118, -2118, -2118, -2118, -2118,   -22, -2118,
   -2118,   949,  -174, -2118,   -55,  1152, -2118,   198, -2118, 44733,
      62,  1501,  1322,   809,  -119,   748,   104,    68, -2118, -2118,
    2128, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118,  -125, -2118, -2118,
   -2118,    58,   948, -2118, 50595, -2118, -2118, -2118, 50595, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   31285, -2118,  1136, -2118, -2118,  1481, -2118, -2118, -2118, 50595,
   35965, -2118, 47108, 47108, -2118, 50595,  1346,  1510, 39404, 38088,
   -2118, -2118,    84, 47434, 38750,  1490, -2118, 34680, 36294, -2118,
    1511,  1515,  1510,   179, 47740, 40517, 48066, 43774,    74, 36772,
    1510, 48393,   179, 32410,  1504,  1312, 42158,   348, 45039, -2118,
    1089, 11539,   849, -2118,  2628, -2118, -2118,    48,  1216, -2118,
     887,   887, -2118, -2118,   890,   890, -2118,  -237,   989, -2118,
   -2118,   892,   892, -2118, -2118, -2118, -2118,   877, 29090, -2118,
   28714, -2118, -2118,   895,   895, -2118, -2118, -2118, -2118, -2118,
   17444, -2118,   885,   885, -2118, -2118, -2118, -2118, -2118, -2118,
     903,   903, -2118, -2118, -2118,   901,   901, -2118, -2118, -2118,
     904,   904, -2118, -2118, -2118, -2118, -2118,   907,   907, -2118,
   -2118, -2118,   914,   914, -2118, -2118, -2118, -2118, -2118, -2118,
     909,   909, -2118,   910,   910, 12223,   851,  1109,   269, -2118,
   -2118,   809,   851,   809,  1331,   805,  1535,  1009, -2118,  1534,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,   340,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118,  1084,  1068,  1167,
   -2118, -2118, -2118,  1388,  1388, -2118, -2118,  1090,     5,   809,
     911,  1390,  1390,  1240,   149, -2118,  1390,  1390,  1390, -2118,
   -2118, -2118,   916,  1333,  1581,  1088,  1088, -2118,  1587,   809,
     809, -2118,   809,  1372,   809, -2118,   835, -2118, -2118,  1594,
   -2118,  1578,  1598, -2118, -2118, 50595,   106, 40892,  1578,  1048,
     809,  1601,  1956, -2118, -2118,   204, -2118,   809, -2118,    69,
     562,  1295, -2118, -2118,  1573, -2118,  1087,   631,   760,   631,
    1350,  1288,   939, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
    1626, -2118,  1230, -2118, -2118, 50595, -2118, -2118, -2118,  1616,
    1617,  1616, -2118, -2118,   437, -2118, -2118, -2118,  1141, -2118,
   -2118, -2118,  1123,   518,  1239,  1105,  1239, -2118, -2118,  -138,
     974, -2118, -2118, -2118, -2118,  1229, -2118, 45365,  1232, 32410,
   32785, 32410,   954,   681,   695,   963, -2118, -2118, -2118, 21579,
   -2118, -2118, 51702, 32410, -2118, 12907,    47,   966, -2118, 38088,
   45365,  1104,  1104,  1643, -2118, 35487, -2118, -2118, -2118, -2118,
   47434, -2118, -2118,   339,    70, -2118, 47108,  1637,  1643,  1168,
   50595, 32410, -2118,  1623,  1109, -2118, -2118, -2118, -2118, -2118,
   39732, 45365,  1241,   972, -2118, -2118,  6002, -2118, -2118, -2118,
   -2118, -2118,  1643,  1191,  1199,   572,   183,  1088,   287, -2118,
   -2118,    51, -2118,   -84, 45843, -2118, -2118, -2118,  5318, -2118,
   -2118, -2118, 50922,  1510, 50595,  1133,  1139,   114, -2118,  1643,
    1455,   740,   282,    32,  1352,  1648,  1329,  1226,   -84,  1510,
    1109,  1366,    20, 50595,  1120,  1520,   175, -2118, 48699,  1682,
   50595,  1275,    57,  1099, -2118, -2118, 41190, -2118,  1647,  1167,
     208, -2118, -2118, -2118,  1657, 42486, -2118,  1424, -2118, -2118,
   -2118,    83, 38088, 37101,  1643,  1623,   -18, -2118, -2118,  1657,
    1425, -2118,    23,   665,  1472,    30,  1143, -2118,  1300,  1285,
   42158, -2118, -2118,  1689, -2118,  1070, -2118, -2118, 46802,  1023,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,    48,
   18831,  5589, -2118, -2118, -2118, -2118, -2118, -2118,  1536, -2118,
   -2118,  4066, -2118, -2118, -2118, -2118, -2118, -2118,  1665, 29466,
   29090, -2118, -2118, -2118,  1588,   716, -2118, -2118, 29841,   719,
   -2118,   265, 15911,   338, -2118, -2118, -2118,    98,   912, -2118,
   -2118, -2118, -2118, -2118, -2118,  1181, -2118, 38088,   472,  1183,
   -2118, -2118, 10106,  -165,  -165,  -165, -2118, -2118,  8126, -2118,
     377,  1539,  1050,  -140, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,   809,  1363,
   50595,  4036, 50595,   809,  1265, -2118,   809,   809, -2118,   809,
    1202,   645, -2118, -2118, -2118,  1227, -2118, -2118,   144,   809,
   -2118, 50595, -2118,  1415,  1415,   809,  1233,   809,  1715, -2118,
    1704,  1140, -2118, -2118, -2118, -2118,  1140, -2118, -2118, -2118,
    1338, -2118, -2118,   809,   809,   763,   856,    69,  1711, -2118,
    1125, -2118, -2118,   485, -2118,  1206,   -41, -2118, -2118, 50595,
   -2118, -2118, -2118,  1726, -2118,  1020,  1282,   222,  1471,  1728,
     809,  1601, -2118,  2640,  1956, -2118,  1717,   103,  1212,   -12,
   -2118,    16, -2118,  1448,   782,  1732,   431, -2118, -2118, -2118,
   -2118, -2118, -2118,  1538,   631, -2118,  1363, -2118,    41,  1480,
     631, -2118,  1167, -2118,  1092, -2118, -2118,  1727,  1727, -2118,
    1727, -2118, -2118, -2118, -2118, -2118, -2118,    14,    14,    14,
     693, -2118, -2118,  1531, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118,  1770, -2118, -2118,  1351, 50595, 50595, -2118, -2118,
    1371, -2118, 50595, -2118, -2118,  1071, 21954, 32410, 32410, 32410,
   32410, 32785, -2118, -2118,  1073, -2118,  1074, -2118, -2118, -2118,
   -2118, -2118, -2118,  1075,  1076, -2118, -2118, -2118,  1078, -2118,
   -2118, -2118,  1079, -2118, -2118, -2118,  1080, -2118,  1083, -2118,
   -2118, -2118,  1510, -2118, -2118, -2118, -2118, -2118, -2118,  1085,
    1086,  1091,  1093,  1094, -2118,  1095, -2118, -2118, -2118, -2118,
   -2118, -2118,  1097, -2118,  1098,  1101,  1102,  1103,  1106, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,  1107,
   -2118, -2118,  1108, -2118,  1110, -2118, -2118, -2118,  1111, -2118,
   32410, -2118, -2118, -2118,  1112, -2118, -2118, -2118, -2118, -2118,
   -2118,  1113,  1116, -2118, -2118, -2118, -2118,  1121, -2118,  1126,
   -2118,  1128, -2118, -2118, -2118,  1129, -2118, -2118, -2118, -2118,
   -2118, -2118,  1130, -2118,  1136, -2118,  1131, -2118,  1134,  1135,
    1144,  1145,  1146,  1147,  1148,   954, 10864, -2118, -2118,  1650,
   37430,  1371, -2118, -2118, -2118, -2118,  1643, 18831, 50595, 38088,
   -2118, 47434, -2118,  1234, -2118, -2118,   339, 18831, -2118, -2118,
   41525, 50595, -2118,   363,  1637, -2118,  1643,  1376, -2118,  -143,
    1168,  1149,  1363,  1623, -2118, -2118, -2118,  1371, -2118, 50595,
    1747, -2118,  1643, 50595, 50595, 38088, 38088, -2118, -2118, -2118,
    1319, -2118, -2118, 49025, -2118,  1767, -2118,  1088,  1088,  1167,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118,   -46, -2118,  -247, -2118,   105,  -201,  1634,
   -2118,   199, -2118,  1167,  1249, 38750, 38750,   127,  1257,  1262,
    1643, 38088, -2118, -2118, -2118, -2118,   740, -2118,  1510,  1356,
   -2118,  1362,  1457, -2118, -2118,    37, -2118,    27, 50595, -2118,
    1648, -2118, 18831, 50595, -2118,  1510, -2118, -2118, 44101, -2118,
      20, -2118, -2118,   843, 50595, -2118, -2118,  1520, -2118, 29090,
   -2118,  1798, -2118,  1302, -2118,  1304,  1305, -2118, 50595,  -142,
   -2118, -2118,  1136,  1628, 35158,  1629, -2118, -2118,  1647, -2118,
      90, -2118,   208, -2118,    71,   208,    80,  1568, -2118,  1657,
   18831, 50595, -2118, -2118,  1538, -2118, 37759, 38088,  1643,  1623,
   -2118,   719, -2118,  1657,  1538,  1496, -2118, -2118,    12, -2118,
      15, -2118, -2118, 33724,  1242, -2118,  1845, 41525, -2118, 39404,
   50595, -2118, -2118, -2118,  1164, -2118, -2118, 18831, 10181, -2118,
   -2118, -2118, -2118,  1166, -2118,  1273,  1281, -2118, 48699, -2118,
   -2118, -2118,  1198, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   30216, 29090, -2118, -2118,   479,   177, -2118, 25706, 25706, 26457,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118,   118,   831, -2118,   129,  1730, 13600, -2118,
    1733, -2118, -2118, -2118,  3988, 28714,  1211,  1699, -2118, 18175,
    1701, -2118, 29090,  1551, -2118,  1339, -2118, -2118,  1354, -2118,
    8126,  1497, -2118, -2118, -2118,  6750, -2118,  1539, 38088,  1539,
   -2118, 47434, -2118,   729,   443,   809, -2118, -2118, -2118, 49331,
    1318, -2118,   378, -2118,  1178,  1837, 50595, -2118, -2118, -2118,
    1463,  1456,  1456, -2118, -2118, -2118,   809,   809, 50595, 51228,
   -2118,  1510,  1510,  1869,   809,  1871, -2118, -2118,  1876, -2118,
   -2118, -2118,  1879,  1880, -2118, -2118, -2118, -2118, -2118,   447,
   -2118, -2118, -2118,   905, -2118,  1236,   829,  1009, -2118, -2118,
   -2118,  1862, -2118,  1863,  1872, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118,   855, -2118,   290, -2118,   -62, -2118,  1878,  1403,
   -2118,  1884,    91, -2118,  1167, -2118, -2118, 44101, -2118,  3377,
   -2118,  1275,  1275,  1275, -2118, -2118,   972, -2118,   693, -2118,
   -2118,  1380, -2118, -2118,   809,  1253,  1254,  1255, -2118, -2118,
     972, -2118, 50595, -2118, -2118,   809,  1087,  1639, -2118, 50595,
    1244,  1245, -2118, -2118,  1903, -2118,  1283, -2118, -2118,   651,
      14,    14,    14,    14, -2118, -2118,  1427, -2118, -2118, 31285,
   -2118, -2118, -2118, -2118,  1246,   695,   695,   963,   963, -2118,
   39404, 31660, 39404, 32410, 32410, 39404, 32410, 32410, -2118, 39404,
    1841,  1850,   817,  1844, 39404,  1225, 39732, 39404, 39404, 39404,
   39404,   315, 39404, 44101, 31660,  1248,  1315, 39404, 39404,  1214,
   39404,  4653, 44101, 32410, -2118, 44101, 32410, 32410, 32410, 32410,
   39404, 39404, 31660,  1670,   823,   392, -2118, 50595, -2118, 18831,
   14261, 50595,    95, 50595,  1618, -2118,  1500, 47434, 18831, 14316,
   -2118,  1530,  1750, 39076, -2118, -2118, -2118,   152, -2118, -2118,
   -2118, -2118,   442,   568, -2118,   809, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,  1627,
   50595,  1631, -2118, -2118, -2118, -2118, -2118, -2118, 50595,  1805,
    1386,   748,  1310,  1686,  1998, 44101,   618, -2118,   314, 50595,
   10790, 11474, 38750, 38750, 38750, 50595,  1633,  1635, -2118,  1510,
   -2118, -2118, -2118, 50595,  1603, 18831, -2118, -2118, -2118, -2118,
   -2118, 14504, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118,  1931, -2118, -2118, -2118, 18503, 18831,
   44101,  1547, 50595, -2118, -2118, -2118, 38088, 49657, -2118,  1275,
   -2118, -2118, -2118, -2118, 38088, -2118,   930, -2118, -2118,    80,
   -2118, -2118,  1363,    80, -2118,  1468,  1636, 18831, 14589,    42,
   42803, 50595, 50595,  1651, 50595,  1793, 50595, 18831, -2118, -2118,
   -2118, 34202, -2118, -2118,  1020,  1020, -2118, -2118,  1972, 50595,
   -2118, 40038,  6686, -2118, -2118, 15165, 32410, -2118, -2118, -2118,
   -2118,   507, -2118,  1307, -2118,   719, 30216, -2118, -2118, 26457,
     559, -2118, -2118,  1071, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, 25330, -2118,
   -2118, -2118,  3323, -2118,  1846, 15250, -2118, -2118, 38088, -2118,
    8810, -2118,  1810,  1539,  1660, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, 50595, -2118, -2118, 50595, -2118, -2118, -2118,
       9, -2118, -2118, -2118, -2118, -2118,  1483, -2118, -2118, -2118,
   -2118,  1967,  1969, 50595,  1510,  1510, -2118,  1970, -2118,  1430,
    1571,  1575, -2118, -2118, -2118, -2118,  1163,  1555, -2118, -2118,
   -2118, -2118,   -50,   -51,  1685,  1963, -2118,   -37, -2118,  1282,
   -2118,  1983, -2118, 50595, 50595, 45365, -2118,   973,  1793,  1793,
    1793, 50595, -2118, -2118, 50595, -2118,  1167, -2118, -2118, -2118,
   -2118, -2118, -2118,   723,   723, -2118, -2118, -2118, -2118, -2118,
   18111, -2118, -2118, 20454, -2118, 39404,  1311,  1313,   893, 22329,
   22704,  1640,  1314, 32410,  1316, 32410, 32410,  1317, 39404, 39404,
    1320,  1321, 39404, 18439, 18767, 19095, -2118, -2118, -2118, -2118,
   -2118,  1325, 17783,  1327, 20829, -2118, 39404, 39404, 39404,  1811,
   39404, 39404, 39404, 17783,  1328,  -108, 32410, 23079,  1332,  1335,
   32410,  1336, 32410,  1340, 39404, 21204,  1323,  1167,  1991, -2118,
     -39,  1729, -2118,  1399, -2118, 50595, 15438, 50595,  1492, -2118,
   15493, 50595,  1712, 50595, -2118, 30910, 41823, 30535,  1622,  1560,
   -2118,  1548,   818, 32410, 32410, 18831, 50595, 50595, -2118, -2118,
     226,  1765,  1781,  1310, -2118, -2118, -2118,  1502, -2118,  1820,
   -2118, -2118, -2118, -2118,   618, -2118, 44101,    79,  2020,  1485,
   -2118, 12158, 12842, 13526, 38394, -2118, -2118,   809, -2118, 16099,
   49963, -2118, 18831,  1909, 16154, -2118, 16815, -2118, -2118, -2118,
   -2118, -2118, -2118, 46170, -2118, -2118, -2118, -2118,    85, 50595,
   -2118,   809, -2118,  1625, 16342,  1999, -2118, -2118, -2118, -2118,
   -2118, 50595, 50595,  -171,  1370, -2118, 43774,   584, -2118, 44407,
   -2118, 16427, -2118, -2118, -2118, 50595, -2118,  1353, -2118, -2118,
     593, 26832, 27207, -2118, 15911, -2118, -2118, -2118, 26082, -2118,
     -17,  1859, -2118, -2118,   738, -2118, 30216, -2118, -2118,  1835,
    1349,  1885, -2118, 38088,  1483, -2118, -2118,  1677,   809, -2118,
   -2118, -2118, -2118, -2118,  2045,  1088,  1088, -2118,  1544, -2118,
   -2118, -2118, 40892,  1860,  1282,  2031, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118,  2039,  2035,  1192, -2118,
   50595, -2118, -2118, 50595, -2118,  1382, -2118, -2118, 39404, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118,   699, -2118, -2118,
   23454, -2118, 23829, -2118,  1906, -2118,  1384, -2118, 32410, 24204,
   -2118,  1385,  1387, -2118, -2118, 19423, -2118,  1392, -2118,  1394,
   -2118,  1395, -2118,  2059, -2118,  1811, -2118, -2118,  1396,  1398,
   19751, -2118,  -114, -2118,   558,  1400,  1402,  1404,  1811, -2118,
   -2118, -2118,  1405, 32410, -2118, 24579, -2118, -2118,  1406, -2118,
    1407, -2118,  1408, -2118, -2118, 46476,  1773,  1569, -2118, -2118,
   -2118, -2118,  1645, 50595, -2118, -2118,  1734, -2118, -2118, -2118,
   -2118, -2118, -2118, 50595,  1676, -2118,   693, -2118,  1615, -2118,
   -2118, -2118, -2118, -2118, 17003, 50595, 50595, -2118, -2118, -2118,
    1886, -2118,  1793, 44101, -2118,  1887,  9422, -2118,   618,  2020,
   -2118, -2118,  1788,  1371,   -84,  1510, 50595, -2118, 50595, -2118,
    1429,  2924, -2118, 17193, -2118, 50595, 50289, -2118,  1662,  1510,
     -77, 50595, 50595, -2118, -2118, 50595, 50595,  1742,  1793, -2118,
    1636,  1636,  1636, -2118,  2065, -2118, -2118, -2118, 27582, -2118,
   27582, -2118, -2118,   719,   598, -2118, 30216, 25330, 27957, 28332,
   -2118, 18831, 38088,  1556,   435, -2118, -2118,  2098,  1808, -2118,
     126, -2118,  1944,  1835,    11,  1722, 50595, -2118,   809,   809,
    2089, -2118, 40892, -2118,  1282, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118,  1432, -2118,  1443,  1790, -2118,  1444, -2118,  1446,
    1940,  1811, -2118, 24954, -2118,  1452, -2118, -2118, -2118,  1453,
   -2118, -2118, -2118, -2118,  1454, -2118, -2118, -2118, 20079, -2118,
   -2118, -2118, -2118, 39404, -2118, -2118, -2118,  1458, -2118,  1459,
   -2118,  1460, -2118, -2118, -2118,  1678, 50595,  1510, -2118, -2118,
   -2118,  1167, -2118, -2118, 50595, -2118, 43130, 44101,   845, 44101,
   -2118, -2118, -2118,   130, -2118,  2107,   108, -2118, 32035, 49963,
   -2118,  1958, -2118, -2118, -2118,   809,  1510,  1510,  1693, -2118,
   -2118, -2118, 32410, -2118, 50595, 50595, 50595, 50595,  1461,  1462,
   -2118, -2118, -2118, 27582, -2118, -2118, 30216, 27582, -2118, 17088,
   -2118, -2118, -2118, -2118, -2118, -2118,  1510, -2118, 18831, -2118,
    1510, -2118,  1890, -2118,  1556, -2118,  1867, -2118,   906, 50595,
   -2118,  2121,  2130, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, 39404,  1464, -2118,  1465, -2118, -2118, -2118, -2118,  1466,
   39404, -2118, -2118, -2118, -2118,  1510,   435, -2118, -2118, -2118,
   -2118,   845, -2118, -2118, -2118,   845, -2118,  1812,   845, 44101,
     845, 44101, 44101,   130, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118,  2140,  1510,   809, -2118, -2118,  1907, -2118,  1644, -2118,
   -2118,  1469, -2118,  1473,  5392,  1510,  2153, -2118,  1861, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118,  1510, -2118, -2118, -2118, -2118, 44101, -2118,   845,
    7370, -2118, 50595,  8054,  8738, -2118, -2118, -2118,  1505,  2140,
    1636,  1636, -2118, -2118, -2118, 18831,  2153, -2118,  1512, -2118,
   -2118, -2118, -2118,  2140, -2118, 50595, 50595,  6066, 18831,  2153,
   -2118, -2118, -2118, -2118,  7442, 18831,  9494
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
      11,     0,     0,     2,     4,    26,     0,    12,    13,     0,
       0,     0,     0,     1,     0,     0,    11,     0,    28,    77,
       0,    20,     9,    14,     0,    16,    18,     0,   879,    69,
     906,   882,   883,   902,   903,   881,   893,   919,   928,   929,
     936,   940,   953,   955,   964,   965,   884,   885,   886,   887,
     888,   889,   890,   891,   892,   894,   895,   896,   897,   898,
     901,   899,   900,   904,   905,   907,   908,   909,   910,   911,
     914,   912,   913,   915,   916,   917,   918,   920,   921,   922,
     923,   924,   925,   926,   927,   930,   931,   932,   933,   934,
     935,   937,   938,   939,   941,   942,   943,   944,   945,   946,
     947,   948,   949,   950,   951,   952,   954,   956,   957,   958,
     959,   960,   961,   963,   962,   733,   731,    68,   880,   732,
     730,     5,   729,   728,     0,     0,  1746,  1746,    47,    47,
       0,     0,    29,    31,    32,    33,    34,    35,    36,    37,
       0,   316,     0,    21,     0,     0,     0,    57,    60,    61,
      62,    55,    58,  1755,  1747,     0,     0,    48,  1746,  1746,
    1746,    27,    30,    79,   317,     6,     0,     8,    10,    22,
      15,    17,    56,  1786,    59,  1756,  1746,    39,    40,    41,
      42,    38,    44,     0,     0,     0,     0,     0,   541,    22,
       0,    70,  1787,     0,     0,    45,    46,    51,    52,    49,
      50,   663,   664,   665,   666,    53,     0,     0,     0,  1833,
    1798,  1834,  1835,  1837,     0,  1836,     0,    80,    81,    88,
    1794,  1797,  1795,  1796,  1793,     0,     0,     0,     0,     0,
     319,   320,     0,     7,  1746,    23,    20,     0,    67,    65,
       0,    64,    66,    54,   658,   659,   660,   661,    43,   662,
      83,  1799,  1800,  1832,  1829,  1830,  1827,  1828,  1824,  1825,
      86,    82,   322,   329,   327,   325,     0,   321,     0,  1763,
     542,     0,     0,     0,    19,    74,    75,    76,  1765,    72,
      63,  1763,     0,     0,    84,    89,    85,   104,  1831,  1826,
       0,    20,     0,     0,    87,   186,     0,     0,     0,     0,
     331,   548,   874,   875,  1722,  1764,  1763,   549,     0,     0,
     558,   558,    24,     0,  1766,    73,    71,     0,    91,    93,
      90,   105,   192,   194,   190,   188,   187,     0,     0,   324,
     332,  1746,   433,   431,     0,     0,     0,   330,     0,   402,
    1788,     0,   432,     0,   404,   328,   326,   877,   878,     0,
       0,   550,     0,  1763,     0,   551,   865,   866,   870,     0,
       0,     0,    25,   159,    92,     0,  1769,     0,    95,   219,
       0,     0,     0,     0,     0,     0,   196,   198,   199,   200,
     201,   202,   217,  1746,  1746,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,     0,     0,  1771,  1746,     0,
    1723,     0,   224,   225,   227,  1746,   233,   338,   339,   333,
    1727,  1746,     0,     0,  1746,  1727,  1755,   398,   399,     0,
     334,  1746,   340,   343,   344,   342,   352,   353,     0,   430,
     456,     0,     0,   403,  1740,     0,   521,     0,   514,     0,
     487,     0,     0,  1746,   525,  1786,  1789,     0,   540,   465,
    1788,   457,   466,   473,   501,   474,   463,   462,   464,   467,
     459,   460,   461,   522,   470,   468,   469,     0,   471,   472,
     475,     0,     0,   405,     0,   876,   547,   553,     0,  1134,
     556,  1132,  1135,  1136,  1133,  1137,   554,   555,   557,  1131,
    1546,   868,   869,   559,   575,   567,   568,  1090,   811,     0,
    1546,  1478,     0,     0,  1057,     0,   734,     0,  1546,  1546,
     821,   738,   741,  1487,     0,  1359,  1251,  1546,  1546,  1048,
       0,     0,     0,     0,     0,  1273,     0,  1546,     0,  1546,
       0,  1546,     0,  1546,     0,   711,     0,     0,     0,   740,
       0,     0,     0,   561,     0,   573,   576,   619,   621,   577,
     648,   648,   578,   583,   689,   689,   586,   698,   702,   590,
     587,   719,   719,   584,   591,   592,   594,   818,  1546,   589,
    1546,   598,   599,   981,   981,   562,   612,   600,   582,   602,
    1546,   614,  1148,  1148,   603,   604,  1175,   616,  1201,   585,
    1232,  1232,   607,  1234,   611,  1244,  1244,   597,   609,   608,
    1286,  1286,   610,  1313,  1314,   605,   601,  1343,  1343,   596,
     595,   580,  1441,  1441,   588,   581,   579,   593,   606,   613,
    1498,  1498,   615,  1520,  1520,     0,  1755,  1769,  1786,  1726,
    1736,  1746,  1755,  1746,   168,  1748,     0,  1791,   107,   159,
     112,   114,   115,   116,   117,   142,   118,   119,   120,     0,
     158,   121,   122,   123,   124,   125,   126,     0,     0,  1761,
     102,   103,  1770,   100,   100,    94,    96,     0,     0,  1746,
       0,   204,   204,     0,   211,   212,   204,   204,   204,   195,
     197,  1792,     0,     0,     0,  1778,  1778,   289,     0,  1746,
    1746,  1772,  1746,     0,  1746,  1724,     0,   189,   226,     0,
    1728,     0,     0,   363,   364,     0,     0,  1546,     0,     0,
    1746,     0,     0,   336,   341,   350,   349,  1746,   449,  1713,
    1717,     0,   520,   524,     0,   412,  1782,   425,  1782,   425,
       0,   425,   495,   481,   498,   499,   500,   483,   488,   482,
     479,   484,   489,   480,   519,     0,   531,   526,   527,     0,
    1790,     0,   515,  1714,     0,   458,   532,   533,   534,   518,
     517,   516,  1780,  1773,  1757,   509,  1757,   502,   508,  1757,
     451,   552,  1046,  1047,  1035,     0,  1547,     0,     0,  1546,
    1546,  1546,  1033,   796,   799,   802,   806,  1004,   808,  1546,
    1006,  1005,     0,  1546,   867,     0,     0,  1022,   633,  1546,
       0,     0,     0,   646,  1001,  1546,   999,  1002,  1040,  1003,
       0,  1452,  1451,  1439,  1443,  1476,  1475,     0,   687,   654,
     691,  1546,  1355,  1229,  1769,   454,  1169,  1171,  1172,  1170,
    1546,     0,     0,  1168,  1157,  1162,  1546,  1153,  1155,  1158,
    1161,  1160,   717,   722,   724,     0,     0,  1778,     0,   736,
     737,     0,  1493,  1492,  1485,  1490,   976,   974,     0,   972,
     975,  1360,  1546,     0,     0,     0,     0,     0,   987,   979,
       0,     0,  1183,  1176,  1338,  1341,  1345,  1347,  1212,     0,
    1769,  1211,  1238,     0,  1291,     0,  1288,   674,     0,     0,
       0,  1759,     0,   678,   672,  1260,     0,  1253,     0,  1761,
    1327,  1506,  1505,  1507,  1496,  1546,  1501,  1504,  1508,  1028,
    1027,   741,  1546,  1546,  1146,  1242,  1246,  1527,  1525,  1522,
    1528,  1526,  1202,  1209,     0,   681,  1449,   712,   713,     0,
     753,   754,   756,     0,  1174,     0,  1489,   572,     0,     0,
     564,   565,   563,   570,   569,   574,   636,   620,   617,   619,
       0,     0,   649,   644,   645,   690,   685,   686,     0,   699,
     697,     0,   720,   715,   716,   819,   809,   759,  1714,  1546,
    1546,   765,   776,   758,  1784,   767,   768,   775,  1546,     0,
     789,   794,     0,     0,   864,   863,   825,   667,     0,   822,
     824,   827,   982,   977,   978,  1493,  1093,  1546,  1492,     0,
    1073,  1072,  1546,  1097,  1097,  1097,  1092,  1078,     0,  1074,
       0,  1089,  1083,     0,  1149,  1144,  1145,  1233,  1227,  1228,
    1245,  1240,  1241,  1287,  1283,  1284,  1344,  1339,  1340,  1442,
    1437,  1438,  1499,  1494,  1495,  1521,  1518,  1519,  1746,  1748,
       0,   110,     0,  1746,   160,   169,  1746,  1746,  1749,  1746,
     177,     0,   106,   113,   166,     0,   165,   163,     0,  1746,
    1762,     0,   101,  1070,  1070,  1746,     0,  1746,     0,   193,
       0,   206,   214,   210,   209,   213,   206,   215,   216,   191,
       0,   242,  1779,  1746,  1746,   287,     0,  1713,     0,   231,
       0,   237,   238,  1746,   241,   355,   357,   348,  1325,   345,
     372,   361,   360,   362,   370,  1752,  1723,   378,   388,     0,
    1746,   347,   365,     0,     0,  1718,     0,     0,   310,   309,
     311,  1713,   296,     0,     0,     0,     0,  1741,   523,  1783,
     416,   420,   421,  1721,   425,   417,  1748,   406,     0,   411,
     425,   409,  1761,   410,     0,   486,   485,   491,   491,   490,
       0,   528,   873,   537,   538,   511,  1020,     0,     0,     0,
     512,  1012,   513,   536,   529,  1781,   539,  1774,  1775,   503,
    1758,   504,     0,   505,   506,     0,     0,     0,  1166,  1167,
    1010,  1009,     0,   804,   805,     0,  1546,  1546,  1546,  1546,
    1546,  1546,  1032,  1034,     0,  1545,     0,  1549,  1676,  1677,
    1689,  1678,  1679,     0,     0,  1692,  1654,  1693,     0,  1655,
    1690,  1701,     0,  1680,  1642,  1656,     0,  1657,     0,  1643,
    1681,  1682,  1645,  1644,  1647,  1646,  1648,  1649,  1658,     0,
       0,     0,     0,     0,  1659,     0,  1694,  1660,  1661,  1662,
    1663,  1664,     0,  1665,     0,     0,     0,     0,     0,  1683,
    1684,  1637,  1666,  1702,  1703,  1704,  1705,  1706,  1675,     0,
    1700,  1695,     0,  1696,     0,  1707,  1708,  1650,     0,  1583,
    1546,  1709,  1691,  1697,     0,  1651,  1667,  1685,  1686,  1687,
    1710,     0,     0,  1711,  1688,  1668,  1669,     0,  1698,     0,
    1699,     0,  1670,  1671,  1638,     0,  1672,  1652,  1673,  1674,
    1712,  1653,     0,  1550,  1543,  1608,     0,  1551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1025,  1021,     0,
    1546,  1044,  1043,  1042,  1041,   990,   647,     0,     0,  1546,
    1000,  1479,  1480,     0,  1473,  1474,  1440,     0,  1447,  1448,
    1721,     0,  1477,  1062,  1058,  1059,   688,   655,   997,     0,
     654,     0,  1748,  1230,  1223,  1231,  1156,  1164,  1163,     0,
       0,  1154,   718,     0,     0,  1546,  1546,   749,   747,   748,
     745,   739,   744,  1029,   751,     0,   752,  1778,  1778,  1761,
    1491,  1785,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,
    1429,  1430,   973,  1410,  1413,  1414,  1420,  1418,  1786,     0,
    1357,     0,  1358,  1761,     0,     0,     0,     0,     0,     0,
     980,  1546,  1055,  1053,  1056,  1054,  1049,  1050,     0,  1187,
    1188,  1185,  1189,  1193,  1177,  1178,  1191,  1180,     0,  1352,
    1342,  1349,     0,     0,  1348,     0,  1214,  1237,  1546,  1239,
    1238,  1235,  1300,  1719,     0,  1290,  1296,  1285,  1293,  1546,
    1720,     0,   638,     0,   637,     0,     0,  1760,     0,     0,
     673,   676,   677,     0,     0,     0,  1254,  1280,  1274,  1275,
       0,  1278,  1327,  1319,     0,  1327,  1329,     0,  1517,  1497,
       0,     0,  1502,  1500,  1721,  1026,  1546,  1546,  1147,  1243,
    1249,     0,  1250,  1523,  1721,     0,  1197,  1203,  1204,  1195,
    1206,  1216,  1215,     0,   681,   682,   683,  1721,   714,  1546,
       0,   755,  1173,  1488,     0,   566,   618,     0,     0,   640,
     642,   643,   641,   630,   632,   622,   624,   626,     0,   627,
     639,   628,   700,   706,   707,   708,   709,   705,   703,   793,
    1546,  1546,   777,   795,     0,   794,   812,  1546,  1546,  1546,
     778,   794,   991,   996,   993,   994,   992,   995,   786,   670,
     669,   671,   668,     0,     0,   764,     0,     0,     0,   810,
     813,   790,   792,   791,     0,  1546,   861,   828,   831,     0,
     835,   836,  1546,     0,  1085,     0,  1082,  1081,     0,  1077,
       0,     0,  1076,  1075,  1096,     0,  1091,  1088,  1546,  1087,
    1126,     0,  1098,     0,     0,  1746,   141,   111,   138,     0,
     140,   175,     0,   161,     0,     0,     0,   178,   179,   176,
       0,   184,   184,   180,   164,   143,  1746,  1746,     0,    99,
    1071,     0,     0,     0,  1746,     0,   223,   205,     0,   203,
     208,   218,     0,     0,   288,   277,   285,   286,   273,     0,
     275,   274,   228,   276,   278,   280,   229,  1791,   235,   236,
     232,     0,   234,     0,     0,   358,   359,   354,  1326,   371,
    1753,  1754,   390,   392,   391,   374,  1723,   387,     0,   380,
     381,     0,   377,   376,  1761,   373,   346,  1546,   366,     0,
     351,  1759,  1759,  1759,   440,   448,   439,   442,   434,   441,
     313,   312,   314,   297,  1746,   298,   300,   302,   447,   444,
     446,   445,     0,   418,   407,  1746,  1782,     0,   408,     0,
       0,     0,   493,   478,   492,   477,   489,  1018,  1017,     0,
       0,     0,     0,     0,   535,   510,     0,   452,  1008,  1546,
    1011,  1007,   807,   872,     0,   798,   797,   800,   801,   803,
    1546,  1546,  1546,  1546,  1546,  1546,  1546,  1546,  1560,  1546,
       0,     0,     0,     0,  1546,     0,  1546,  1546,  1546,  1546,
    1546,     0,  1546,  1546,  1546,     0,     0,  1546,  1546,     0,
    1546,     0,  1546,  1546,  1544,  1546,  1546,  1546,  1546,  1546,
    1546,  1546,  1546,     0,  1742,    20,  1801,     0,  1045,     0,
       0,   652,   654,   650,     0,  1481,  1483,     0,     0,     0,
    1461,     0,  1469,  1444,  1453,  1455,  1459,     0,  1445,  1068,
    1069,  1061,  1063,     0,  1060,  1746,   656,   695,   693,   692,
     998,   735,  1225,  1224,  1165,  1159,   455,   723,   725,     0,
     721,     0,   746,  1031,  1030,   750,   743,   742,     0,     0,
       0,  1786,     0,     0,  1409,  1546,     0,  1365,  1761,     0,
       0,     0,     0,     0,     0,   983,     0,   984,  1051,  1052,
    1353,  1186,  1184,     0,  1199,     0,  1179,  1192,  1181,  1337,
    1350,     0,  1346,  1213,  1403,  1210,   369,  1404,   368,  1405,
    1236,  1303,  1298,  1301,     0,  1292,  1294,  1297,     0,     0,
    1546,     0,     0,  1261,  1272,   675,  1546,     0,  1263,  1759,
    1256,  1264,  1262,  1255,  1546,  1276,     0,  1279,  1320,  1329,
    1323,  1324,  1748,  1329,  1316,     0,  1729,     0,     0,  1513,
       0,     0,  1150,     0,     0,  1713,     0,     0,  1205,  1196,
    1207,     0,  1221,  1222,  1752,  1752,  1208,  1217,     0,     0,
     680,  1450,  1546,   757,   571,     0,  1546,   623,   625,   629,
     701,     0,   773,   770,   769,   787,  1546,   772,   771,  1546,
       0,   780,   787,   794,   761,   763,  1139,  1140,  1141,  1142,
    1143,  1138,   766,   760,   762,   817,   814,   840,  1546,   823,
     862,   820,     0,   832,     0,     0,   837,  1094,  1546,  1080,
       0,  1095,     0,  1086,     0,  1127,  1084,  1124,  1123,   129,
     128,   130,   127,     0,   109,   108,     0,   151,   152,   153,
     149,   170,   171,   172,   167,   173,   132,   183,   185,   181,
     182,     0,     0,   146,    98,    97,   222,     0,   221,     0,
     291,   290,   282,   283,   284,   279,     0,   294,   239,   240,
     356,   393,  1719,     0,     0,     0,   386,  1723,   379,  1723,
     375,     0,   367,     0,     0,     0,   315,     0,  1713,  1713,
    1713,   426,   427,   429,     0,   415,  1761,   414,   497,   496,
     494,   476,  1019,  1014,  1013,  1015,  1016,   507,  1033,   871,
    1546,  1039,  1038,  1546,  1036,  1546,     0,     0,     0,  1546,
    1546,  1750,     0,  1546,     0,  1546,  1546,     0,  1546,  1546,
       0,     0,  1546,  1546,  1546,  1546,  1609,  1610,  1611,  1612,
    1613,     0,  1546,     0,  1546,  1584,  1546,  1546,  1546,  1715,
    1546,  1546,  1546,  1546,     0,  1639,  1546,  1546,     0,     0,
    1546,     0,  1546,     0,  1546,  1546,     0,  1761,     0,  1743,
    1816,  1806,  1807,     0,  1023,   653,     0,     0,     0,  1482,
       0,     0,     0,     0,  1454,  1546,     0,     0,     0,     0,
    1067,     0,     0,  1546,  1546,     0,     0,     0,  1486,  1411,
    1415,     0,  1731,  1431,  1432,  1419,  1412,     0,  1400,     0,
    1399,  1401,  1402,  1363,  1386,  1387,  1546,  1361,  1380,     0,
     971,     0,     0,     0,     0,  1354,  1190,  1746,  1182,     0,
       0,  1302,     0,     0,     0,  1295,     0,  1269,  1270,  1271,
    1268,  1266,  1265,     0,  1267,  1282,  1281,  1277,     0,  1322,
    1315,  1746,  1730,  1767,     0,     0,  1510,  1509,  1511,  1512,
    1503,  1152,     0,  1247,  1529,  1530,  1546,  1539,  1524,  1533,
    1537,     0,  1218,  1219,  1220,     0,   684,     0,   774,   788,
       0,  1546,  1546,   779,     0,   851,   850,   843,  1546,   846,
     852,   839,   841,   845,   847,   844,  1546,   829,   834,  1129,
       0,  1114,  1102,  1546,   132,   139,   148,     0,  1746,   174,
     144,   145,   147,   220,     0,  1778,  1778,   281,     0,   230,
     397,   396,  1546,  1719,  1723,     0,   385,   384,   389,   435,
     436,   437,   438,   305,   307,   306,     0,     0,     0,   428,
     419,   422,   424,     0,  1558,     0,  1548,  1037,  1546,  1555,
    1556,  1619,  1620,  1614,  1615,  1621,  1622,     0,  1616,  1597,
    1546,  1600,  1546,  1751,  1776,  1568,     0,  1565,  1546,  1546,
    1576,     0,     0,  1577,  1578,  1546,  1631,     0,  1633,     0,
    1635,     0,  1580,     0,  1625,  1715,  1582,  1553,     0,     0,
    1546,  1716,  1715,  1626,  1737,     0,     0,     0,  1715,  1590,
    1640,  1641,     0,  1546,  1603,  1546,  1579,  1593,     0,  1594,
       0,  1595,     0,  1552,   560,     0,  1810,  1818,  1817,  1808,
    1821,  1820,  1822,   651,  1484,  1460,     0,  1446,  1463,  1464,
    1462,  1457,  1456,     0,     0,  1465,  1466,  1458,     0,  1064,
    1066,   657,   696,   694,     0,   727,   726,  1416,  1417,  1732,
       0,  1433,  1713,  1546,  1388,     0,  1546,  1391,     0,  1380,
    1384,  1366,     0,  1382,  1383,     0,   985,   986,     0,  1310,
       0,     0,  1307,     0,  1306,     0,     0,  1318,     0,     0,
       0,  1321,     0,  1768,  1328,     0,  1151,     0,  1713,  1532,
    1729,  1729,  1729,  1538,     0,   679,   631,   781,  1546,   782,
    1546,   784,   815,   852,     0,   849,  1546,  1546,  1546,  1546,
     853,     0,  1546,     0,     0,  1112,  1104,  1108,  1110,  1109,
       0,  1103,  1117,  1129,   136,   154,     0,   207,  1746,  1746,
       0,   395,  1546,   383,  1723,   299,   301,   303,   304,   423,
     413,  1559,     0,  1618,     0,     0,  1598,     0,  1601,     0,
       0,  1715,  1562,  1546,  1567,     0,  1572,  1573,  1629,     0,
    1632,  1634,  1636,  1624,     0,  1574,  1575,  1587,  1546,  1588,
    1627,  1738,  1739,  1546,  1569,  1570,  1571,     0,  1591,     0,
    1604,     0,  1596,  1606,  1607,     0,  1802,     0,  1809,  1819,
    1823,  1761,  1470,  1468,     0,  1065,  1546,  1546,  1394,  1546,
    1392,  1362,  1368,     0,  1381,     0,     0,  1200,  1546,     0,
    1304,  1299,  1257,  1259,  1258,  1746,  1331,     0,     0,  1317,
    1330,  1514,  1546,  1531,     0,     0,     0,     0,     0,     0,
     854,   848,   842,  1546,   859,   855,  1546,  1546,   857,     0,
    1130,  1125,  1815,  1812,  1814,  1813,  1106,  1107,     0,  1111,
       0,  1115,     0,  1100,     0,   131,     0,   155,     0,   133,
     134,     0,     0,   295,   394,   382,  1554,  1557,  1617,  1599,
    1602,  1546,     0,  1563,     0,  1566,  1630,  1581,  1586,     0,
    1546,  1589,  1592,  1605,  1803,  1811,     0,  1467,  1436,  1435,
    1434,  1394,  1407,  1406,  1389,  1395,  1396,  1744,  1394,  1546,
    1394,  1546,  1546,  1369,  1370,  1385,  1252,  1312,  1311,  1309,
    1308,     0,  1333,  1746,  1248,  1541,  1540,  1535,  1534,   783,
     785,     0,   860,     0,     0,  1113,  1733,  1118,  1120,  1128,
     137,   156,   157,   150,   135,   292,   293,  1777,  1561,  1564,
    1585,  1628,  1804,  1805,  1364,  1397,  1745,  1546,  1393,  1394,
    1546,  1377,  1373,  1546,  1546,  1371,  1356,  1332,  1335,     0,
    1729,  1729,   856,   858,  1734,     0,  1733,  1121,     0,  1398,
    1379,  1378,  1372,     0,  1334,     0,     0,     0,     0,  1733,
    1101,  1336,  1542,  1536,     0,     0,     0
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2118, -2118, -2118,  1137, -2118, -2118, -2118, -2118,  2179,  2048,
    -225,  2003, -2118, -2118, -2118,  2063, -2118, -2118, -2118, -2118,
   -2118,  2066, -2118, -2118, -2118, -2118, -2118,  2046, -2118,    28,
    1973, -2118,  1925, -2118, -2118, -2118,  1987, -2118,  1922, -2118,
    1842,  1526, -2118,  1893,    -9, -2118, -2118, -2118,  1553, -2118,
   -2118, -2118,   -91, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118,   573, -2118,  1923,
   -2118,  1843, -2118,   673,  1124, -2118, -2118, -2118,  1522, -2118,
   -2118, -2118, -2118, -2118, -2118,  1797, -2118, -2118, -2118, -2118,
    -927, -2118, -2118,   548, -2118, -1538, -2118,  1117, -2118,  1118,
   -1061, -2118, -2118, -2118, -2118,  1993, -2118, -2118, -2118, -2118,
   -2118,  1895, -2118, -2118, -2118, -2118,  1785, -2118,  1507, -2118,
   -2118,  1795, -2118,  1122, -1366, -2118,  1114, -2118, -2118, -2118,
     528, -2118, -2118, -2118,   541, -2118, -2118,  1127,  -612,  -316,
   -2118, -2118,  1082, -2118,  1100,  1493,    64, -2118, -2118,  -101,
    -554, -2118,   157, -2118, -2118,  1119, -2118, -2118,   -72, -2118,
   -2118,  1782, -2118, -2118, -2118,  1499, -2118,   497,  1115,  1138,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118,  1950,    73,  1951, -2118,
    -235,  -520,  -516,  -907,  -486, -2118,  1294, -2118, -2118, -2118,
    1301,   721, -2118, -2118, -2118, -2118,  1700, -2118,   908, -2118,
      72,  2087, -2118, -2118, -2118, -2118,  -539, -2118,   751, -2118,
   -2118, -2118, -2118,  1705, -2118, -2118, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,
    1692, -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,  1345,
   -2118,   896, -2118, -2118,  1334,  1290, -2118,  -580,  -934, -2118,
   -2118,   292, -2118, -1508,  -603, -2118,  1165, -2118,   227,  -544,
    -696, -2118, -2118, -2118, -2118, -2118, -2118,     1, -2118, -2118,
   -2118, -2118,   698, -2118, -2118, -2118, -2118,   691, -2118, -2118,
     694, -2118, -2118,  -212, -2118,    13, -1675, -2118, -1112,  -307,
    1751,   513,  -476,  1532,  -152,  -528,  -880,   -11, -2118, -2118,
   -1232,  -855, -2118, -2118, -2118,  1710, -2118,   274,  -373,  -953,
   -1113,  -343,  -304,  -712,  -754, -2118,  -509, -2118, -2118, -2118,
      45,  -871, -2118,  -732, -1801,  -863,  -368, -2118, -2118, -2118,
     869, -2118, -2118, -2118, -2118,   942, -2118, -2118, -1047, -2118,
   -2118, -2118, -2118, -2118,  1287, -2118,  1291, -1021, -2118,   328,
    1707, -2118, -2118, -2118, -2118,    10, -2118, -2118, -2118,  -207,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118, -2118,  1284,   704,
   -1512,  -211,  -269,  -836, -2118, -2118, -2118, -2118,  1719, -2118,
     786,   457,  1474,   537,  -793,  -524, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118,   880, -2118, -2118,   808, -2118, -2118, -2118,
   -2118, -2118,  1779, -2118, -2118, -2118,   371,  -582,  -574, -2118,
   -2118, -2118, -2118, -2118,  1723, -2118, -2118, -2118,   873, -2118,
   -2118, -2118,  1720, -2118, -2118, -2118, -2118, -2118,  -826, -2118,
   -2118, -2118,   850, -2118,   847, -2118, -2118, -2118,  1718, -2118,
   -2118, -2118, -2118,   874, -2118, -2118, -2118, -2118,  -133, -1857,
   -2118,  -129, -2118,  -266, -2118, -2118, -2118, -2118,  -811, -1326,
   -2118, -1053,  -280, -1578, -2118,  -262,  -414, -2118, -2118, -2118,
   -2118,  1721, -2118, -2118, -2118,   897, -2118, -1529,  -511,  -427,
   -2118, -2118, -2118, -2118, -2118, -2118,  -107, -2118,  -353, -1253,
   -1449, -2118, -2118, -2118,  -105, -2118,   137, -2118,  -102, -1481,
   -2118,  -339, -2118, -2118, -2118, -2118,   483,   158, -2118, -1699,
   -2118, -2118,   156, -2118, -2118, -2118, -2118,  1735, -2118,   527,
   -2118,  -299,   834, -1542,   180, -2118, -2118,   182, -2118,  1011,
   -2118, -2118, -2118, -2118, -2118,  1014, -2118, -2118, -2118,   -45,
    -551, -2118, -2118, -2118,  1731, -2118, -2118,  1450,   110, -2118,
   -2118,  1441,  -369, -2118,  1725, -2118, -2118, -2118, -2118, -2118,
   -2118,  -111, -2118, -2118,   109,   744, -2118, -2118, -2118, -2118,
   -2118, -2118,    22,   228, -2118,   -10, -2118, -2118, -2118, -2118,
   -2118, -2118, -2118, -2118, -2118, -2118, -2118,  -450, -2117,  1646,
    -887,  -229, -1097,  -200,  1948, -1712, -2118, -1728, -2118, -2118,
   -2118, -2118, -2118,  -126, -1024, -2118,  -957,  -234,   448,  -743,
    -667,   -14, -2118, -2118,    39, -2118, -2118, -2118,  -692, -2118,
    -722,  -875,  -444, -2118,  -344,   889, -2118, -2118, -2118, -2118,
   -2118,   213, -2118,  -301, -2118, -2118, -2118, -2118, -2118,  2129,
   -2118, -2118,  2134, -2118
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,     2,     3,   560,   188,     5,     6,     7,     8,    22,
     144,   191,   168,    19,   131,   132,   133,   181,   134,   135,
     136,   158,   137,   138,   139,   173,   151,   152,   243,   116,
     236,   278,   279,   141,   186,   217,   218,   284,   285,   367,
     368,  1083,   683,   286,   287,  1628,  1629,   659,   660,   661,
    2032,   662,  2309,  2659,  2655,   663,   664,   665,   666,   667,
    2306,  2040,  2658,  2733,   668,   669,   670,   671,  1066,  2044,
     672,   673,   674,   675,  1639,   676,  1643,  2049,   294,   295,
     375,   376,   377,  1091,  1659,   378,   379,   694,   695,   380,
     381,   702,   690,   421,   422,   423,  1680,  1113,  1682,   424,
     425,  1672,  1673,  1674,  2062,  1675,   426,   707,  2319,  1141,
    1142,  1143,   165,   187,   230,   231,   296,   299,   298,   297,
     329,   330,   732,  1134,   331,   441,   442,   443,  1116,  1687,
     444,   725,  1131,  1132,  2749,  1123,  1124,   445,  1128,  1702,
    1703,  1705,   446,  1692,  1693,  2322,   447,   337,   338,   339,
     469,   747,   748,   749,   750,  1154,  1155,  1156,  2340,  2341,
    1157,  2091,  2092,   340,   341,  1714,  1715,   342,   853,   343,
     470,   471,   472,   759,   760,   761,   762,  1170,  1743,  1744,
    1165,   763,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   778,  1184,   488,
     489,   490,   233,   310,   271,   306,   307,   506,   360,   815,
     561,   562,   563,   564,   565,   566,   968,   567,   568,   969,
     970,  1473,  1551,   569,   570,   571,   973,   823,  1368,  1846,
     248,   249,  1584,  1585,   912,   913,   991,   572,  1526,  1970,
     573,   574,   575,   976,   838,  1369,  1849,  2194,  2193,   576,
     980,   577,   578,  1558,   579,   948,  1529,   580,   581,   582,
     983,   862,   863,   864,    16,    17,   583,   584,   866,   869,
    1391,   870,   585,   950,   951,   992,   993,  1006,   995,   996,
     997,  1990,   998,  1991,   999,  1000,  1571,   803,   804,   805,
     806,   586,   587,   588,  1002,  1589,  2284,  1590,   986,   589,
     590,  1008,  1009,  1010,  1596,  2511,  1597,  1598,  1599,  1600,
    1601,  2008,  2291,  2292,  2293,  2294,  2635,  2011,  1011,   807,
     356,   357,   511,  1173,   358,   302,   349,   303,   118,   591,
     878,   879,   592,   593,   594,  1013,   889,  1346,  1347,  1986,
     840,   825,   826,   808,  1718,  1181,   595,  1339,   817,   596,
    1392,   512,   809,  2113,  2114,   827,   810,   597,   891,  1436,
    1437,  1438,   598,   837,  1364,  1365,  1841,  1842,  1651,   599,
    1020,  1021,  1022,  1023,  1024,   600,  1025,  1026,  1602,  1027,
    1610,  1029,  2022,  2728,  2301,  2302,  2648,  2516,  2517,  2518,
    2519,  2522,  2726,  2653,  2766,  2768,  2779,  1030,  1031,  1619,
    1620,  2513,   855,   509,  2002,   601,   602,   603,  1035,   934,
     856,   857,   858,   859,  1201,   860,   604,   605,   606,   893,
    1442,  1894,  1445,  1446,  1895,  1518,  1519,  1957,  2228,   607,
     608,   942,   900,   901,  1523,  1966,  1967,  1373,  1374,  2195,
     609,   610,   611,   843,  1038,   612,   613,   902,  1461,   614,
     615,   616,  1041,   935,   617,   883,   916,  1932,   917,   618,
     918,  1488,  1489,  1490,  1491,  2247,   619,   620,  1044,   905,
     906,  1465,  1467,  1468,  1469,  1918,   621,  1463,  1912,  1913,
    2230,  2235,  2471,  2472,  2709,   622,   623,   624,  1492,  1493,
    1942,  1119,  1496,  1944,  2480,  2619,  2757,   625,   626,   627,
     628,  1047,   895,   896,  1450,  1451,  1452,  1889,  1890,  2758,
    1421,   882,   629,  2217,  2218,  2459,  2461,  2703,  2704,  2750,
    2751,  2462,  2463,  2464,  2213,  2214,  2215,  2456,  2457,  2694,
    2695,  2696,  2216,  1908,  2697,   630,  1413,  1414,  1415,  1416,
    1417,  2203,  2204,  2690,   631,   632,   633,  1050,   833,  1361,
     634,   834,  1833,  1834,  1835,  2431,  2437,  1836,  1356,  1357,
     635,   836,   636,   830,  1351,  1352,  1827,   637,   638,   874,
     875,   639,   640,   641,  1053,   924,   925,   926,   927,  2260,
    1503,  1499,  1500,   642,  1056,   643,   644,   939,   940,  1515,
    2264,  2265,  2268,  2269,  2270,   811,   812,  1323,  1324,  2141,
    2357,  2544,  2358,  2385,  2392,  2393,  1325,  1326,  2402,  1327,
    1328,  1329,  1330,  1331,  1332,  1333,  1334,  1003,  2394,  1136,
    2073,  1837,   716,  1945,   721,  2253,  2450,  2765,   678,  2573,
     740,  2170,  2747,  1586,  1069,  2364,  1694,   176,  1191,  1478,
    1494,   309,   316,  2484,   684,   712,  1189,  2551,  1393,  1186,
    1150,  1418,   193,   492,  1497,   344,   220,   221,  1815,  1816,
    2171,  2172,  2588,  2647,  2173,  2422,  2591,   222,   258,   259,
     223,   254,   255,   224
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     155,   156,   355,   117,   117,   873,   914,   956,   994,  1616,
     880,   274,  1081,  1103,  1104,  1125,   844,   774,  1455,  1471,
    1180,   769,   453,  1412,  1428,  1717,  1159,  1342,  1649,  1695,
     873,   897,   183,   184,   185,  1625,   814,  1652,   703,   936,
     308,   959,  1482,   120,  1550,   960,  1578,   507,  1337,  1032,
     194,  1429,   961,   122,  1557,  2231,  1564,  1516,  1378,  1984,
    1988,   268,  1372,  1538,  1176,   237,   323,  1372,  1516,   772,
    1372,   966,  1018,  1397,  1372,   779,  1443,   308,   965,  1372,
    1723,  1443,   752,   753,   350,   508,  2477,   887,  1358,   907,
    1486,   745,  1905,   172,  2391,  1588,   754,   755,   756, -1791,
     365,   867,   867,   757,  1204, -1791, -1791,  2025,   273,  1495,
   -1713, -1713, -1367, -1791,   290,    20,   301,   929, -1713,  1566,
    1133,  1615,  2054,  2055,   930,   959,   645,  2505, -1746,   960,
   -1713,  2063,  1735,   117,  1630, -1746,   961,  1120,   154,   842,
    -318,  1696,  -318,  -318,  -318,   499,   845,  1579,  1994,  2514,
    1487,  2515,   828,  1176,  1580,  2417,   499,   845,  1847,  2003,
    1581,   828,  1721,   677,   792,   501,  1938,  1593,  1470,  1938,
     828, -1024,   169,  2202,  1004,  1645,   793,   370,   715,  2320,
     692,   828,   304,   225,   978,   226,   227,   228,   871,   365,
    1138,   791,   687,  1880,  1881,  1161,  1582,  1163,   496,  1685,
    1139, -1746,   730,   715,  1061,   448,   933, -1746, -1791, -1721,
     898,   773,   818,   824,   491,   832,   832, -1746,   839, -1719,
     692,   854,   824,  -323,   835,   865,  1579,   877,   275, -1791,
     885,   824,   828,  1580,   890,  1821,  1823,  1387,   915,  1581,
     922,  1388,   824,  1138,   938,   177,   945, -1717,  1401,   952,
     738,  1086,   776,  1139,  1622,  1203,  1033,   704,   708,   767,
     743,  2617,   352,   773,   773,   327,   347,   317,  2564,  2400,
   -1004,   371,  1696,  1860, -1791,  1582, -1791,   321,   923,  1353,
    1190,  2577,  -826, -1791, -1746,  1940,   735,  1872,  1394,  1144,
     454,  2184,   713,   824,   372, -1746,  1019,   304,   124,   719,
    2219,  -826,   873,   192, -1791,   722,  1510,   751,   727,   729,
    1395,  1447,  2347,  1071,  1579,   448,   154,   736,  1885, -1746,
    1460,  1580,   449,  1400, -1721,  2699,   649,  1581,   741,  1760,
     276,  1697,  -308,    13, -1786,   154,  1711,   766,   495,   498,
     771,  2082,   790,  2347,   491,  1646,   873,   348,  1852,   192,
     124,  1389,   178,  1509,   880,   321,  1511,   720,  1512,  1941,
    1520,  2248,  1354,  1582,  2347,  2250,   780,  1924,  2618,  1401,
    2700,   953,  1423,  1480,     1,  -667,  -667,  -667,    18,   954,
     499,  1591,   744,   768,   693,  -308,  1563,   305,  1456, -1784,
    1355,   455,   904,  1470,  1952,  1570,   366,   781,   373,   374,
    1623,    24,     9,    10,   456, -1791, -1367,   739,  1359,   688,
    2185,   457,  1058,  -323, -1713,   701,  1005,  1135,  1063,  1004,
     125,   701, -1761,  1747,  1748,  1749,  1698,  2143,   148,  2184,
     777, -1721,   979, -1001,  2672,  1686,  2156,  1481,   314,  2158,
    1820, -1746,  2478,   680,   681,  1195,  2617,  2401,   701,   502,
    1829,   828,   277,  1343,  1344,   328,  -667,   828,   689,   677,
     502,  1875,  1697,  -667,  -667,  -667,   842,   -70, -1713,   154,
    1818,   154,   125,   499,   845,   770,  1340,   179,   180,   499,
    1175,  1176,  1712,  1713,   353,   366,  2418,  1176,  2075,   499,
    1666, -1713, -1746,   501,   820,  1739, -1761,  1667,   899,   501,
    2321, -1791,   305,   503,  2202,  1182,  1854,  2701,  1470,  2207,
   -1784,  2025,   824,  2325,   503,  1769,  1094,  1087,   824,   828,
   -1719,  1350,  1709, -1746,   147,  1062,   504,  1064,  2317,   832,
    2136, -1746, -1721,  1370,  1419, -1713,   701,  1362,  1722,  1121,
     701,   149,  1871,   854,  -667,  1901, -1721,  1848,   154,   854,
    -667,  1995,  1938,  2618,  2237,   154,   868,  1698,  1954,  1647,
     649,  -530,  2004,  1088,   828,   828,  1140,  2458,  1887,  2651,
     505,   877,  1699,  1118,    21,  1420,  1914,  1424,   931,   701,
    1336,   505,  2137,  1106,  1107,   354,  1108,   871,  1110,  1506,
    2569,   685, -1725,  1948,   291,   701,  1963,   701,  1367,  2076,
    1734,  1474,  -667,  1476,  1129,   746,  1738,  1479,   458,   915,
   -1746,  1137,  1878,  1171,   459,  1723, -1791,   269,   922,  1140,
     782,  1930,   150,   292,   293,   824,   824,  1981,   701,  1350,
    1975,  1122,  2186,  1983,  1987,   699,   154,   460,  -667,  -318,
    1936,  1701,  1080,   952,  1360,  1200,  1390, -1721,  1931,   828,
    2221,  2222,  2223,  1525,   828, -1784,   923,  1144,  1933,  2479,
    1965,  1005,   461,  1396,  1711,  1767,  1768,  2506,  1341,   701,
     701,  1572,  1573,  1574,  1575,  1576,  1577,  1882,  1608,  1611,
    1611,  1611,   229, -1746,   502,  2702,  1059,  1876,  1398,   462,
    -667,  1144,  2015,  1074,  1958,  1681,  1459,  1960, -1746,  1377,
     463,  1898,  1439,  2020,  2175,  1517,  1444,   140,  1177,  1178,
     824,  1896,   967,  1603, -1784,   824,  -450,  1179,  1605,   464,
   -1791, -1791,   148,  1075, -1004, -1004, -1004, -1004, -1004,   166,
     126,  1778,  1868,  2187,  2138,  2072,  1877,  2029,   503,  -530,
    1700,   682,  2642,   270,   127,   465, -1746, -1024,  1080,   128,
     129,  1462,   123,   723,  2231,   724,  1440,   466, -1791,   275,
     130,  1592, -1713, -1713,   758,   467,  -546,   275,   468,  1650,
      11, -1713,  1701,  2499,  2501,  1135, -1784,   502,  2624,  2625,
    2626,  2037,   126,   502, -1791,  1583,  -794,  -794,  -794,  -794,
    -794,  -794,  2643,   502,   701,  2189,   127,  1177,  1178,  1853,
    1353,   128,   129,  1385,  2644,   505,  1179,    12,   821,   822,
    1712,  1713,   130,  2208,  1640,  1427,   959,   453,  2124,   192,
     960,  1076,   347,   873,   499,  1725, -1725,   961,  1380,   238,
     239,   503,  1726,  2064,  2638,   149,   161,   503,  2261,  2139,
    1641, -1719,  1839,  1060,   501,  1151,   154,   503,  1804,  2490,
    2455,   281,  2038,  1077,   504,    21,   154,  1665,  2209,  1521,
     504,   276,    14,    15,  1583,   282,  1111,  2140,  1719,   276,
    2491, -1713, -1713,  1853,  -874,  1727,   701,  1731,  -545, -1713,
    2645,  1762,  2571,  1375,  -443,  1112,  1853,  1522, -1329,  1917,
    1758, -1713,  -545,  -545,  -545,  1761,  2295,  1145,   505,  1666,
    2351,   880,   880,   348,   505,  2352,  1667,   705,  1626,   706,
    1631,  2030,  2176,   430,   505,  1668,   150,   283,  2249,  1152,
    2125,  2180,  1441,  2027,  1732,    25,   370, -1070,  1840,  1118,
     431,  2543,  1624,    26,  2572,  1853,  2606,  1632,  1386,  1457,
    1634,  1635,  2210,  1636,  1903,  1016,  1853,   117,  1666,   701,
    2616,  2028,  1583,  1648,   432,  1667,  2031,  1563,  2721,  1653,
    1017,  1655,  2723,  2190,  1985,  1985,  1992,  1688,  2083,  2084,
    2085,  1870,   828,  1819,  1873,  2039,    -3,  1662,  1663,   313,
    2326,   828,  2327,   277,  1153,  2646,  1534,  1683,  2229,  2191,
    2628,   277,  2629,  1819,   282,  2211,  2103,  2104,  2105,  2106,
     783,   784,    27,  1138,  1707,   785,  1925,  2273,  2274,  1819,
     240,  2234,  2236,  1139,  2095,   499,  2333,   828,   828,  1843,
     371,  -874,  2017,  2334,   773,  1412,  1412,  1911,  2188,  1996,
    1997,  1998,  1578,   824,  1963,   501,  1350,  2081,  2778,  2692,
    2254,   839,  1822,   372,  1757,  1824,   283,  1432,  2775,  2776,
    2271,  2785,   965,  1832,  1838,  2296,   154,  1819,  2685,  1669,
     433,  1470,  2144,   828,  2423,  1716,  1642,  2693,   142,  1869,
    2026,   434,  1855, -1752,  1730,   219,  1857,  1858,   824,  1822,
    2165,  1859,  1861,  2445,  2446, -1752,  1864,  2598,  2712,   957,
    2455,  1067,   143,   873,  2351,   251,  1594,  1433,  1965,  2352,
    2353,     1,   965,   786,  2167,   958,   219,   252,  1669,  1434,
    1999,  2466,  1366,  2355,  2356,  1595,   828,   145,   877,   877,
    2168,  2725,   146,  1740,  1822,  1177,  1178,  1886,   502,   965,
    1947,  1177,  1178,   241,  1179,  1819,  1382,     4,   828,   828,
    1179,  1899,  1741,   153,  1947,  -308,  1902,   373,   374,  2486,
     206,  1906,  1670,   121,   792,   828,  1678,  2742,  -162,   435,
     436,   359,  2169,  1430,  1567,  1568,   793,  1187,  1679,   195,
     196,  1923,   787,  2212,   437, -1713,   438,   915,  1188,  1068,
     154, -1752,   503,  1982,   430,  1435,  2243,   242,  -162,  1907,
     201,   202,  1567,  1568,  1949,   705,  2481,   706,   203,   824,
    1822,   431,  1350,  1953,  2000,   504,  1666,   157,  1508,  2041,
    2744,  2278,  1939,  1667,   204,  1943,  1964,  2748,  1733,  2752,
    1832,  2042,   854,  1973,  1733,   432,  1144,  2533,  2043, -1713,
    2689,  2691,   160,  2698,  1193,  2537,  2354,  1194,  1690,  1691,
     163,  1474,  2538,   164,  2281,  2282,   207,   208,   170,   505,
     828,   209, -1713,   210,   256,   257,  2001,   211,   212,   171,
     213,   214,   175,  2283,   829,   215,   439,  1167,  2770,  1168,
    1169,   197,   861,   829,  1671,  1950,  2179,   198,  2281,  2282,
     182,   886,   829,  2508,  2509,  1955,  -162,   189,  2444,   199,
     200,   928,  2332,   829,   190,   941, -1713,  2497,   192,   873,
     788,  2771,  2630,   232,  2771,  2771,   235,  2355,  2356,  1149,
    1158,   824,  1915,  1381,  2024,  2150,  2151,  2152,  -162,   502,
     250,  2100,  2035,  1169,   -78,  2473,  2128,   154,  2129,   -78,
     -78,   433,   253,  2067,   965,  2296,   260,  1578,   -78,   -78,
     -78,   262,   434,   965,   829,  1750,  1751,  1752,  1753,   263,
    2074,  1609,  1612,  1613,  1564,  2102,   880,   880,   880,   880,
     880,  2467,  2245,   264,  2246,  1092,  1412,  1412,  1412,  1096,
    1097,  1098,  2514,   503,  2515,  1207,  1208,  1588,  2225,  1140,
    2731,  2769,  2732,  2279,   266,   440,  1992,  1750,  1751,  1752,
    1753,  1209,  1210,   453,   789,  2295,   504,   265,   216,   280,
    1906,  1567,  1568,  1690,  1691,  2290, -1752,  1572,  1573,  1574,
    1575,  1576,  1577,  1637,  1638,   965,   244,  2146,  2147,  1752,
    1753,  2420,  2421,  2508,  2509,   345,   346,  2201,  2289,  2343,
     435,   436,   300,  2436,  1765,  1766,  2532,  2665,  1907,   311,
     505, -1752,  1866,  1867,   305,   437,   312,   438,  2753,  2754,
     318,   201,   202,   245,   319,   281,   322,   324,   325,   203,
     359,   362,   965,   854,   363,   854,   369,   382,   854,   427,
     428,   450,   854,   246,   247,   204,   451,   854,   452,   493,
     854,   854,   854,   854,  2046,   854,  1906,   494,   497,   965,
     854,   854,  2641,   854,   513,  1906,  2053,  1688,  1906,  2033,
    2415,   510,   679,   854,   854,  2266,   691,   696,  1403,   697,
     839,  1404,  1405,   698,  1370,   709,  1370,   710,   711,   714,
    2051,  2052,   715,   720,  1907,   717,  1832,   731,  2057,   965,
     737,   742,   764,  1907,   965,   765,  1907,   439,   813,   816,
     841,   842,   892,  2225,  2225,   881,   894,   946,   947,   962,
    1578,   971,   972,  1370,  2296,  2636,  2636,   975,   828,   981,
     985,  2198,   982,   829,  2234,  1034,   828,  1012,  1906,   829,
    1065,  1037,  2220,   877,   877,   877,   877,   877,  1370,  1040,
    1049,  1043,  1046,   682,  2605,  1070,  2226,  2097,  1052,  1406,
    2174,  1055,  2604,   828,   861,   701,  1078,  1079,  2087,  1082,
     861,  1080,  1085,  1090,  2639,  2255,  1907,  1093,  1407,  2094,
    2531,  1089,  1101,  1906,  1100,  2239,  1099,  1102,  1105,   824,
    2242,  1109,  2240,  2528,  2529,  1114,  1422,   824,  1115,  1117,
    2244,  1127,  1130,  2729,  1147,  1148,  1149,  1162,  2336,  2337,
    2338,  1153,  1164,  2258,   839,  1370,   752,  1172, -1747,  2267,
     828,  1907,  1183,  1185,  1964,  1192,   733,  1190,  1196,  1206,
    1197,  1211,  2276,  1202,  1832,   854,  1338,  1345,  1363,   928,
    1372,  1367,  1379,  1380,  1383,   802,   829,   829,  1992,  1992,
    2636,  2259,  1384,  1425,  2636,  2503,  1431,  1448,   646,  1426,
     965,  2469,  1449,  2510,   965,  1453,  2307,   880,   880,   880,
    1454,  1458,   647,  1464,  1466,  1475,  1477,  1487,  1498,  1504,
    1514,   824,  1524,  1528,  2299,   648,  1530,  1527,   944,  2192,
    1532,  2093,  1533,  1535,   646,  1408,  1409,  1559,  2074,  1552,
   -1046,  1401,  1604,  1618,  1621,  1410,  1411,  1068,   647,  1633,
    1644,  2724,  1650,   965,   649,  1654,  1656,  1657,   965,  1661,
     965,   648,  1658,  1001,  1677,  1007,  1684,  1120,  1704,  1706,
    1710,   829,  1720,  1728,  1724,  1742,   829,  -415,   965,   304,
    1754,  1755,  1756,  1759,  1814,  1762,  1770,  1771,  1772,  1773,
     649,  1774,  1775,  1776,  1826,   965,  1777,  1845,  1779,  1780,
    1856,   868,  1865,  1874,  1781,  1851,  1782,  1783,  1784,  1879,
    1785,  1786,  2263,   854,  1787,  1788,  1789,  1883,   854,  1790,
    1791,  1792,  1884,  1793,  1794,  1796,  1797,   650,  2335,  1798,
    2664,   854,   854,  1893,  1799,   854,   854,   854,   854,  1800,
    1891,  1801,  1802,  1803,  1805,   854,  1892,  1806,  1807,   854,
     854,   854,  1919,   854,   854,   854,   854,  1808,  1809,  1810,
    1811,  1812,  1920,   650,  1921,  1922,   828,   854,  2777,  1926,
    1934,  1946,  1956,  1969,  1974,  1525,  1977,  1980,  1370,  1976,
     839,  2784,   651,  1978,  1832,  2005,  2427,  2006,  2786,  1832,
     507,  2304,  2010,  2012,  2305,  1594,  2018,   873,  2019,   839,
     839,  1622,  2036,   652,  1623,  1992,  2045,  1992,  2047,  2048,
    2056,  2312,  2058,  2631,  2290,  2634,  2634,  2059,   651,  1906,
    2060,  2061,  2068,  2069,   877,   877,   877,   839,   508,  2487,
    2066,  2078,  2070,  2470,  2686,  2494,  2096,  2289,  2077,   652,
    2086,  2329,  2330,  2331,  2079,   828,  1923,  2088,  2089,  2090,
     653,  2100,  2342,  2107,  2122,   654,  2126,  1907,  2098,  2099,
    2109,  2123,  2145,  2166,  1370,   839,  2177,   332,   965,   922,
    2178,  2181,  2267,  2182,  2199,  2196,  1205,  2200,  2495,  2197,
    2205,  2224,   655, -1002,  1213,  2232,   653,  2227,  1335,  2238,
    2251,   654,   333,   334,   335,   336,  2252,   965,   773,  2262,
    2275,  2298,   656,  1568,  2300,  2303,   824,   923,  2310,  2523,
    2311,  2313,  2597,  2308,  2314,  2315,  1371,  2316,   655,  2318,
   -1725,  2323,   657,  2324,  2328,  2349,  2363,  2350,  2365,  2391,
    2367,  2370,  2416,  2414,  2373,  2374,  2168, -1735,   656,  2382,
    2634,  2386,  2399,  2722,  2634,  1400,  2406,  2426,  2266,  2407,
    2409,   854,  2424,  2438,  2411,  2439, -1725,  2440,   657,  2448,
    2449,  2453,  2452,  2460,  2474,  2488,  2485,  2496,   873,  2465,
     207,   208,  2507, -1735,  2483,   209,  2512,   210,   854,  2520,
    2469,   211,   212,  2525,   213,   214,  2527,  2530,  1470,   215,
    2093,  2534,  2535,   854,   829,  2536,  2541,  2550,  2552,  2556,
    2563,  2557,  2587,   829,  2589,  2225,  2560,  1118,  2561,  2562,
    2565,  2468,  2566,  2590,  2574,  2225,  2575,  2594,  2576,  2578,
    2582,  2583,  2584,  2592,  2595,  2603,  1370,  2596,  2599,  2608,
    2615,  2622,  2627,  2515,  1016,  2482,  2593,  2650,  2652,   829,
     829,  2657,  2663,  2668,  2671,  2225,  2666,  2684,  1370,  1370,
    2705,  1401,  1911,  2727,   828, -1746,  1906,  2667,  2669,  1906,
    2670,  2713,  2735,   965,  1001,  1565,  2675,  2676,  2677,  1370,
    2730,  2736,  2681,  2682,  2683,  2719,  2720,  2746,  2738,  2739,
    2740,  2756,  2760,  2762,  2225,   829,  2764,  2763,  2621,  1370,
    2656,  2761,  2526,  2767,  1907,  2780,    23,  1907,  2342,  2773,
     167,  2540,   234,  1402,   162,   159,  1403,   174,   658,  1404,
    1405,  2225,  1909,   315,   261,   824,   320,   272,  2640,   686,
    1084,   364,  1073,  2524,  2225,  2050,  1095,   326,   700,   718,
    1660,  2065,  1664,   267,   429,  1676,   734,  2110,   726,  2115,
    2080,  2225,  2118,  2071,  1072,  1126,  2121,  1689,   965,  2539,
    1736,  2127,  1160,  2101,  2132,  2133,  2134,  2135,  2339,  2142,
     829,   829,   775,  1708,  2148,  2149,   351,  2153,  1737,  1166,
    2435,   854,   361,  1536,  2441,  1729,   854,  2163,  2164,  1979,
    1537,   974,   205,   861,   984,  1968,  1505,  1406,  1850,  1562,
     977,  2280, -1784,  1745,  1531,  2502,  1862,  2687,  2013,  1906,
    1906,   965,  1906,  2009,  2016,  2632,  1407,   920,   965,  2130,
     965,  2504,  2470,  1174,  1014,  1888,  1844,  1028,  1746,  1606,
    2649,  2521,  2654,  1607,  1617,  1972,  2607,  2715,  2716,  2717,
    2718,  2023,  1036,  2131,  1376,  1897,  1959,  1907,  1907,  1688,
    1907,   943,  2272,  1910,  1039,   455,  1042,  1937,  1935,  1045,
    2611,  1916,  2610,  2710,  2706,  2774,  2781,  1900,   456,  1048,
    2755,  2454,  2602,  2601,  2600,   457,  2745,  2206,  2447,  2451,
    2183,  1971,   829,  2425,   854,  1825,  2432,  1828,  1051,  1057,
    2586,  1764,  1054,   854,  2660,  1502,  2489,  2623,  2493,  2545,
    1513,  2398,  2570,   728,  2419,  2743,  1146,   289,   288,     0,
       0,     0,  1906,     0,  1906,  1906,     0,     0,     0,     0,
       0,     0,  2661,  2662,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1408,  1409,     0,     0,     0,     0,     0,
       0,     0,     0,  1410,  1411,     0,     0,     0,     0,  1381,
    1907,     0,  1907,  1907,     0,     0, -1746,     0,     0,     0,
    1906,     0,     0,  1906,     0,  2772,  1906,  1906,     0,     0,
       0,  1909,     0,     0,     0,  1795,     0,     0,     0,     0,
       0,     0,     0,     0,  2612,  2614,     0, -1746,  2782,  2783,
       0,  2620,     0,     0,     0,     0,     0,     0,  1907,     0,
       0,  1907,     0,     0,  1907,  1907, -1784,     0,     0,  2711,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
       0,     0,     0,     0,     0,  -530,     0,  2734,     0,     0,
       0,     0,     0,     0,   861,     0,   861,     0,     0,   861,
       0,     0,     0,   861,     0,     0,     0,     0,   861,     0,
     861,   861,   861,   861,   861,     0,   861,  1909,     0,     0,
       0,   861,   861,     0,   861,     0,  1909,     0, -1784,  1909,
       0,     0,   458,     0,   861,   861,     0,     0,   459,     0,
       0,     0,     0,     0,     0,     0,     0,  2345,     0,     0,
       0,     0,  2348,     0,     0,     0,     0,     0,     0,     0,
       0,   460,     0,     0,     0,  2371,  2372,  2759,     0,  2375,
    2377,  2379,  2381,     0,     0,     0,     0,     0,     0,  2384,
       0,     0,     0,  2388,  2389,  2390,   461,  2395,  2396,  2397,
    2384,     0,     0,     0,     0,     0,     0,     0,     0,  1909,
       0,  2412,     0,     0,     0,     0,     0,     0,   963,   514,
       0,     0,     0,   462,  1001,     0,     0,     0,     0,     0,
    -335,   332,     0,     0,   463,  -335,     0,  -335,     0,  -335,
    -335,  -335,     0,     0,  -335,  -335,  -335,     0,     0,     0,
       0,     0,     0,   464,  1909,     0,   333,   334,   335,   336,
     829,     0,     0,     0,     0,     0,     0,     0,   829,     0,
       0,     0,   517,  -530,     0,     0,     0,     0,     0,   465,
   -1746,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   466,     0,     0,     0,     0,     0,     0,     0,   467,
       0,     0,   468,     0,     0,     0,   861,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,
       0,     0,  1001,  1001,  1993,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   207,   208,     0,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
    1007,     0,   829,   215,     0,     0,     0,  1001,     0,     0,
     518,     0,     0,     0,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,     0,   532,   533,
     534,   535,   536,   537,   538,   539,     0,   540,   541,   542,
     543,   544,   545,     0,   546,  2542,   547,   548,   549,   550,
     551,   552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,     0,     0,     0,  -453,     0,
       0,     0,  2559,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2568,     0,     0,
       0,     0,     0,     0,   861,     0,     0,     0,     0,   861,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   861,   861,     0,     0,   861,   861,   861,   861,
       0,     0,     0,     0,     0,     0,   861,     0,     0,     0,
     861,   861,   861,     0,   861,   861,   861,   861,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   861,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2108,   514,     0,   554,     0,     0,
       0,     0,   555,     0,     0,     0,  2112,     0,  2116,  2117,
       0,  2119,  2120,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -335,     0,  2112,
    1909,   556,     0,     0,     0,     0,  2155,     0,  2157,     0,
       0,  2159,  2160,  2161,  2162,     0,     0,  2112,   517,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -400,   332,     0,
     928,     0,  -400,     0,  -400,     0,  -400,  -400,  -400,     0,
       0,  -400,  -400,  -400,     0,  2679,     0,     0,     0,     0,
    2680,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   829,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   518,     0,     0,     0,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   532,   533,   534,   535,   536,   537,
     538,   539,   861,   540,   541,   542,   543,   544,   545,   557,
     546,     0,   547,   548,   549,   550,   551,   552,     0,     0,
       0,   207,   208,     0,     0,     0,   209,     0,   210,   861,
     553,     0,   211,   212,   558,   213,   214,     0,  2737,     0,
     215,     0,     0,     0,   861,     0,     0,  2741,     0,     0,
       0,  2277,     0,   559,     0,     0,  -335,  -335,     0,     0,
    -401,   332,     0,     0,  1993,  -401,     0,  -401,     0,  -401,
    -401,  -401,     0,     0,  -401,  -401,  -401,     0,     0,     0,
       0,     0,     0,  1001,     0,     0,   333,   334,   335,   336,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1909,     0,     0,
    1909,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   554,     0,     0,     0,     0,   555,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   207,   208,   829,   556,     0,   209,
       0,   210,     0,     0,     0,   211,   212,     0,   213,   214,
       0,     0,     0,   215,     0,     0,     0,     0,  2112,     0,
       0,     0,     0,     0,  2360,  2362,     0,     0,  2366,     0,
    2368,  2369,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2112,
       0,     0,   861,     0,     0,     0,     0,   861,     0,     0,
       0,  2403,  2405,     0,  2007,  2408,     0,  2410,   964,     0,
    2112,     0,     0,     0,     0,     0,  -838,     0,     0,     0,
    1909,  1909,     0,  1909,  2233,     0,     0,     0,     0,     0,
    2430,     0,     0,     0,  -838,  -838,     0,     0,  2442,  2443,
       0,     0,     0,     0,     0,  -838,  -838,     0,     0,     0,
       0,     0,  -838,  -838,     0,     0,     0,  -337,   332,  -838,
       0,     0,  -337,  -838,  -337,  -838,  -337,  -337,  -337,     0,
       0,  -337,  -337,  -337,     0,   557,     0,     0,     0,     0,
       0,     0,     0,   333,   334,   335,   336,     0,     0,     0,
       0,     0,     0,     0,     0,   861,     0,     0,     0,     0,
     558,     0,  -838,  -838,   861,     0,     0,     0,     0,     0,
       0,     0,     0,  -838,     0,     0,     0,     0,     0,   559,
       0,     0,     0,  1909,     0,  1909,  1909,     0,     0,     0,
       0,     0,     0,  1565,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   207,   208,     0,     0,     0,   209,     0,   210,     0,
       0,  1909,   211,   212,  1909,   213,   214,  1909,  1909,     0,
     215,     0,     0,     0,     0,     0,     0,     0,  -838,  -838,
    -838,  -838,  -838,  -400,  -838,     0,     0,     0,  -838,     0,
       0,     0,     0,     0,     0,  2547,     0,  2549,  -838,     0,
    -838,     0,  -838,  2553,  2555,     0,     0,     0,     0,  -838,
       0,     0,  -838,     0,  -838,     0,     0,     0,  -838,  -838,
       0,     0,  -838,     0,     0,     0,  -838,     0,     0,     0,
    -838,  -838,     0,     0,     0,     0,     0,     0,  2579,     0,
    2581,  -838,     0,     0,     0,     0,     0,  -838,     0,     0,
       0,     0,     0,     0,  -838,     0,     0,  -838,     0,     0,
       0,  -838,     0,     0,     0,  -838,  -838,     0,     0,  -838,
       0,  -838,     0,     0,     0,     0,     0,     0,     0,     0,
    2609,     0,  -838,     0,     0,     0,     0,     0,  -838,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -838,  -838,
       0,     0,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
       0,     0,     0,     0,     0,     0,  -838,     0,     0,     0,
       0,  -838,  -838,  -838,  -838,     0,  -401,  -838,     0,  -838,
       0,     0,     0,  1993,     0,  1993,     0,  -838,  -838,  -838,
    -838,     0,  1001,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -838,  -838,  -838,  -838,  -838,  -838,     0,
    -838,     0,     0,     0,  -337,     0,     0,     0,     0,     0,
       0,     0,  -838,  -838,     0,     0,     0,     0,     0,     0,
       0,     0,  -838,  -838,  -838,  -838,     0,     0,  2674,     0,
    -838,  -838,  -838,  -838,  -838,     0,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,     0,  -838,     0,     0,     0,     0,
    -838,     0,     0,     0,     0,     0,  -838,     0,     0,     0,
    -838,  -838,  -838,     0,     0,     0,     0,     0,  -838,     0,
       0,  -838,     0,  -838,  -838,     0,  2297,     0,     0,     0,
       0,     0,     0,  2708,     0,  -838,     0,     0,     0,  -838,
       0,     0,     0,     0,     0,     0,     0,  2714,     0,     0,
    -838,  -838,  -838,  -838,     0,     0,     0,     0,  1993,     0,
    -838,     0,  1993,     0,     0,  -838,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -838,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -838,  -838,     0,     0,     0,     0,     0,     0,  -838,
    -838,     0,  -838,     0,     0,     0,  -838,     0,     0,     0,
    -838,  -838,     0,  -838,  -838,  -838,  -838,     0,     0,     0,
       0,  -838,     0,     0,  -838,  -838,  -838,  -838,  -838,  -838,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -838,  -838,     0,  -337,  -337,     0,  -838,     0,     0,     0,
       0,     0,     0,     0,  -838,  -838,     0,     0,  -838,  -838,
       0,  -838,  -838,  -838,     0,  -838,     0,     0,  -838,     0,
       0,     0,     0,     0,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,     0,     0,  2007,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -838,     0,     0,     0,     0,     0,     0,     0,     0,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,     0,     0,     0,   383,     0,  -838,     0,     0,     0,
    -838,  -838,     0,     0,     0,     0,     0,  -838,  -838,     0,
       0,     0,     0,     0,  -838,     0,     0,     0,  -838,     0,
    -838,     0,     0,     0,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,     0,  -838,  -838,     0,
       0,     0,     0,     0,     0,     0,     0,  1553,  -838,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -838,  -838,  -838,  -838,  -838,     0,  -838,
       0,     0,     0,  -838,     0,     0,     0,     0,     0,     0,
     415,     0,     0,  -838,     0,  -838,     0,  -838,     0,     0,
       0,     0,     0,     0,  -838,     0,     0,  -838,     0,  -838,
       0,     0,     0,  -838,  -838,     0,     0,  -838,     0,     0,
       0,  -838,     0,     0,     0,  -838,  -838,     0,     0,     0,
       0,     0,     0,     0,     0,   416,  -838,     0,     0,     0,
       0,     0,  -838,     0,     0,     0,     0,     0,     0,  -838,
       0,  1554,  -838,  1555,  1556,     0,  -838,     0,     0,   417,
    -838,  -838,     0,     0,  -838,     0,  -838,     0,     0,     0,
       0,     0,     0,     0,     0,   418,     0,  -838,     0,     0,
       0,     0,     0,  -838,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -838,  -838,     0,     0,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,     0,     0,     0,     0,     0,
       0,  -838,     0,     0,     0,     0,  -838,  -838,  -838,  -838,
       0,     0,  -838,     0,  -838,     0,     0,     0,     0,     0,
       0,     0,  -838,  -838,  -838,  -838,     0,     0,     0,     0,
       0,     0,     0,     0,  1627,     0,     0,     0,  -838,  -838,
    -838,  -838,  -838,  -838,     0,  -838,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -838,  -838,     0,
       0,     0,     0,     0,     0,     0,     0,  -838,  -838,  -838,
    -838,   419,     0,     0,     0,  -838,  -838,  -838,  -838,  -838,
       0,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,     0,
    -838,     0,     0,     0,     0,  -838,     0,     0,     0,     0,
       0,  -838,     0,     0,     0,  -838,  -838,  -838,     0,     0,
       0,     0,     0,  -838,     0,     0,  -838,     0,  -838,  -838,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -838,     0,     0,     0,  -838,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -838,  -838,  -838,  -838,     0,
       0,     0,     0,     0,     0,  -838,     0,     0,     0,     0,
    -838,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -838,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -838,  -838,     0,     0,
       0,     0,     0,     0,  -838,  -838,     0,  -838,     0,     0,
       0,  -838,     0,     0,     0,  -838,  -838,     0,  -838,  -838,
    -838,  -838,     0,     0,     0,     0,  -838,   420,     0,  -838,
    -838,  -838,  -838,  -838,  -838,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -838,  -838,     0,     0,     0,
       0,  -838,     0,     0,     0,     0,     0,     0,     0,  -838,
    -838,     0,     0,  -838,  -838,     0,  -838,  -838,  -838,     0,
    -838,     0,     0,  -838,     0,     0,     0,     0,     0,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,     0,     0,  2154,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1546,     0,     0,     0,
       0,     0,     0,     0,     0,  -838,  -838,  -838,  -838,  -838,
    -838,  -838,  -838,  -838,    28,     0,     0,     0,     0,     0,
       0,  -838,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   792,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   793,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1546, -1546,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34, -1546,     0, -1546,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1546,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0, -1546,
       0,     0, -1546,     0, -1546,     0,     0,     0, -1546, -1546,
       0,     0, -1546,     0,     0,     0, -1546,     0,     0,     0,
   -1546, -1546,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1546,     0,     0,     0,     0,     0, -1546,     0,     0,
       0,     0,     0,     0, -1546,     0,     0, -1546,     0,     0,
       0, -1546,     0,     0,     0, -1546, -1546,     0,     0, -1546,
       0, -1546,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   795,     0,     0,     0,     0,     0, -1546,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1546, -1546,
       0,     0, -1546, -1546, -1546, -1546, -1546, -1546, -1546,     0,
       0,     0,     0,     0,     0,     0, -1546,     0,     0,     0,
       0, -1546, -1546, -1546, -1546,     0,     0, -1546,     0,   796,
       0,     0,     0,     0,     0,     0,     0, -1546, -1546,     0,
   -1546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1546, -1546, -1546, -1546, -1546, -1546,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1546,   797,     0,     0,     0,     0,     0,     0,
       0,     0, -1546, -1546, -1546, -1546,     0,     0,     0,     0,
   -1546, -1546, -1546,     0, -1546,     0,    38, -1546, -1546, -1546,
   -1546, -1546,    39, -1546,     0, -1546,     0,     0,     0,     0,
   -1546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1546, -1546, -1546,     0,     0,     0,     0,     0,    40,     0,
       0, -1546,     0, -1546, -1546,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1546,     0,     0,     0, -1546,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1546, -1546, -1546,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0, -1546,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1546, -1546,     0,     0,     0,     0,     0,     0, -1546,
   -1546,     0, -1546,     0,     0,     0, -1546,     0,     0,     0,
   -1546, -1546,     0,    42, -1546, -1546,    43,     0,     0,     0,
       0, -1546,     0,     0, -1546, -1546, -1546, -1546, -1546, -1546,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1546,     0,     0,     0,     0,     0, -1546,     0,     0,     0,
       0,     0,     0,     0, -1546, -1546,     0,     0, -1546, -1546,
       0, -1546, -1546, -1546,     0, -1546,     0,     0, -1546,     0,
       0,     0,     0,     0, -1546,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   798,     0, -1408,   876,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1408, -1408,     0,     0,     0,     0,   799,   800,    28,
       0,     0,     0,     0,     0,     0,   801,     0,     0,     0,
       0,   845, -1408, -1408,     0, -1408,     0,     0,   846, -1408,
       0,     0, -1408,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   847,
     848,   849,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1408,  1401, -1408,     0, -1408, -1408, -1408, -1408, -1408, -1408,
   -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1791, -1408, -1408,
   -1408, -1408, -1408, -1408, -1408, -1408,     0, -1408, -1408, -1408,
   -1408, -1408, -1408,     0, -1408,     0, -1408, -1408, -1408, -1408,
   -1408, -1408, -1408,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,  1402, -1408,     0,  1403,     0,     0,  1404,
    1405,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,   518,     0,     0,     0,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,    36,   532,   533,   534,   535,   536,   537,   538,   539,
       0,   540,   541,   542,   543,   544,   545,     0,   546,     0,
     547,   548,   549,   550,   551,   552, -1105,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,  1406,     0,     0,
       0,     0, -1784,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1407, -1408,     0,     0,
    1539,     0, -1408,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1408,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1408,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,     0,     0,     0,    37,     0,     0,     0,     0,
       0,   554,     0,     0,     0,     0,   555,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1105,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,   556,     0,    39,     0,     0,
       0,     0,     0,  1408,  1409,     0,     0,     0,     0,     0,
       0,     0,     0,  1410,  1411,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1540,  1541,     0,  1542,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1408,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1784,     0,     0,     0,
       0,     0,     0,     0, -1408,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1408,     0,     0,     0,     0,     0,  1543,
    1544,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,  1545,
       0,     0,     0,   557,  1546,     0,  1547,     0, -1784,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   558,  1548,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   701,     0,     0,   559,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,     0, -1408, -1408, -1408, -1408, -1408,     0, -1408, -1408,
   -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408, -1408,
   -1408, -1408,  -704,  -704,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1408,     0,
       0,     0,     0,     0,     0,  -704,  -704,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   499,   845,  -704,  -704,     0,  -704,
       0,     0,   846,  -704,     0,     0,  -704,     0,     0,     0,
       0,     0,     0,     0,   501, -1105,     0,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   847,   848,   849,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1549,     0,     0,
       0,     0,     0,     0,  -704,     0,  -704,     0,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,     0,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
       0,  -704,  -704,  -704,  -704,  -704,  -704,     0,  -704,     0,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   850,  -704,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   518,     0,
       0,    35,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,   532,   533,   534,   535,
     536,   537,   538,   539,     0,   540,   541,   542,   543,   544,
     545,     0,   546,     0,   547,   548,   549,   550,   551,   552,
   -1116,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -704,     0,     0,     0,     0,  -704,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -704,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -704,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   502,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   554,     0,     0,     0,    37,
     555,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   851,     0,     0,     0,     0,     0, -1116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   556,
       0,     0,   503,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -704,     0,   504,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
       0,     0,     0,  -704,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -704,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -704,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -704,     0,     0,     0,     0,     0,     0,     0,
       0,   559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   852,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,  -704,
    -704,  -704,  -704,  -704,  -704,  -704,  -710,  -710,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -704,     0,     0,     0,     0,     0,     0,  -710,
    -710,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   499,   845,
    -710,  -710,     0,  -710,     0,     0,   846,  -710,     0, -1116,
    -710,     0,     0,     0,     0,     0,     0,     0,   501,     0,
       0,   514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   847,   848,   849,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,   517,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -710,     0,
    -710,     0,  -710,  -710,  -710,  -710,  -710,  -710,  -710,  -710,
    -710,  -710,  -710,  -710,  -710,     0,  -710,  -710,  -710,  -710,
    -710,  -710,  -710,  -710,     0,  -710,  -710,  -710,  -710,  -710,
    -710,     0,  -710,     0,  -710,  -710,  -710,  -710,  -710,  -710,
    -710,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,   850,  -710,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   518,     0,     0,    35,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,     0,
     532,   533,   534,   535,   536,   537,   538,   539,     0,   540,
     541,   542,   543,   544,   545,     0,   546,     0,   547,   548,
     549,   550,   551,   552, -1099,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -710,     0,     0,     0,     0,
    -710,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -710,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -710,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   502,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   554,
       0,     0,     0,    37,   555,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   851,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   556,     0,     0,   503,     0,     0,    38,
       0,     0,     0,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   504,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   505,     0,     0,     0,  -710,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -710,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -710,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,   557,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   559,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   852,
    -710,  -710,  -710,  -710,  -710,     0,  -710,  -710,  -710,  -710,
    -710,  -710,  -710,  -710,  -710,  -710,  -710,  -710,  -710,  -710,
   -1374, -1374,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -710,     0,     0,     0,
       0,     0,     0, -1374, -1374,     0,     0,     0,     0,     0,
       0,    28,     0, -1374,     0,     0,     0,     0,     0,     0,
       0,     0,   499,  1904, -1374, -1374,     0, -1374,     0,     0,
       0, -1374,     0,  2021, -1374,     0,     0,     0,     0,     0,
       0,     0,   501,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1374,     0, -1374,     0, -1374, -1374, -1374, -1374,
   -1374, -1374, -1374, -1374, -1374, -1374, -1374, -1374, -1374,     0,
   -1374, -1374, -1374, -1374, -1374, -1374, -1374, -1374,     0, -1374,
   -1374, -1374, -1374, -1374, -1374,     0, -1374,     0, -1374, -1374,
   -1374, -1374, -1374, -1374, -1374,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0, -1374, -1374,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,   518,     0,     0,     0,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,   532,   533,   534,   535,   536,   537,   538,   539,
   -1374,   540,   541,   542,   543,   544,   545,     0,   546,     0,
     547,   548,   549,   550,   551,   552,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1374,
       0,     0,     0,     0, -1374,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1374,     0,     0,     0,     0, -1374,     0,     0,
       0,     0,     0, -1374,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   502,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,   554,     0,     0,     0,     0,   555, -1374,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1119,     0,     0,     0,     0,     0,
     503,     0,     0,    38,     0,   556,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   504,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   505,     0,     0,
       0, -1374,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1374,     0,
       0,     0,     0,     0,     0,     0, -1374,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1374,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1374,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   559,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     0, -1374, -1374, -1374, -1374, -1374,     0,
   -1374, -1374, -1374, -1374, -1374, -1374, -1374, -1374, -1374, -1374,
   -1374, -1374, -1374, -1374, -1375, -1375,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1374,     0,     0,     0,     0,     0,     0, -1375, -1375,     0,
       0,     0,     0,     0,     0,    28,     0, -1375,     0,     0,
       0,     0,     0,     0,     0,     0,   499,  1904, -1375, -1375,
       0, -1375,     0,     0,     0, -1375,     0,     0, -1375,     0,
       0,     0,     0,     0,     0, -1119,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1375,     0, -1375,     0,
   -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375,
   -1375, -1375, -1375,     0, -1375, -1375, -1375, -1375, -1375, -1375,
   -1375, -1375,     0, -1375, -1375, -1375, -1375, -1375, -1375,     0,
   -1375,     0, -1375, -1375, -1375, -1375, -1375, -1375, -1375,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0, -1375,
   -1375,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,   518,     0,
       0,     0,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,   532,   533,   534,   535,
     536,   537,   538,   539, -1375,   540,   541,   542,   543,   544,
     545,     0,   546,     0,   547,   548,   549,   550,   551,   552,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1375,     0,     0,     0,     0, -1375,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1375,     0,     0,     0,
       0, -1375,     0,     0,     0,     0,     0, -1375,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     502,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,   554,     0,     0,     0,     0,
     555, -1375,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   503,     0,     0,    38,     0,   556,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   504,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   505,     0,     0,     0, -1375,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1375,     0,     0,     0,     0,     0,     0,     0,
   -1375,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1375,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1375,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   559,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     0, -1375, -1375,
   -1375, -1375, -1375,     0, -1375, -1375, -1375, -1375, -1375, -1375,
   -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1375, -1376, -1376,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1375,     0,     0,     0,     0,     0,
       0, -1376, -1376,     0,     0,     0,     0,     0,     0,    28,
       0, -1376,     0,     0,     0,     0,     0,     0,     0,     0,
     499,  1904, -1376, -1376,     0, -1376,     0,     0,     0, -1376,
       0,     0, -1376,     0,     0,     0,     0,     0,     0,  1614,
     501,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   517,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1376,     0, -1376,     0, -1376, -1376, -1376, -1376, -1376, -1376,
   -1376, -1376, -1376, -1376, -1376, -1376, -1376,     0, -1376, -1376,
   -1376, -1376, -1376, -1376, -1376, -1376,     0, -1376, -1376, -1376,
   -1376, -1376, -1376,     0, -1376,     0, -1376, -1376, -1376, -1376,
   -1376, -1376, -1376,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0, -1376, -1376,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,   518,     0,     0,     0,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,     0,
     532,   533,   534,   535,   536,   537,   538,   539, -1376,   540,
     541,   542,   543,   544,   545,     0,   546,     0,   547,   548,
     549,   550,   551,   552,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1376,     0,     0,
       0,     0, -1376,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1376,     0,     0,     0,     0, -1376,     0,     0,     0,     0,
       0, -1376,     0,     0,   796,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   502,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,   554,
       0,     0,     0,     0,   555, -1376,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   503,     0,
       0,    38,     0,   556,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   504,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   505,     0,     0,     0, -1376,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1376,     0,     0,     0,
       0,     0,     0,     0, -1376,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1376,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   557,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1376,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   559,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,     0, -1376, -1376, -1376, -1376, -1376,     0, -1376, -1376,
   -1376, -1376, -1376, -1376, -1376, -1376, -1376, -1376, -1376, -1376,
   -1376, -1376, -1390, -1390,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1376,     0,
       0,     0,     0,     0,     0, -1390, -1390,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   499,  1904, -1390, -1390,     0, -1390,
       0,     0,     0, -1390,     0,     0, -1390,     0,     0,     0,
       0,     0,     0,  2021,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   514,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   517,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1390,     0, -1390,     0, -1390, -1390,
   -1390, -1390, -1390, -1390, -1390, -1390, -1390, -1390, -1390, -1390,
   -1390,     0, -1390, -1390, -1390, -1390, -1390, -1390, -1390, -1390,
       0, -1390, -1390, -1390, -1390, -1390, -1390,     0, -1390,     0,
   -1390, -1390, -1390, -1390, -1390, -1390, -1390,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0, -1390, -1390,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,   518,     0,     0,     0,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   532,   533,   534,   535,   536,   537,
     538,   539, -1390,   540,   541,   542,   543,   544,   545,     0,
     546,     0,   547,   548,   549,   550,   551,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1390,     0,     0,     0,     0, -1390,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1390,     0, -1390,     0,     0,     0,
       0,     0,     0,     0,     0, -1390,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   502,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,   554,     0,     0,     0,     0,   555, -1390,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   503,     0,     0,    38,     0,   556,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   504,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
       0,     0,     0, -1390,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1390,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1390,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1390,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   559,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,     0, -1390, -1390, -1390, -1390,
   -1390,     0, -1390, -1390, -1390, -1390, -1390, -1390, -1390, -1390,
   -1390, -1390, -1390, -1390, -1390, -1390, -1079, -1079,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1390,     0,     0,     0,     0,     0,     0, -1079,
   -1079,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1079, -1079,     0, -1079,     0,     0,   792, -1079,     0,     0,
   -1079,     0,     0,     0,     0,     0,     0, -1122,   793,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -635,   514,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -635,  -635,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,  -635,  -635,     0,  -635,     0,
       0,     0,  -635,     0,     0,   517,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1079,     0,
   -1079,     0, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079,     0, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079,     0, -1079, -1079, -1079, -1079, -1079,
   -1079,     0, -1079,     0, -1079, -1079, -1079, -1079, -1079, -1079,
   -1079,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0, -1079,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,   518,     0,  -635,     0,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
       0,   532,   533,   534,   535,   536,   537,   538,   539,     0,
     540,   541,   542,   543,   544,   545,     0,   546,     0,   547,
     548,   549,   550,   551,   552,  -635,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   553,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1079,     0,     0,     0,     0,
   -1079,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1079,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1079,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
     554,     0,     0,     0,     0,   555,   820,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -635,     0,     0,     0,     0,     0,    38,
       0,     0,     0,     0,   556,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1079,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1079,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1079,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,     0,     0,     0,     0,     0, -1791,     0,     0,     0,
       0,     0,   557,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1016,     0,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1017,
       0,     0,   701,     0,     0,     0,   559,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,     0,
   -1079, -1079, -1079, -1079, -1079,     0, -1079, -1079, -1079, -1079,
   -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079, -1079,
    -966,   876,     0,     0,     0,     0,     0,     0,     0,     0,
     821,   822,     0,     0,     0,     0, -1079,     0,     0,     0,
       0,     0,     0,  -966,  -966,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   845,  -966,  -966,     0,  -966,     0,     0,
     846,  -966,     0,     0,  -966,  -635,  -635,  -635,  -635,  -635,
       0,  -635,  -635,  -635,  -635,  -635,  -635,  -635,  -635,  -635,
    -635,  -635,  -635,  -635,  -635,   514,     0,   -11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -635,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   847,   848,   849,     0,   515,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,  1813,     0,
       0,     0,     0,     0,   516,     0,     0,     0,   517,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -966,     0,  -966,     0,  -966,  -966,  -966,  -966,
    -966,  -966,  -966,  -966,  -966,  -966,  -966,  -966,  -966,     0,
    -966,  -966,  -966,  -966,  -966,  -966,  -966,  -966,     0,  -966,
    -966,  -966,  -966,  -966,  -966,     0,  -966,     0,  -966,  -966,
    -966,  -966,  -966,  -966,  -966,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,  -966,     0,     0,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,   518,     0,     0,     0,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,    36,   532,   533,   534,   535,   536,   537,
     538,   539,     0,   540,   541,   542,   543,   544,   545,     0,
     546,     0,   547,   548,   549,   550,   551,   552,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -966,
       0,     0,     0,     0,  -966,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -966,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -966,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,   554,     0,     0,     0,     0,   555,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,   556,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -966,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -966,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -966,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,   -11,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   559,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     0,  -966,  -966,  -966,  -966,  -966,     0,
    -966,  -966,  -966,  -966,  -966,  -966,  -966,  -966,  -966,  -966,
    -966,  -966,  -966,  -966,  -970,   876,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -966,     0,     0,     0,     0,     0,     0,  -970,  -970,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   845,  -970,  -970,
       0,  -970,     0,     0,   846,  -970,     0,     0,  -970,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -543,
     514,     0,   -11,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -543,  -543,  -543,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     515,     0,     0,     0,     0,   847,   848,   849,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,   516,
       0,     0,     0,   517,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -970,     0,  -970,     0,
    -970,  -970,  -970,  -970,  -970,  -970,  -970,  -970,  -970,  -970,
    -970,  -970,  -970,     0,  -970,  -970,  -970,  -970,  -970,  -970,
    -970,  -970,     0,  -970,  -970,  -970,  -970,  -970,  -970,     0,
    -970,     0,  -970,  -970,  -970,  -970,  -970,  -970,  -970,    31,
      32,    33,    34,     0,     1,     0,     0,     0,     0,     0,
    -970,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   518,     0,    35,     0,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,     0,   532,
     533,   534,   535,   536,   537,   538,   539,    36,   540,   541,
     542,   543,   544,   545,     0,   546,     0,   547,   548,   549,
     550,   551,   552,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   553,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -970,     0,     0,     0,     0,  -970,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -970,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -970,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   554,     0,
       0,    37,     0,   555,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   556,     0,     0,     0,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -970,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -970,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -970,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   -11,     0,     0,    42,     0,     0,    43,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   559,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     0,  -970,  -970,
    -970,  -970,  -970,     0,  -970,  -970,  -970,  -970,  -970,  -970,
    -970,  -970,  -970,  -970,  -970,  -970,  -970,  -970,  -967,   876,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -970,     0,     0,     0,     0,     0,
       0,  -967,  -967,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   845,  -967,  -967,     0,  -967,     0,     0,   846,  -967,
       0,     0,  -967,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -544,   514,     0,   -11,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -544,  -544,  -544,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   515,     0,     0,     0,     0,   847,
     848,   849,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,   516,     0,     0,     0,   517,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -967,     0,  -967,     0,  -967,  -967,  -967,  -967,  -967,  -967,
    -967,  -967,  -967,  -967,  -967,  -967,  -967,     0,  -967,  -967,
    -967,  -967,  -967,  -967,  -967,  -967,     0,  -967,  -967,  -967,
    -967,  -967,  -967,     0,  -967,     0,  -967,  -967,  -967,  -967,
    -967,  -967,  -967,    31,    32,    33,    34,     0,     1,     0,
       0,     0,     0,     0,  -967,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   518,     0,    35,     0,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,   532,   533,   534,   535,   536,   537,   538,
     539,    36,   540,   541,   542,   543,   544,   545,     0,   546,
       0,   547,   548,   549,   550,   551,   552,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -967,     0,     0,
       0,     0,  -967,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -967,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -967,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,    37,     0,   555,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   556,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -967,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -967,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -967,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   -11,     0,     0,    42,     0,
       0,    43,     0,     0,   557,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   559,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,     0,  -967,  -967,  -967,  -967,  -967,     0,  -967,  -967,
    -967,  -967,  -967,  -967,  -967,  -967,  -967,  -967,  -967,  -967,
    -967,  -967,  -969,   876,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -967,     0,
       0,     0,     0,     0,     0,  -969,  -969,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   845,  -969,  -969,     0,  -969,
       0,     0,   846,  -969,     0,     0,  -969,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   514,     0,
     -11,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   515,     0,
       0,     0,     0,   847,   848,   849,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,   516,     0,     0,
       0,   517,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -969,     0,  -969,     0,  -969,  -969,
    -969,  -969,  -969,  -969,  -969,  -969,  -969,  -969,  -969,  -969,
    -969,     0,  -969,  -969,  -969,  -969,  -969,  -969,  -969,  -969,
       0,  -969,  -969,  -969,  -969,  -969,  -969,     0,  -969,     0,
    -969,  -969,  -969,  -969,  -969,  -969,  -969,    31,    32,    33,
      34,     0,     1,     0,     0,     0,     0,     0,  -969,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   518,
       0,    35,     0,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,     0,   532,   533,   534,
     535,   536,   537,   538,   539,    36,   540,   541,   542,   543,
     544,   545,     0,   546,     0,   547,   548,   549,   550,   551,
     552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   553,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -969,     0,     0,     0,     0,  -969,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -969,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -969,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   554,     0,     0,    37,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     556,     0,     0,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -969,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -969,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -969,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   -11,
       0,     0,    42,     0,     0,    43,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   559,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,     0,  -969,  -969,  -969,  -969,
    -969,     0,  -969,  -969,  -969,  -969,  -969,  -969,  -969,  -969,
    -969,  -969,  -969,  -969,  -969,  -969,  -968,   876,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -969,     0,     0,     0,     0,     0,     0,  -968,
    -968,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   845,
    -968,  -968,     0,  -968,     0,     0,   846,  -968,     0,     0,
    -968,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -816,   514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -816,  -816,     0,     0,   847,   848,   849,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,  -816,  -816,     0,  -816,     0,     0,
       0,  -816,     0,     0,   517,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -968,     0,
    -968,     0,  -968,  -968,  -968,  -968,  -968,  -968,  -968,  -968,
    -968,  -968,  -968,  -968,  -968,     0,  -968,  -968,  -968,  -968,
    -968,  -968,  -968,  -968,     0,  -968,  -968,  -968,  -968,  -968,
    -968,     0,  -968,     0,  -968,  -968,  -968,  -968,  -968,  -968,
    -968,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,  -968,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,   518,     0,  -816,     0,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,    36,
     532,   533,   534,   535,   536,   537,   538,   539,     0,   540,
     541,   542,   543,   544,   545,     0,   546,     0,   547,   548,
     549,   550,   551,   552,  -816,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -968,     0,     0,     0,     0,
    -968,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -968,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -968,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,   554,
       0,     0,     0,     0,   555,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -816,     0,     0,     0,     0,     0,     0,    38,
       0,     0,     0,   556,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -968,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -968,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -968,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   557,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   559,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,     0,
    -968,  -968,  -968,  -968,  -968,     0,  -968,  -968,  -968,  -968,
    -968,  -968,  -968,  -968,  -968,  -968,  -968,  -968,  -968,  -968,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -968,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -988,   514,     0,  -816,  -816,  -816,  -816,  -816,     0,
    -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,  -816,
    -816,  -816,  -816,  -816,  -988,  -988,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -816,     0,     0,     0,     0,  -988,  -988,     0,  -988,     0,
       0,     0,  -988,     0,     0,   517, -1472,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1472,
   -1472,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1472, -1472,     0, -1472,     0,     0,     0, -1472,     0,     0,
     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   518,     0,  -988,     0,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
       0,   532,   533,   534,   535,   536,   537,   538,   539,     0,
     540,   541,   542,   543,   544,   545,     0,   546,     0,   547,
     548,   549,   550,   551,   552,  -988,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   553,   518,     0,
   -1472,     0,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,     0,   532,   533,   534,   535,
     536,   537,   538,   539,     0,   540,   541,   542,   543,   544,
     545,     0,   546,     0,   547,   548,   549,   550,   551,   552,
   -1472,     0,     0,     0, -1351,   514,     0,     0,     0,     0,
       0,     0,   553,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1351, -1351,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1351, -1351,
       0, -1351,     0,     0,     0, -1351,     0,     0,   517,     0,
     554,     0,     0,     0,     0,   555,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -988,     0,     0,     0,     0,     0, -1515,
     514,     0,     0,     0,   556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1515, -1515,     0,   554,     0,     0,     0,     0,
     555,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1515, -1515,     0, -1515,     0, -1472,     0,
   -1515,     0,     0,   517,     0,     0,   518,     0, -1351,   556,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   532,   533,   534,   535,   536,   537,
     538,   539,     0,   540,   541,   542,   543,   544,   545,     0,
     546,     0,   547,   548,   549,   550,   551,   552, -1351,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   518,   557, -1515,     0,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,     0,   532,
     533,   534,   535,   536,   537,   538,   539,   558,   540,   541,
     542,   543,   544,   545,     0,   546,     0,   547,   548,   549,
     550,   551,   552, -1515,     0,     0,   559,     0,     0,     0,
       0,     0,     0,     0,     0,   553,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   554,     0,     0,     0,     0,   555,     0,
       0,     0,   558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1351,     0,     0,     0,
       0,   559,     0,     0,     0,     0,     0,   556,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   554,     0,
       0,     0,     0,   555,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1515,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   556,     0,     0,  -988,  -988,  -988,  -988,  -988,
       0,  -988,  -988,  -988,  -988,  -988,  -988,  -988,  -988,  -988,
    -988,  -988,  -988,  -988,  -988,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -988,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,
   -1472, -1472, -1472, -1472, -1472,     0, -1472, -1472, -1472, -1472,
   -1472, -1472, -1472, -1472, -1472, -1472, -1472, -1472, -1472, -1472,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1472,     0,     0,   559,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     557,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   559,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -634,   514,     0, -1351, -1351,
   -1351, -1351, -1351,     0, -1351, -1351, -1351, -1351, -1351, -1351,
   -1351, -1351, -1351, -1351, -1351, -1351, -1351, -1351,  -634,  -634,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1351,     0,     0,     0,     0,  -634,
    -634,     0,  -634,     0,     0,     0,  -634,     0,     0,   517,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -833,   514,     0, -1515, -1515, -1515, -1515, -1515,     0, -1515,
   -1515, -1515, -1515, -1515, -1515, -1515, -1515, -1515, -1515, -1515,
   -1515, -1515, -1515,  -833,  -833,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1515,
       0,     0,     0,     0,  -833,  -833,     0,  -833,     0,     0,
       0,  -833,     0,     0,   517,     0,     0,   518,     0,  -634,
       0,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,     0,   532,   533,   534,   535,   536,
     537,   538,   539,     0,   540,   541,   542,   543,   544,   545,
       0,   546,     0,   547,   548,   549,   550,   551,   552,  -634,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   553,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   518,     0,  -833,     0,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,     0,
     532,   533,   534,   535,   536,   537,   538,   539,     0,   540,
     541,   542,   543,   544,   545,     0,   546,     0,   547,   548,
     549,   550,   551,   552,  -833,     0,     0,     0,  -989,   514,
       0,     0,     0,     0,     0,     0,   553,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -989,  -989,     0,   554,     0,     0,     0,     0,   555,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -989,  -989,     0,  -989,     0,  -634,     0,  -989,
       0,     0,   517, -1471,   514,     0,     0,     0,   556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1471, -1471,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1471, -1471,     0,
   -1471,     0,     0,     0, -1471,     0,     0,   517,     0,   554,
       0,     0,     0,     0,   555,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -833,     0,     0,     0,     0,     0,     0,     0,
     518,     0,  -989,   556,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,     0,   532,   533,
     534,   535,   536,   537,   538,   539,     0,   540,   541,   542,
     543,   544,   545,     0,   546,     0,   547,   548,   549,   550,
     551,   552,  -989,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,   518,   557, -1471,     0,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,   532,   533,   534,   535,   536,   537,   538,
     539,   558,   540,   541,   542,   543,   544,   545,     0,   546,
       0,   547,   548,   549,   550,   551,   552, -1471,     0,     0,
     559,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   557,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,     0,     0,
       0,     0,   555,     0,     0,     0,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -989,     0,     0,     0,     0,   559,     0,     0,     0,     0,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,     0,   555,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1471,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   556,     0,     0,  -634,
    -634,  -634,  -634,  -634,     0,  -634,  -634,  -634,  -634,  -634,
    -634,  -634,  -634,  -634,  -634,  -634,  -634,  -634,  -634,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -634,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   557,
       0,     0,   514,     0,  -833,  -833,  -833,  -833,  -833,     0,
    -833,  -833,  -833,  -833,  -833,  -833,  -833,  -833,  -833,  -833,
    -833,  -833,  -833,  -833,   558,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -833,     0,     0,   559,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,   517,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   559,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   518,     0,     0,     0,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
       0,   532,   533,   534,   535,   536,   537,   538,   539,     0,
     540,   541,   542,   543,   544,   545,     0,   546,     0,   547,
     548,   549,   550,   551,   552,     0,     0,     0,     0, -1194,
     514,     0,  -989,  -989,  -989,  -989,  -989,   553,  -989,  -989,
    -989,  -989,  -989,  -989,  -989,  -989,  -989,  -989,  -989,  -989,
    -989,  -989, -1194, -1194,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -989,     0,
       0,     0,     0, -1194, -1194,     0, -1194,     0,     0,     0,
   -1194,     0,     0,   517, -1305,   514,     0, -1471, -1471, -1471,
   -1471, -1471,     0, -1471, -1471, -1471, -1471, -1471, -1471, -1471,
   -1471, -1471, -1471, -1471, -1471, -1471, -1471, -1305, -1305,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1471,     0,     0,     0,     0, -1305, -1305,
       0, -1305,     0,     0,     0, -1305,     0,     0,   517,     0,
     554,     0,     0,     0,     0,   555,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   518,     0, -1194,   556,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,     0,   532,
     533,   534,   535,   536,   537,   538,   539,     0,   540,   541,
     542,   543,   544,   545,     0,   546,     0,   547,   548,   549,
     550,   551,   552, -1194,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   553,   518,     0, -1305,     0,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,     0,   532,   533,   534,   535,   536,   537,
     538,   539,     0,   540,   541,   542,   543,   544,   545,     0,
     546,  1587,   547,   548,   549,   550,   551,   552, -1305,     0,
       0,     0, -1516,   514,     0,     0,     0,     0,     0,     0,
     553,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1516, -1516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   557,     0,     0,     0, -1516, -1516,     0, -1516,
       0,     0,     0, -1516,     0,     0,   517,     0,   554,     0,
       0,     0,     0,   555,     0,     0,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1194,     0,     0,     0,     0,   559, -1198,   514,     0,
       0,     0,   556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1198, -1198,     0,   554,     0,     0,     0,     0,   555,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1198, -1198,     0, -1198,     0, -1305,     0, -1198,     0,
       0,   517,     0,     0,   518,     0, -1516,   556,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,     0,   532,   533,   534,   535,   536,   537,   538,   539,
       0,   540,   541,   542,   543,   544,   545,     0,   546,     0,
     547,   548,   549,   550,   551,   552, -1516,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   553,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   518,
     557, -1198,     0,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,     0,   532,   533,   534,
     535,   536,   537,   538,   539,   558,   540,   541,   542,   543,
     544,   545,     0,   546,     0,   547,   548,   549,   550,   551,
     552, -1198,     0,     0,   559,     0,     0,     0,     0,     0,
       0,     0,     0,   553,     0,   557,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   554,     0,     0,     0,     0,   555,     0,     0,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1516,     0,     0,     0,     0,   559,
       0,     0,     0,     0,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   554,     0,     0,     0,
       0,   555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1198,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     556,     0,     0, -1194, -1194, -1194, -1194, -1194,     0, -1194,
   -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194, -1194,
   -1194, -1194, -1194,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1194,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   557,     0,     0,   514,     0, -1305, -1305,
   -1305, -1305, -1305,     0, -1305, -1305, -1305, -1305, -1305, -1305,
   -1305, -1305, -1305, -1305, -1305, -1305, -1305, -1305,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1305,     0,     0,   559,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   517,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   559,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   518,     0,     0,
       0,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,     0,   532,   533,   534,   535,   536,
     537,   538,   539,     0,   540,   541,   542,   543,   544,   545,
       0,   546,     0,   547,   548,   549,   550,   551,   552, -1289,
       0,     0,     0, -1226,   514,     0, -1516, -1516, -1516, -1516,
   -1516,   553, -1516, -1516, -1516, -1516, -1516, -1516, -1516, -1516,
   -1516, -1516, -1516, -1516, -1516, -1516, -1226, -1226,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1516,     0,     0,     0,     0, -1226, -1226,     0,
   -1226,     0,     0,     0, -1226,     0,     0,   517,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -830,   514,
       0, -1198, -1198, -1198, -1198, -1198,     0, -1198, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198,  -830,  -830,     0,   554,     0,     0,     0,     0,   555,
       0,     0,     0,     0,     0,     0,     0, -1198,     0,     0,
       0,     0,  -830,  -830,     0,  -830,     0,     0,     0,  -830,
       0,     0,   517,     0,     0,   518,     0, -1226,   556,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,   532,   533,   534,   535,   536,   537,   538,
     539,     0,   540,   541,   542,   543,   544,   545,     0,   546,
       0,   547,   548,   549,   550,   551,   552, -1226,     0,     0,
       0,     0,     0,     0,   514,     0,     0,     0,     0,   553,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     518,     0,  -830,     0,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   517,   532,   533,
     534,   535,   536,   537,   538,   539,     0,   540,   541,   542,
     543,   544,   545,     0,   546,     0,   547,   548,   549,   550,
     551,   552,  -830,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   553,     0,   557,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,     0,   555,     0,     0,
       0,   558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1226,     0,     0,     0,     0,
     559,     0,     0,     0,     0,   518,   556,     0,     0,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,   532,   533,   534,   535,   536,   537,   538,
     539,     0,   540,   541,   542,   543,   544,   545,     0,   546,
       0,   547,   548,   549,   550,   551,   552,  1911,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   554,     0,   553,
       0,     0,   555,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -830,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1097,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,  1015,     0,     0,   555, -1097,   558,
       0,     0,     0,     0,     0,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   559,     0,
       0,     0,     0,     0,     0,     0,   556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,   557,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   558,     0, -1097,     0,     0,     0,
   -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097, -1097,   559, -1097, -1097, -1097, -1097, -1097, -1097,
   -1097, -1097,     0, -1097, -1097, -1097, -1097, -1097, -1097,     0,
   -1097,     0, -1097, -1097, -1097, -1097, -1097, -1097,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
   -1097,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   557,     0,     0, -1226, -1226, -1226,
   -1226, -1226,     0, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226,     0,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1226,     0,     0,     0,     0,   559,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1097,     0,     0,     0,     0, -1097,     0,
       0,     0,  -830,  -830,  -830,  -830,  -830,     0,  -830,  -830,
    -830,  -830,  -830,  -830,  -830,  -830,  -830,  -830,  -830,  -830,
    -830,  -830,     0,     0,     0,     0,     0, -1097,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,  -830,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   820,   499,   845,     0,     0,     0,
       0,     0,     0,   846,     0,     0,     0,     0, -1791,     0,
       0,     0,     0,     0,     0,   501,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,   847,   848,   849,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1097,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1097,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1097,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,    42,     0,     0,    43,   850,     0,
       0,     0,     0,     0, -1791,     0,     0,     0,     0,     0,
       0, -1623,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1016,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1017,     0,     0,
     701,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1097,     0,   796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   502,
       0,     0,     0,     0,     0,     0,     0,     0,   821,   822,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,   499,   845,     0,     0,     0,     0,     0,
       0,   846,     0,   851,     0,     0,     0,     0,     0,     0,
       0,  2383,     0,   501,     0,     0,   514,     0,     0,     0,
       0,     0,     0,   503,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   504,     0,     0,     0,
       0,     0,   847,   848,   849,     0,     0,     0,    40,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,   517,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,   850,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,   518,     0,     0,
      35,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,     0,   532,   533,   534,   535,   536,
     537,   538,   539,     0,   540,   541,   542,   543,   544,   545,
       0,   546,     0,   547,   548,   549,   550,   551,   552,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   553,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   852,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   502,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,   554,     0,     0,     0,    37,   555,
       0,   499,   845,     0,     0,     0,     0, -1623,     0,   846,
       0,   851,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   501,     0,     0,   514,     0,     0,     0,   556,     0,
       0,   503,     0,     0,    38,     0,     0,     0,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   504,     0,     0,     0,     0,     0,
     847,   848,   849,     0,     0,     0,    40,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,   517,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   505,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,  2014,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,   850,     0,     0,     0,     0,     0,
       0,    42,     0,     0,    43,   518,   557,     0,    35,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,     0,   532,   533,   534,   535,   536,   537,   538,
     539,   558,   540,   541,   542,   543,   544,   545,     0,   546,
       0,   547,   548,   549,   550,   551,   552,     0,     0,     0,
     559,     0,     0,     0,     0,     0,     0,     0,     0,   553,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   852,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   502,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,   554,     0,     0,     0,    37,   555,     0,   499,
     845,     0,     0,     0,     0,  2344,     0,   846,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   501,
       0,     0,   514,     0,     0,     0,   556,     0,     0,   503,
       0,     0,    38,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   504,     0,     0,     0,     0,     0,   847,   848,
     849,     0,     0,     0,    40,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,   517,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,  2233,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,   850,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,   518,   557,     0,    35,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
       0,   532,   533,   534,   535,   536,   537,   538,   539,   558,
     540,   541,   542,   543,   544,   545,     0,   546,     0,   547,
     548,   549,   550,   551,   552,     0,     0,     0,   559,     0,
       0,     0,     0,     0,     0,     0,     0,   553,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   852,   796,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   502,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
     554,     0,     0,     0,    37,   555,     0,   499,   845,     0,
       0,     0,     0,  2376,     0,   846,     0,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   501,     0,     0,
       0,     0,     0,     0,   556,     0,     0,   503,     0,     0,
      38,     0,     0,     0,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     504,     0,     0,     0,     0,     0,   847,   848,   849,     0,
       0,     0,    40,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
     850,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,   557,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   559,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     852,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   502,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,   499,   845,     0,     0,     0,
       0,  2378,     0,   846,     0,   851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   501,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,     0,     0,    38,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   504,     0,
       0,     0,     0,     0,   847,   848,   849,     0,     0,     0,
      40,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   505,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,   850,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   852,   796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   502,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,   499,   845,     0,     0,     0,     0,  2380,
       0,   846,     0,   851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   503,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   504,     0,     0,     0,
       0,     0,   847,   848,   849,     0,     0,     0,    40,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,   850,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   852,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   502,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,   499,   845,     0,     0,     0,     0,  2558,     0,   846,
       0,   851,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   501,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   503,     0,     0,    38,     0,     0,     0,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   504,     0,     0,     0,     0,     0,
     847,   848,   849,     0,     0,     0,    40,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   505,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,   850,     0,     0,     0,     0,     0,
       0,    42,     0,     0,    43,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   852,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   502,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,  2567,     0,     0,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   503,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,  2111,     0,     0,
       0,     0,   504,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   505,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   852,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2678,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      28,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,  2111,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  2346,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,  2111,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   798,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,   800,     0,     0,     0,     0,     0,
       0,     0,   801,  2387,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      28,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  2413,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   798,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,   800,     0,     0,     0,     0,     0,
       0,     0,   801,  1212,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      28,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  1763,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   798,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,   800,     0,     0,     0,     0,     0,
       0,     0,   801,  2359,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      28,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  2361,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   798,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,   800,     0,     0,     0,     0,     0,
       0,     0,   801,  2404,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      28,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  2546,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   798,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,   800,     0,     0,     0,     0,     0,
       0,     0,   801,  2548,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
      28,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,   795,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  2554,     0,
       0,     0,     0,     0,     0,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,    28,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   798,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   799,   800,     0,     0,     0,     0,     0,
       0,     0,   801,  2580,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
       0,    28,   907,    39,     0,     0,     0,     0,     0,     0,
       0,     0, -1713, -1713,     0,     0,     0,     0,     0,  2285,
     792,     0,     0,     0,     0,     0,  2286,     0,     0,    40,
     987,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,   988,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2287,     0,    35,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1004,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   801,  2673,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1713,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     797,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1713,     0,     0,    38,     0,     0,     0,    28,   907,    39,
       0,     0,     0,     0,     0,     0,     0,     0, -1713, -1713,
       0,     0,     0, -1713,     0,     0,   792,     0,     0,     0,
       0,     0,     0,     0,     0,    40,   987,     0,   793,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1005,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,   988,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   798,     0,   795,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   989,  1572,  1573,
    1574,  1575,  1576,  1577,   799,   800,     0,     0,     0,     0,
       0,     0,     0,  2288,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   797,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1713,     0,     0,    38,
       0,     0,     0,    28,   907,    39,     0,     0,     0,     0,
       0,     0,     0,     0, -1713, -1713,     0,     0,     0, -1713,
       0,     0,   792,     0,     0,     0,     0,     0,     0,     0,
       0,    40,   987,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   988,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   798,
       0,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   989,  1572,  1573,  1574,  1575,  1576,  1577,
     799,   800,     0,     0,     0,     0,     0,     0,     0,   990,
       0,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1713,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,    38,     0,     0,    28,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0, -1713,
   -1713,     0,     0,     0,     0, -1713,     0,   792,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1713,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,   988,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   798,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   989,
    1572,  1573,  1574,  1575,  1576,  1577,   799,   800,     0,     0,
       0,     0,     0,     0,     0,  2288,     0,     0,     0,     0,
       0,     0,     0,   796,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   797,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
      38,     0,     0,    28,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0, -1713, -1713,     0,     0,     0,     0,
   -1713,     0,   792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1713,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   988,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     798,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1560,  1572,  1573,  1574,  1575,  1576,
    1577,   799,   800,     0,     0,     0,     0,     0,     0,     0,
    1989,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1713,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,    38,     0,     0,    28,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0, -1713,
   -1713,     0,     0,     0,     0, -1713,     0,   792,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1713,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,   988,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   798,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1560,
    1572,  1573,  1574,  1575,  1576,  1577,   799,   800,     0,     0,
       0,     0,     0,     0,     0,  2498,     0,     0,     0,     0,
       0,     0,     0,   796,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   797,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
      38,     0,     0,    28,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0, -1713, -1713,     0,     0,     0,     0,
   -1713,     0,   792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1713,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   988,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     798,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1560,  1572,  1573,  1574,  1575,  1576,
    1577,   799,   800,     0,     0,     0,     0,     0,     0,     0,
    2500,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1713,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,    38,     0,     0,    28,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0, -1713,
   -1713,     0,     0,     0,     0, -1713,     0,   792,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1713,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,   988,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   798,   795,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1560,
    1572,  1573,  1574,  1575,  1576,  1577,   799,   800,     0,     0,
       0,     0,     0,     0,     0,   801,     0,     0,     0,     0,
       0,     0,     0,   796,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   797,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
      38,     0,     0,    28,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0, -1713, -1713,     0,     0,     0,     0,
   -1713,     0,   792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1713,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,   988,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     798,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1560,  1572,  1573,  1574,  1575,  1576,
    1577,   799,   800,     0,     0,     0,     0,     0,     0,     0,
    2633,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1713,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,    28,   907,     0,     0,     0,
       0,     0,     0,     0,     0, -1713, -1713, -1713,     0,     0,
       0,     0,     0,     0,   792,     0,     0,    40,     0,     0,
       0,     0,     0,     0,   987,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1713,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,   988,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   798,     0,     0,     0,     0,
       0,     0,     0,   795,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1560,
    1572,  1573,  1574,  1575,  1576,  1577,   799,   800,     0,     0,
    1004,     0,     0,     0,     0,  2637,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1713,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   797,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1713,     0,     0,    38,     0,     0,
       0,    28,   907,    39,     0,     0,     0,     0,     0,     0,
       0,     0, -1713, -1713,     0,     0,     0, -1713,     0,     0,
     792,     0,     0,     0,     0,     0,     0,     0,     0,    40,
     987,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1713,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1005,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,   988,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   798,     0,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   989,     0,     0,     0,     0,     0,     0,   799,   800,
       0,     0,     0,     0,     0,     0,     0,   990,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1713,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     797,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1713,     0,     0,    38,     0,     0,     0,    28,   907,    39,
       0,     0,     0,     0,     0,     0,     0,     0, -1713, -1713,
       0,     0,     0, -1713,     0,     0,   792,     0,     0,     0,
       0,     0,     0,     0,     0,    40,   987,     0,   793,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,   988,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   798,     0,   795,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   989,     0,     0,
       0,     0,     0,     0,   799,   800,     0,     0,     0,     0,
       0,     0,     0,   990,     0,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   797,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1713,     0,     0,    38,
       0,     0,    28,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0, -1713, -1713,     0,     0,     0,     0, -1713,
       0,   792,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,   793,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,   988,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   798,
     795,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1560,     0,     0,     0,     0,     0,     0,
     799,   800,     0,     0,     0,     0,     0,     0,     0,  1561,
       0,     0,     0,     0,     0,     0,     0,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   797,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1713,     0,     0,    38,     0,     0,    28,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0, -1713, -1713,
       0,     0,     0,     0, -1713,     0,   792,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,   793,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1713,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,   988,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   798,   795,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1560,     0,
       0,     0,     0,     0,     0,   799,   800,     0,     0,     0,
       0,     0,     0,     0,  1569,     0,     0,     0,     0,     0,
       0,     0,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   499,   500,     0,
       0,     0,     0,    37,     0,  1176,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   797,   501,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1713,     0,     0,    38,
       0,     0,     0,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1713,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1713,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,    42,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   798,
       0,   502,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,  1560,     0,     0,     0,     0,     0,     0,
     799,   800,     0,     0,     0,  2433,     0,     0,     0,   801,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,     0,     0,    38,     0,
       0,    28,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,  2428,     0,     0,     0,     0,   504,     0,
     792,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   505,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,  2434,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1177,
    1178,     0,     0,     0,     0,     0,     0,     0,  1179,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     797,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    28,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
       0,     0,     0,  2429,     0,    40,     0,   793,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
     794,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   798,   795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   799,   800,     0,     0,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   797,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    28,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,  2111,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   798,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   799,
     800,     0,     0,     0,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     797,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    28,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,  2707,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,   793,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   798,   795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   799,   800,     0,     0,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   797,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,    28,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     792,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   798,   795,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   799,
     800,     0,     0,     0,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     797,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,    28,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,   793,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   798,   795,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   799,   800,     0,     0,     0,     0,
       0,     0,     0,   801,    28,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,    29,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   797,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,    30,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,    36,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   798,    28,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,   801,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,   115,     0,    37,   793,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,  1961,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   820,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1962,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,   793,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,   821,   822,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   820,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1962,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1713, -1713,     0,     0,     0,     0,     0,     0,
   -1713,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,     0, -1713,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,   773,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,   821,   822,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   884,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1713,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1713,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1713,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1713,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     499,     0,     0,     0,     0,     0,     0,     0,   792,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
     793,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0, -1713, -1713,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1927,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   502,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   792,   820,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   793,
       0,     0,     0,     0,     0,     0,     0,     0,   503,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1928,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   505,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,  1929,     0,   796,     0,  1348,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,   822,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   820,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   792,     0,    42,     0,     0,
      43,     0,     0,     0,     0,     0,     0,   793,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1349,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,   821,   822,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   819,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   796,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,   888,     0,     0,
       0,     0,     0,     0,   792,   820,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   821,
     822,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   820,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,   821,   822,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   932,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   792,   820,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   793,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,     0,  1507,   796,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,   821,   822,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     792,   820,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   793,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    38,     0,     0,     0,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,    43,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,     0,     0,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      28,     0,     0,     0,     0,   821,   822,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   792,
     820,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1817,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     0,  1951,   796,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,     0,     0,   821,   822,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   792,   820,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     793,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,     0,     0,   796,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   792,     0,     0,     0,     0,     0,
       0,     0,     0,   821,   822,    37,   793,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   820,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   876,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   820,     0,     0,     0,     0,     0,
       0,    28,   821,   822,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   845,     0,     0,     0,    38,     0,     0,
     846,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   847,   848,   849,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   821,   822,
       0,     0,     0,     0,  1358,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   304,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1721,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     0,  1359,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,   499,   845,     0,     0,
       0,     0,     0,     0,   846,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,     0,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   847,   848,   849,     0,  1830,
       0,    40,     0,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0, -1721,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,   850,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1721,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,  1831,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     502,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,   499,   845,     0,     0,     0,     0,
       0,     0,   846,     0,   851,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   501,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   503,     0,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   504,     0,     0,
       0,     0,     0,   847,   848,   849,     0,     0,     0,    40,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   505,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   852,   796,    28,
       0,     0,     0,     0,     0,     0,     0,     0,   502,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   851,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   503,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,   504,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,   304,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1721,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   852,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1830,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0, -1721,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    28,   907,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1721,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,  1831,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   908,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,   909,     0,     0,     0,   910,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,    28,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   792,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,   793,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     911,   795,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   797,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,     0,     0,
      30,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,    36,     0,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1483,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   798,    28,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
    1484,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   304,     0,    36,  1485,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   911,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,    30,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1830,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,    36,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,  1831,    28,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1830,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,  1831,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,   499,   921,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   501,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   949,   796,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   502,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   499,  2256,     0,     0,     0,
       0,     0,  1501,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   501,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   503,     0,     0,    38,
       0,     0,     0,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   504,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   505,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,     0,     0,     0,    42,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   502,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,   499,  1904,     0,     0,     0,     0,     0,     0,
    2688,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   501,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   503,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   504,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,  2257,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   796,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   502,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   499,
     500,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   501,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     503,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   504,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   505,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   502,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,   499,   921,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   501,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   503,     0,     0,
      38,     0,     0,     0,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     504,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     502,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    28,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,   499,  1904,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   501,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   503,     0,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   504,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   505,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   796,    28,     0,
       0,     0,     0,     0,     0,     0,     0,   502,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1791,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   503,     0,     0,    38,     0,     0,     0,     0,     0,
      39,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,   504,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   505,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,    43,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,   745,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,     0,     0,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,    35,     0,  2492,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   701,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   872,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   746,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1198,  1199,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   955,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   872,     0,    42,     0,     0,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1399,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,  2475,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   872,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,  2585,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    28,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,     0,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   831,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,   872,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    30,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    31,
      32,    33,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,    35,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    28,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
       0,     0,     0,    39,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    31,    32,    33,    34,     0,
       0,     0,     0,     0,     0,   903,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    42,     0,     0,    43,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,     0,     0,
       0,     0,   919,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      42,     0,     0,    43,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    28,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,   937,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
       0,     0,     0,     0,     0,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    42,     0,     0,    43,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   796,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1472,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,  1863,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    28,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2034,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
       0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    31,    32,    33,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
    2241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    38,     0,     0,     0,     0,     0,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    30,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    31,    32,    33,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    42,     0,     0,    43,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    28,   907,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      38,     0,     0,     0,     0,     0,    39,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    31,    32,
      33,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    42,     0,     0,
      43,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      28,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,     0,  2613,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,     0,
       0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    30,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    31,    32,    33,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    28,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    38,     0,     0,     0,     0,     0,    39,     0,
       0,     0,     0,     0,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,    32,    33,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
       0,     0,    43,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,     0,    28,     0,     0,     0,     0,     0,     0,
       0,     0,    37,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
       0,     0,     0,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    42,     0,     0,    43,     0,
       0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   796,    28,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,     0,     0,     0,
       0,    39,     0,     0,     0,     0,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    31,    32,    33,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    42,     0,     0,    43,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    38,     0,     0,     0,     0,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1214,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1215,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
       0,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1216,  1217,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,  1218,     0,  1219,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1220,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1221,     0,
       0,  1222,     0,  1223,     0,     0,     0,  1224,  1225,     0,
       0,  1226,     0,     0,     0,  1227,     0,     0,     0,  1228,
    1229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1230,     0,     0,     0,     0,     0,  1231,     0,     0,     0,
       0,     0,     0,  1232,     0,     0,  1233,     0,     0,     0,
    1234,     0,     0,     0,  1235,  1236,     0,     0,  1237,     0,
    1238,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1239,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1240,  1241,     0,
       0,  1242,  1243,  1244,  1245,  1246,  1247,  1248,     0,     0,
       0,     0,     0,     0,     0,  1249,     0,     0,     0,     0,
    1250,  1251,  1252,  1253,     0,     0,  1254,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1255,  1256,     0,  1257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1258,  1259,  1260,  1261,  1262,  1263,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1264,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1265,  1266,  1267,  1268,     0,     0,     0,     0,  1269,
    1270,  1271,     0,  1272,     0,     0,  1273,  1274,  1275,  1276,
    1277,     0,  1278,     0,  1279,     0,     0,     0,     0,  1280,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1281,
    1282,  1283,     0,     0,     0,     0,     0,     0,     0,     0,
    1284,     0,  1285,  1286,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1287,     0,     0,     0,  1288,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1289,  1290,  1291,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1292,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1293,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1294,  1295,     0,     0,     0,     0,     0,     0,  1296,  1297,
       0,  1298,     0,     0,     0,  1299,     0,     0,     0,  1300,
    1301,     0,     0,  1302,  1303,     0,     0,     0,     0,     0,
    1304,     0,     0,  1305,  1306,  1307,  1308,  1309,  1310,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1311,
       0,     0,     0,     0,     0,  1312,     0,     0,     0,     0,
       0,     0,     0,  1313,  1314,     0,     0,  1315,  1316,     0,
    1317,  1318,  1319,     0,  1320,     0,     0,  1321,     0,     0,
       0,     0,     0,  1322
};

static const yytype_int16 yycheck[] =
{
     126,   127,   309,    14,    15,   533,   545,   558,   588,  1030,
     534,   236,   679,   705,   706,   727,   527,   467,   898,   906,
     774,   465,   338,   878,   887,  1137,   748,   820,  1081,  1126,
     558,   542,   158,   159,   160,  1059,   512,  1084,   382,   550,
     269,   561,   913,    15,   971,   561,   999,   354,     1,   600,
     176,   887,   561,     1,   981,  1912,   990,    45,   851,  1567,
    1568,    18,    47,   970,    50,   191,   291,    47,    45,     1,
      47,    23,   600,    22,    47,    17,    44,   306,   564,    47,
    1141,    44,    20,    21,    18,   354,     1,   537,    18,    32,
     916,    50,  1458,    58,   208,  1002,    34,    35,    36,    57,
     209,    18,    18,    41,   800,    22,    22,  1619,   234,   920,
      42,    43,    33,   159,    12,     3,   268,    43,    50,   994,
     732,  1028,  1651,  1652,    50,   645,   361,   144,    30,   645,
      62,  1669,  1156,   144,  1061,    31,   645,    31,   371,    31,
       7,    50,     9,    10,    11,    42,    43,    49,    30,    23,
      60,    25,   520,    50,    56,   194,    42,    43,   301,    30,
      62,   529,   174,   363,    50,    62,  1492,  1003,   218,  1495,
     538,   124,   144,  1872,   316,    31,    62,   242,   240,   230,
      31,   549,   231,     7,   421,     9,    10,    11,   532,   209,
     174,   498,   246,  1425,  1426,   749,    98,   751,   350,   240,
     184,    17,   436,   240,   648,   331,   549,    30,   379,   258,
      31,   195,   519,   520,   340,   522,   523,   253,   525,    44,
      31,   528,   529,   317,   523,   529,    49,   534,   253,   394,
     537,   538,   600,    56,   538,  1348,  1349,    54,   545,    62,
     547,    58,   549,   174,   551,   418,   553,    43,   143,   556,
     424,   246,   377,   184,   394,   799,   600,   383,   384,   378,
      62,   338,   258,   195,   195,   317,   350,   281,  2385,   377,
     240,   336,    50,  1386,   281,    98,   326,   286,   547,   830,
     418,  2398,   184,   421,   339,   214,   308,   488,     1,   739,
     106,  1833,   418,   600,   359,    30,   600,   231,   162,   425,
    1878,   203,   830,   550,   293,   431,   324,   459,   434,   435,
      23,   893,  2113,   657,    49,   441,   371,   339,  1431,   355,
     902,    56,   333,   874,   258,   195,   246,    62,   454,  1200,
     355,   240,   316,     0,   581,   371,   233,   463,   349,   353,
     466,  1707,   494,  2144,   470,   201,   874,   431,  1372,   550,
     162,   168,   525,   935,   878,   364,   374,   257,   376,   288,
     942,  1939,    23,    98,  2165,  1943,   308,  1479,   445,   143,
     240,    23,   883,   912,   125,   198,   199,   200,   437,    31,
      42,    43,   184,   502,   195,   316,   989,   436,   899,   284,
      51,   207,   544,   218,  1507,   998,   505,   339,   463,   464,
     540,    31,   126,   127,   220,   396,   327,   581,   338,   463,
     258,   227,   646,   507,   346,   586,   558,   213,   652,   316,
     284,   586,   214,  1177,  1178,  1179,   335,  1793,   393,  1971,
     555,   480,   669,   338,  2551,   476,  1802,   913,   463,  1805,
    1347,   477,   357,   176,   177,   789,   338,   555,   586,   346,
    1357,   819,   477,   821,   822,   507,   279,   825,   512,   659,
     346,   262,   240,   198,   199,   200,    31,   700,   400,   371,
    1341,   371,   284,    42,    43,   371,   819,   650,   651,    42,
      43,    50,   379,   380,   480,   505,   525,    50,   550,    42,
      43,   423,   308,    62,   380,  1162,   288,    50,   319,    62,
     551,   293,   436,   400,  2203,   774,  1377,   377,   218,  1875,
     284,  2023,   819,   550,   400,  1211,   367,   512,   825,   887,
     230,   825,  1134,   339,   195,   651,   423,   653,  2066,   836,
     215,   433,   581,   840,   878,   467,   586,   836,   550,   433,
     586,   506,  1417,   850,   279,  1452,   480,   690,   371,   856,
     373,   433,  1878,   445,  1920,   371,   472,   335,  1511,   415,
     246,   377,   433,   689,   932,   933,   550,   488,  1431,   443,
     467,   878,   350,   725,   462,   882,  1463,   884,   504,   586,
     815,   467,   267,   709,   710,   581,   712,   931,   714,   932,
     704,   700,   512,  1500,   492,   586,  1523,   586,   503,  1696,
    1154,   908,   425,   910,   730,   564,  1160,   550,   424,   916,
     433,   737,  1423,   765,   430,  1676,   326,   574,   925,   550,
     562,  1484,   587,   521,   522,   932,   933,  1561,   586,   933,
    1537,   525,   480,  1567,  1568,   700,   371,   453,   373,   506,
     550,   550,   434,   950,   574,   797,   463,   581,  1484,  1017,
    1882,  1883,  1884,   623,  1022,   550,   925,  1107,  1484,   574,
    1523,   558,   478,   376,   233,  1209,  1210,   684,   820,   586,
     586,   688,   689,   690,   691,   692,   693,   550,  1022,  1023,
    1024,  1025,   506,   583,   346,   555,   647,   488,   637,   505,
     425,  1141,  1599,   353,   682,   210,   676,   682,   433,   851,
     516,   674,   420,  1610,  1817,   682,   674,     4,   694,   695,
    1017,   674,   664,  1017,   488,  1022,   700,   703,  1022,   535,
     637,   637,   393,   383,   694,   695,   696,   697,   698,   336,
     594,  1242,  1399,   581,   419,  1692,   537,   294,   400,   555,
     518,   474,   307,   700,   608,   561,   562,   700,   434,   613,
     614,   903,   700,   474,  2611,   476,   474,   573,   395,   253,
     624,   423,   694,   695,   702,   581,   700,   253,   584,   327,
     494,   703,   550,  2281,  2282,   213,   550,   346,  2490,  2491,
    2492,   403,   594,   346,   421,   687,   688,   689,   690,   691,
     692,   693,   357,   346,   586,  1842,   608,   694,   695,  1373,
    1351,   613,   614,   231,   369,   467,   703,   531,   694,   695,
     379,   380,   624,   195,   169,   887,  1336,  1133,     1,   550,
    1336,   481,   350,  1351,    42,    43,   512,  1336,   701,    42,
      43,   400,    50,  1669,  2509,   506,   700,   400,  1951,   524,
     195,   551,   479,   574,    62,   214,   371,   400,  1324,   265,
    2216,   175,   474,   513,   423,   462,   371,     1,   240,   194,
     423,   355,    14,    15,   687,   318,    31,   552,  1137,   355,
     286,    42,    43,  1447,   402,  1144,   586,  1146,     0,    50,
     445,   704,   324,   844,   700,    50,  1460,   222,   574,  1469,
    1197,    62,    14,    15,    16,  1202,  2008,   335,   467,    43,
     201,  1425,  1426,   431,   467,   206,    50,   432,  1060,   434,
    1062,   468,  1819,   228,   467,    59,   587,   370,  1942,   288,
     103,  1828,   640,   194,  1153,    31,   242,   485,   565,  1081,
     245,   232,  1058,    31,   376,  1509,  2465,  1063,   366,   900,
    1066,  1067,   324,  1069,  1455,   568,  1520,   958,    43,   586,
    2479,   222,   687,  1079,   269,    50,   513,  1560,  2633,  1085,
     583,  1087,  2637,   395,  1567,  1568,  1569,  1119,  1711,  1712,
    1713,  1415,  1340,  1346,  1418,   597,     0,  1103,  1104,   465,
    2077,  1349,  2079,   477,   353,  2514,   958,  1113,  1895,   421,
    2498,   477,  2500,  1366,   318,   377,  1750,  1751,  1752,  1753,
      52,    53,    31,   174,  1130,    57,  1482,  1964,  1965,  1382,
     223,  1918,  1919,   184,  1736,    42,    43,  1385,  1386,  1363,
     336,   549,  1602,    50,   195,  1880,  1881,   184,   586,   198,
     199,   200,  1985,  1340,  1961,    62,  1340,  1704,  2766,   194,
    1947,  1348,  1349,   359,  1196,  1349,   370,   307,  2760,  2761,
    1957,  2779,  1538,  1360,  1361,  2008,   371,  1430,  2587,   203,
     375,   218,  1794,  1431,  2177,  1137,   421,   222,   700,  1413,
    1621,   386,  1379,   218,  1146,   186,  1383,  1384,  1385,  1386,
    1812,  1385,  1386,  2196,  2197,   230,  1393,  2453,  2617,     0,
    2456,   286,   700,  1621,   201,    31,   184,   357,  1961,   206,
     207,   125,  1588,   155,   281,    16,   217,    43,   203,   369,
     279,  2224,   838,   414,   415,   203,  1484,   586,  1425,  1426,
     297,  2650,   231,    31,  1431,   694,   695,  1431,   346,  1615,
    1499,   694,   695,   346,   703,  1508,   862,     0,  1506,  1507,
     703,  1448,    50,   503,  1513,   316,  1453,   463,   464,  2262,
       8,  1458,   296,    16,    50,  1523,    31,  2686,   353,   474,
     475,   283,   339,   889,   685,   686,    62,   649,    43,   619,
     620,  1478,   224,   555,   489,   346,   491,  1484,   660,   374,
     371,   326,   400,   704,   228,   445,  1929,   400,   383,  1458,
     633,   634,   685,   686,  1501,   432,  2249,   434,   641,  1506,
    1507,   245,  1506,  1507,   373,   423,    43,   284,   934,    31,
    2691,   704,  1492,    50,   657,  1495,  1523,  2698,  1154,  2700,
    1527,    43,  1529,  1530,  1160,   269,  1676,  2324,    50,   400,
    2596,  2597,   645,  2599,   786,    43,   343,   789,   383,   384,
     700,  1548,    50,     6,   685,   686,   104,   105,    31,   467,
    1618,   109,   423,   111,    93,    94,   425,   115,   116,    31,
     118,   119,   411,   704,   520,   123,   581,    37,  2749,    39,
      40,   601,   528,   529,   418,  1504,  1827,   607,   685,   686,
     243,   537,   538,   685,   686,  1514,   481,    31,  2195,   619,
     620,   547,  2085,   549,   213,   551,   467,   704,   550,  1827,
     352,  2750,   704,     5,  2753,  2754,    43,   414,   415,   549,
     550,  1618,  1464,   856,  1618,   101,   102,   103,   513,   346,
     700,    38,  1629,    40,     0,  2232,   101,   371,   103,     5,
       6,   375,    43,  1677,  1820,  2288,   700,  2290,    14,    15,
      16,   700,   386,  1829,   600,   694,   695,   696,   697,   700,
    1694,  1023,  1024,  1025,  2288,   704,  1880,  1881,  1882,  1883,
    1884,  2224,   432,   700,   434,   692,  2221,  2222,  2223,   696,
     697,   698,    23,   400,    25,   694,   695,  2284,  1889,   550,
     474,  2747,   476,  1986,    58,   700,  1989,   694,   695,   696,
     697,   696,   697,  1709,   446,  2507,   423,   700,   256,    62,
    1707,   685,   686,   383,   384,  2008,   551,   688,   689,   690,
     691,   692,   693,   211,   212,  1901,   598,   102,   103,   696,
     697,    22,    23,   685,   686,   298,   299,  1871,  2008,  2096,
     474,   475,   700,  2187,  1207,  1208,  2323,  2534,  1707,   700,
     467,   586,  1397,  1398,   436,   489,   700,   491,  2701,  2702,
     700,   633,   634,   635,   700,   175,   700,   700,   700,   641,
     283,   700,  1948,  1770,    31,  1772,    31,    31,  1775,    31,
      31,    31,  1779,   655,   656,   657,    31,  1784,    31,   700,
    1787,  1788,  1789,  1790,  1636,  1792,  1793,   486,     1,  1975,
    1797,  1798,  2513,  1800,   700,  1802,  1648,  1649,  1805,  1625,
    2167,   402,   252,  1810,  1811,  1955,    31,    31,   198,    31,
    1817,   201,   202,    31,  1821,    31,  1823,    31,   516,    31,
    1646,  1647,   240,   257,  1793,   700,  1833,   431,  1654,  2015,
     581,   379,    31,  1802,  2020,   213,  1805,   581,   402,    58,
     194,    31,    31,  2054,  2055,    55,    31,    43,   236,   700,
    2503,   335,   665,  1860,  2507,  2508,  2509,   667,  1926,   570,
     683,  1868,   670,   819,  2471,   680,  1934,   672,  1875,   825,
     239,   668,  1879,  1880,  1881,  1882,  1883,  1884,  1885,   678,
     666,   677,   675,   474,  2464,    50,  1893,  1739,   679,   279,
    1815,   681,  2463,  1961,   850,   586,   512,   529,  1724,   211,
     856,   434,   512,   213,  2511,  1949,  1875,   367,   298,  1735,
    2322,   700,    31,  1920,   281,  1922,   700,   529,    31,  1926,
    1927,   249,  1926,  2315,  2316,    31,   882,  1934,    50,    31,
    1934,   583,    31,  2654,   339,    62,   549,   287,  2088,  2089,
    2090,   353,   703,  1950,  1951,  1952,    20,    31,    31,  1956,
    2018,  1920,   511,   530,  1961,   550,   700,   418,   684,   705,
     431,   698,  1969,   431,  1971,  1972,   700,    24,    31,   925,
      47,   503,   431,   701,   483,   510,   932,   933,  2281,  2282,
    2633,  1950,   483,   550,  2637,  2288,   231,   335,   190,   550,
    2176,  2230,    44,  2296,  2180,   366,  2040,  2221,  2222,  2223,
     474,   335,   204,   583,   184,    23,   431,    60,    51,   285,
     285,  2018,   240,   413,  2018,   217,   431,   574,   553,  1845,
      31,  1732,   652,   700,   190,   415,   416,    62,  2072,   193,
     549,   143,   549,   194,   684,   425,   426,   374,   204,   474,
     513,  2648,   327,  2229,   246,   512,    31,    43,  2234,   411,
    2236,   217,   612,   588,    43,   590,   550,    31,   287,    31,
      43,  1017,   550,    31,   316,    38,  1022,   287,  2254,   231,
     239,     1,   421,   402,   124,   704,   703,   703,   703,   703,
     246,   703,   703,   703,   550,  2271,   703,   411,   703,   703,
      43,   472,    25,   159,   703,   646,   703,   703,   703,   550,
     703,   703,  1954,  2110,   703,   703,   703,   550,  2115,   703,
     703,   703,   550,   703,   703,   703,   703,   319,  2087,   703,
    2532,  2128,  2129,   366,   703,  2132,  2133,  2134,  2135,   703,
     474,   703,   703,   703,   703,  2142,   474,   703,   703,  2146,
    2147,  2148,    44,  2150,  2151,  2152,  2153,   703,   703,   703,
     703,   703,   550,   319,   550,   550,  2224,  2164,  2765,   231,
     231,   293,   366,    18,   700,   623,   593,   669,  2175,   703,
    2177,  2778,   374,   592,  2181,   145,  2183,   144,  2785,  2186,
    2187,  2033,   671,   184,  2036,   184,   335,  2415,   549,  2196,
    2197,   394,   574,   395,   540,  2498,    59,  2500,   435,   443,
      31,  2053,    31,  2506,  2507,  2508,  2509,    31,   374,  2216,
      31,    31,    50,    50,  2221,  2222,  2223,  2224,  2187,  2263,
     684,   518,    50,  2230,  2591,  2269,   287,  2507,    50,   395,
     550,  2083,  2084,  2085,    50,  2303,  2243,   684,   684,   684,
     442,    38,  2094,   516,   103,   447,   102,  2216,   704,   704,
     704,   101,   704,   283,  2261,  2262,   338,     1,  2444,  2266,
     460,   431,  2269,   213,   159,   338,   801,   581,  2275,   338,
     284,   338,   474,   338,   809,    44,   442,   374,   813,   432,
     512,   447,    26,    27,    28,    29,   350,  2473,   195,   338,
      18,   145,   494,   686,   184,   335,  2303,  2266,    31,  2303,
      31,    31,  2452,   520,   574,   434,   841,   432,   474,   454,
     512,   326,   514,    50,    31,   704,   376,   704,   704,   208,
     704,   704,    31,   700,   704,   704,   297,   529,   494,   704,
    2633,   704,   704,  2636,  2637,  2586,   704,   325,  2488,   704,
     704,  2348,   550,   421,   704,   485,   512,   499,   514,   284,
     269,   231,   550,    33,   145,   685,    57,   704,  2586,   574,
     104,   105,   203,   529,   439,   109,   231,   111,  2375,   184,
    2609,   115,   116,   396,   118,   119,    31,   533,   218,   123,
    2091,    50,    43,  2390,  1340,    50,   704,   181,   704,   704,
      31,   704,   319,  1349,   525,  2606,   704,  2249,   704,   704,
     704,  2227,   704,   458,   704,  2616,   704,   431,   704,   704,
     704,   704,   704,   379,   499,   327,  2423,   231,   231,   690,
     458,   379,    57,    25,   568,  2251,  2433,   319,   184,  1385,
    1386,   409,    43,   343,   194,  2646,   704,   459,  2445,  2446,
      33,   143,   184,   253,  2512,    17,  2453,   704,   704,  2456,
     704,   458,    31,  2639,   989,   990,   704,   704,   704,  2466,
     293,    31,   704,   704,   704,   704,   704,   355,   704,   704,
     704,    31,   265,   704,  2685,  1431,    23,   704,  2485,  2486,
    2524,   537,  2308,   322,  2453,   673,     7,  2456,  2340,   684,
     142,  2343,   189,   195,   131,   129,   198,   151,   700,   201,
     202,  2712,  1458,   278,   217,  2512,   284,   234,  2512,   367,
     684,   318,   659,  2304,  2725,  1642,   694,   294,   375,   422,
    1096,  1673,  1105,   230,   329,  1107,   441,  1770,   433,  1772,
    1702,  2742,  1775,  1692,   700,   728,  1779,  1123,  2724,  2340,
    1158,  1784,   749,  1746,  1787,  1788,  1789,  1790,  2091,  1792,
    1506,  1507,   470,  1131,  1797,  1798,   306,  1800,  1158,   760,
    2187,  2568,   311,   969,  2192,  1146,  2573,  1810,  1811,  1548,
     969,   571,   185,  1529,   582,  1524,   931,   279,  1370,   989,
     575,  1989,   284,  1168,   950,  2284,  1390,  2594,  1597,  2596,
    2597,  2777,  2599,  1595,  1600,  2507,   298,   546,  2784,  1786,
    2786,  2288,  2609,   771,   594,  1436,  1364,   600,  1170,  1022,
    2517,  2301,  2523,  1022,  1030,  1529,  2468,  2624,  2625,  2626,
    2627,  1617,   603,  1786,   850,  1445,  1518,  2596,  2597,  2481,
    2599,   552,  1961,  1460,   611,   207,   616,  1490,  1488,   621,
    2473,  1467,  2471,  2609,  2606,  2759,  2773,  1450,   220,   628,
    2703,  2214,  2459,  2458,  2456,   227,  2695,  1874,  2200,  2203,
    1833,  1527,  1618,  2181,  2671,  1351,  2186,  1356,   633,   644,
    2415,  1206,   641,  2680,  2526,   925,  2266,  2488,  2269,  2357,
     939,  2153,  2392,   435,  2171,  2686,   740,   258,   254,    -1,
      -1,    -1,  2699,    -1,  2701,  2702,    -1,    -1,    -1,    -1,
      -1,    -1,  2528,  2529,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   415,   416,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,   426,    -1,    -1,    -1,    -1,  1972,
    2699,    -1,  2701,  2702,    -1,    -1,   308,    -1,    -1,    -1,
    2747,    -1,    -1,  2750,    -1,  2752,  2753,  2754,    -1,    -1,
      -1,  1707,    -1,    -1,    -1,  1290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2475,  2476,    -1,   339,  2775,  2776,
      -1,  2482,    -1,    -1,    -1,    -1,    -1,    -1,  2747,    -1,
      -1,  2750,    -1,    -1,  2753,  2754,   488,    -1,    -1,  2615,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,
      -1,    -1,    -1,    -1,    -1,   377,    -1,  2659,    -1,    -1,
      -1,    -1,    -1,    -1,  1770,    -1,  1772,    -1,    -1,  1775,
      -1,    -1,    -1,  1779,    -1,    -1,    -1,    -1,  1784,    -1,
    1786,  1787,  1788,  1789,  1790,    -1,  1792,  1793,    -1,    -1,
      -1,  1797,  1798,    -1,  1800,    -1,  1802,    -1,   550,  1805,
      -1,    -1,   424,    -1,  1810,  1811,    -1,    -1,   430,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2110,    -1,    -1,
      -1,    -1,  2115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   453,    -1,    -1,    -1,  2128,  2129,  2713,    -1,  2132,
    2133,  2134,  2135,    -1,    -1,    -1,    -1,    -1,    -1,  2142,
      -1,    -1,    -1,  2146,  2147,  2148,   478,  2150,  2151,  2152,
    2153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1875,
      -1,  2164,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,    -1,    -1,   505,  1469,    -1,    -1,    -1,    -1,    -1,
       0,     1,    -1,    -1,   516,     5,    -1,     7,    -1,     9,
      10,    11,    -1,    -1,    14,    15,    16,    -1,    -1,    -1,
      -1,    -1,    -1,   535,  1920,    -1,    26,    27,    28,    29,
    1926,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1934,    -1,
      -1,    -1,    54,   555,    -1,    -1,    -1,    -1,    -1,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,   584,    -1,    -1,    -1,  1972,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1561,    -1,    -1,    -1,
      -1,    -1,  1567,  1568,  1569,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,    -1,    -1,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,    -1,   118,   119,
    1595,    -1,  2018,   123,    -1,    -1,    -1,  1602,    -1,    -1,
     142,    -1,    -1,    -1,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,  2348,   178,   179,   180,   181,
     182,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   700,    -1,
      -1,    -1,  2375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2390,    -1,    -1,
      -1,    -1,    -1,    -1,  2110,    -1,    -1,    -1,    -1,  2115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2128,  2129,    -1,    -1,  2132,  2133,  2134,  2135,
      -1,    -1,    -1,    -1,    -1,    -1,  2142,    -1,    -1,    -1,
    2146,  2147,  2148,    -1,  2150,  2151,  2152,  2153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2164,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1759,     1,    -1,   299,    -1,    -1,
      -1,    -1,   304,    -1,    -1,    -1,  1771,    -1,  1773,  1774,
      -1,  1776,  1777,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,    -1,  1794,
    2216,   333,    -1,    -1,    -1,    -1,  1801,    -1,  1803,    -1,
      -1,  1806,  1807,  1808,  1809,    -1,    -1,  1812,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
    2266,    -1,     5,    -1,     7,    -1,     9,    10,    11,    -1,
      -1,    14,    15,    16,    -1,  2568,    -1,    -1,    -1,    -1,
    2573,    -1,    -1,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,  2348,   169,   170,   171,   172,   173,   174,   471,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
      -1,   104,   105,    -1,    -1,    -1,   109,    -1,   111,  2375,
     196,    -1,   115,   116,   496,   118,   119,    -1,  2671,    -1,
     123,    -1,    -1,    -1,  2390,    -1,    -1,  2680,    -1,    -1,
      -1,  1976,    -1,   515,    -1,    -1,   506,   507,    -1,    -1,
       0,     1,    -1,    -1,  1989,     5,    -1,     7,    -1,     9,
      10,    11,    -1,    -1,    14,    15,    16,    -1,    -1,    -1,
      -1,    -1,    -1,  2008,    -1,    -1,    26,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2453,    -1,    -1,
    2456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,  2512,   333,    -1,   109,
      -1,   111,    -1,    -1,    -1,   115,   116,    -1,   118,   119,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,  2113,    -1,
      -1,    -1,    -1,    -1,  2119,  2120,    -1,    -1,  2123,    -1,
    2125,  2126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2144,
      -1,    -1,  2568,    -1,    -1,    -1,    -1,  2573,    -1,    -1,
      -1,  2156,  2157,    -1,     1,  2160,    -1,  2162,   700,    -1,
    2165,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
    2596,  2597,    -1,  2599,   420,    -1,    -1,    -1,    -1,    -1,
    2185,    -1,    -1,    -1,    31,    32,    -1,    -1,  2193,  2194,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,    -1,    49,    50,    -1,    -1,    -1,     0,     1,    56,
      -1,    -1,     5,    60,     7,    62,     9,    10,    11,    -1,
      -1,    14,    15,    16,    -1,   471,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    26,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2671,    -1,    -1,    -1,    -1,
     496,    -1,    99,   100,  2680,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,  2699,    -1,  2701,  2702,    -1,    -1,    -1,
      -1,    -1,    -1,  2288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,    -1,    -1,    -1,   109,    -1,   111,    -1,
      -1,  2747,   115,   116,  2750,   118,   119,  2753,  2754,    -1,
     123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,   189,   506,   191,    -1,    -1,    -1,   195,    -1,
      -1,    -1,    -1,    -1,    -1,  2360,    -1,  2362,   205,    -1,
     207,    -1,   209,  2368,  2369,    -1,    -1,    -1,    -1,   216,
      -1,    -1,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,   229,    -1,    -1,    -1,   233,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,    -1,    -1,    -1,  2403,    -1,
    2405,   248,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,
      -1,    -1,    -1,    -1,   261,    -1,    -1,   264,    -1,    -1,
      -1,   268,    -1,    -1,    -1,   272,   273,    -1,    -1,   276,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     686,    -1,   289,    -1,    -1,    -1,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,   306,
      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,    -1,   506,   334,    -1,   336,
      -1,    -1,    -1,  2498,    -1,  2500,    -1,   344,   345,   346,
     347,    -1,  2507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   360,   361,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   389,   390,   391,   392,    -1,    -1,  2553,    -1,
     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,    -1,    -1,    -1,    -1,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
     427,   428,   429,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,   438,    -1,   440,   441,    -1,   443,    -1,    -1,    -1,
      -1,    -1,    -1,  2608,    -1,   452,    -1,    -1,    -1,   456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2622,    -1,    -1,
     467,   468,   469,   470,    -1,    -1,    -1,    -1,  2633,    -1,
     477,    -1,  2637,    -1,    -1,   482,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,    -1,    -1,    -1,    -1,    -1,    -1,   516,
     517,    -1,   519,    -1,    -1,    -1,   523,    -1,    -1,    -1,
     527,   528,    -1,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,   538,    -1,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     557,   558,    -1,   506,   507,    -1,   563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   571,   572,    -1,    -1,   575,   576,
      -1,   578,   579,   580,    -1,   582,    -1,    -1,   585,    -1,
      -1,    -1,    -1,    -1,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   663,    -1,    -1,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,   689,   690,   691,   692,   693,   694,   695,    31,
      32,    -1,    -1,    -1,    31,    -1,   703,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
      -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    -1,
      62,    -1,    -1,    -1,    61,    -1,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,   110,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,   189,    -1,   191,
      -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
     197,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,   216,    -1,    -1,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,   229,    -1,    -1,
      -1,   233,    -1,    -1,    -1,   237,   238,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   242,   248,    -1,    -1,    -1,
      -1,    -1,   254,    -1,    -1,    -1,    -1,    -1,    -1,   261,
      -1,   185,   264,   187,   188,    -1,   268,    -1,    -1,   266,
     272,   273,    -1,    -1,   276,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   282,    -1,   289,    -1,    -1,
      -1,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   305,   306,    -1,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,    -1,    -1,    -1,    -1,
      -1,   323,    -1,    -1,    -1,    -1,   328,   329,   330,   331,
      -1,    -1,   334,    -1,   336,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   344,   345,   346,   347,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,   360,   361,
     362,   363,   364,   365,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   379,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,   390,   391,
     392,   388,    -1,    -1,    -1,   397,   398,   399,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
     412,    -1,    -1,    -1,    -1,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,   427,   428,   429,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,   438,    -1,   440,   441,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     452,    -1,    -1,    -1,   456,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,   468,   469,   470,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
     482,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   497,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   508,   509,    -1,    -1,
      -1,    -1,    -1,    -1,   516,   517,    -1,   519,    -1,    -1,
      -1,   523,    -1,    -1,    -1,   527,   528,    -1,   530,   531,
     532,   533,    -1,    -1,    -1,    -1,   538,   534,    -1,   541,
     542,   543,   544,   545,   546,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   557,   558,    -1,    -1,    -1,
      -1,   563,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   571,
     572,    -1,    -1,   575,   576,    -1,   578,   579,   580,    -1,
     582,    -1,    -1,   585,    -1,    -1,    -1,    -1,    -1,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   663,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,   689,   690,   691,
     692,   693,   694,   695,    31,    -1,    -1,    -1,    -1,    -1,
      -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,   189,    -1,   191,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,   216,
      -1,    -1,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,   229,    -1,    -1,    -1,   233,    -1,    -1,    -1,
     237,   238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   248,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,
      -1,    -1,    -1,    -1,   261,    -1,    -1,   264,    -1,    -1,
      -1,   268,    -1,    -1,    -1,   272,   273,    -1,    -1,   276,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,   306,
      -1,    -1,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,
      -1,   328,   329,   330,   331,    -1,    -1,   334,    -1,   336,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,   345,    -1,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   360,   361,   362,   363,   364,   365,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   379,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   389,   390,   391,   392,    -1,    -1,    -1,    -1,
     397,   398,   399,    -1,   401,    -1,   403,   404,   405,   406,
     407,   408,   409,   410,    -1,   412,    -1,    -1,    -1,    -1,
     417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     427,   428,   429,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,   438,    -1,   440,   441,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   452,    -1,    -1,    -1,   456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   468,   469,   470,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,   482,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   508,   509,    -1,    -1,    -1,    -1,    -1,    -1,   516,
     517,    -1,   519,    -1,    -1,    -1,   523,    -1,    -1,    -1,
     527,   528,    -1,   530,   531,   532,   533,    -1,    -1,    -1,
      -1,   538,    -1,    -1,   541,   542,   543,   544,   545,   546,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     557,    -1,    -1,    -1,    -1,    -1,   563,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   571,   572,    -1,    -1,   575,   576,
      -1,   578,   579,   580,    -1,   582,    -1,    -1,   585,    -1,
      -1,    -1,    -1,    -1,   591,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   663,    -1,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,   694,   695,    31,
      -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
     102,   103,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,   195,   196,    -1,   198,    -1,    -1,   201,
     202,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   233,   160,   161,   162,   163,   164,   165,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   279,    -1,    -1,
      -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   298,   299,    -1,    -1,
      31,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   333,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,   333,    -1,   409,    -1,    -1,
      -1,    -1,    -1,   415,   416,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,   426,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,    -1,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
      -1,    -1,    -1,   471,   275,    -1,   277,    -1,   550,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,   300,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   586,    -1,    -1,   515,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,    -1,   664,   665,   666,   667,   668,    -1,   670,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
     682,   683,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,
      -1,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,   673,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   101,   102,   103,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   548,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,    -1,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,
      -1,   209,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,   367,
     304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,
      -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   421,    -1,   423,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,   471,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   570,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,   664,   665,   666,   667,
     668,   669,   670,   671,   672,   673,   674,   675,   676,   677,
     678,   679,   680,   681,   682,   683,     0,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   700,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      44,    45,    -1,    47,    -1,    -1,    50,    51,    -1,   673,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,   195,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,    -1,   209,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,   367,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   333,    -1,    -1,   400,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,   471,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
     664,   665,   666,   667,   668,    -1,   670,   671,   672,   673,
     674,   675,   676,   677,   678,   679,   680,   681,   682,   683,
       0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    45,    -1,    47,    -1,    -1,
      -1,    51,    -1,   673,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,   195,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,   167,
     240,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   322,    -1,    -1,    -1,    -1,   327,    -1,    -1,
      -1,    -1,    -1,   333,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,   304,   377,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,
     400,    -1,    -1,   403,    -1,   333,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,    -1,   664,   665,   666,   667,   668,    -1,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     680,   681,   682,   683,     0,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     700,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    45,
      -1,    47,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,   673,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,   142,    -1,
      -1,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,   240,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,
      -1,   327,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
     304,   377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,   403,    -1,   333,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   555,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,    -1,   664,   665,
     666,   667,   668,    -1,   670,   671,   672,   673,   674,   675,
     676,   677,   678,   679,   680,   681,   682,   683,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    51,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,   673,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,    -1,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,   195,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,   142,    -1,    -1,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,   240,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,   327,    -1,    -1,    -1,    -1,
      -1,   333,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,   304,   377,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,
      -1,   403,    -1,   333,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,    -1,   664,   665,   666,   667,   668,    -1,   670,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
     682,   683,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,
      -1,    -1,    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,   673,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,    -1,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,   240,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    -1,   324,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,   377,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,   403,    -1,   333,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   555,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,    -1,   664,   665,   666,   667,
     668,    -1,   670,   671,   672,   673,   674,   675,   676,   677,
     678,   679,   680,   681,   682,   683,     0,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   700,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    47,    -1,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,   673,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    44,    45,    -1,    47,    -1,
      -1,    -1,    51,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,    -1,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,    -1,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
     299,    -1,    -1,    -1,    -1,   304,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,   333,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,
      -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   568,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   583,
      -1,    -1,   586,    -1,    -1,    -1,   515,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,    -1,
     664,   665,   666,   667,   668,    -1,   670,   671,   672,   673,
     674,   675,   676,   677,   678,   679,   680,   681,   682,   683,
       0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     694,   695,    -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    45,    -1,    47,    -1,    -1,
      50,    51,    -1,    -1,    54,   664,   665,   666,   667,   668,
      -1,   670,   671,   672,   673,   674,   675,   676,   677,   678,
     679,   680,   681,   682,   683,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   700,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,   102,   103,    -1,    31,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   233,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,   333,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,   462,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,    -1,   664,   665,   666,   667,   668,    -1,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     680,   681,   682,   683,     0,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     700,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,
      -1,    47,    -1,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    15,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,   144,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,    -1,   125,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   209,    -1,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,   167,   233,   169,   170,
     171,   172,   173,   174,    -1,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,   367,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   333,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   462,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
     471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,    -1,   664,   665,
     666,   667,   668,    -1,   670,   671,   672,   673,   674,   675,
     676,   677,   678,   679,   680,   681,   682,   683,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    45,    -1,    47,    -1,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    14,    15,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,   101,
     102,   103,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,    -1,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   188,    -1,   125,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   142,    -1,   209,    -1,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,   166,
     167,   233,   169,   170,   171,   172,   173,   174,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   367,    -1,   304,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,    -1,   664,   665,   666,   667,   668,    -1,   670,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
     682,   683,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    45,    -1,    47,
      -1,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,   101,   102,   103,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   142,    -1,   144,    -1,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,   125,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,
      -1,   209,    -1,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,   166,   167,   233,   169,   170,   171,   172,
     173,   174,    -1,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,   367,
      -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     333,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   462,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,   471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,    -1,   664,   665,   666,   667,
     668,    -1,   670,   671,   672,   673,   674,   675,   676,   677,
     678,   679,   680,   681,   682,   683,     0,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   700,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    45,    -1,    47,    -1,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    23,    24,    -1,    -1,   101,   102,   103,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    44,    45,    -1,    47,    -1,    -1,
      -1,    51,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,
     144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   233,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   333,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,   299,
      -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,   333,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,    -1,
     664,   665,   666,   667,   668,    -1,   670,   671,   672,   673,
     674,   675,   676,   677,   678,   679,   680,   681,   682,   683,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,     1,    -1,   664,   665,   666,   667,   668,    -1,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     680,   681,   682,   683,    23,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     700,    -1,    -1,    -1,    -1,    44,    45,    -1,    47,    -1,
      -1,    -1,    51,    -1,    -1,    54,     0,     1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,    47,    -1,    -1,    -1,    51,    -1,    -1,
      54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   142,    -1,   144,    -1,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,    -1,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,   142,    -1,
     144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,   170,   171,   172,   173,
     174,    -1,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,    -1,    -1,    -1,     0,     1,    -1,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,
      -1,    47,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,
     299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,     0,
       1,    -1,    -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    24,    -1,   299,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    44,    45,    -1,    47,    -1,   322,    -1,
      51,    -1,    -1,    54,    -1,    -1,   142,    -1,   144,   333,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   142,   471,   144,    -1,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,   167,   496,   169,   170,
     171,   172,   173,   174,    -1,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,    -1,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,    -1,   471,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,
      -1,   515,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,
      -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   333,    -1,    -1,   664,   665,   666,   667,   668,
      -1,   670,   671,   672,   673,   674,   675,   676,   677,   678,
     679,   680,   681,   682,   683,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   700,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
     664,   665,   666,   667,   668,    -1,   670,   671,   672,   673,
     674,   675,   676,   677,   678,   679,   680,   681,   682,   683,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     0,     1,    -1,   664,   665,
     666,   667,   668,    -1,   670,   671,   672,   673,   674,   675,
     676,   677,   678,   679,   680,   681,   682,   683,    23,    24,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,    -1,    44,
      45,    -1,    47,    -1,    -1,    -1,    51,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,     1,    -1,   664,   665,   666,   667,   668,    -1,   670,
     671,   672,   673,   674,   675,   676,   677,   678,   679,   680,
     681,   682,   683,    23,    24,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,
      -1,    -1,    -1,    -1,    44,    45,    -1,    47,    -1,    -1,
      -1,    51,    -1,    -1,    54,    -1,    -1,   142,    -1,   144,
      -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   142,    -1,   144,    -1,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,   164,   165,   166,   167,    -1,   169,
     170,   171,   172,   173,   174,    -1,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,    -1,    -1,    -1,     0,     1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    23,    24,    -1,   299,    -1,    -1,    -1,    -1,   304,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    44,    45,    -1,    47,    -1,   322,    -1,    51,
      -1,    -1,    54,     0,     1,    -1,    -1,    -1,   333,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    -1,
      47,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,   299,
      -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,   333,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,   142,   471,   144,    -1,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,   166,
     167,   496,   169,   170,   171,   172,   173,   174,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,    -1,    -1,
     515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,   304,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,    -1,
      -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,   664,
     665,   666,   667,   668,    -1,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   700,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
      -1,    -1,     1,    -1,   664,   665,   666,   667,   668,    -1,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     680,   681,   682,   683,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     700,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   471,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   142,    -1,    -1,    -1,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
     169,   170,   171,   172,   173,   174,    -1,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,     0,
       1,    -1,   664,   665,   666,   667,   668,   196,   670,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
     682,   683,    23,    24,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,
      -1,    -1,    -1,    44,    45,    -1,    47,    -1,    -1,    -1,
      51,    -1,    -1,    54,     0,     1,    -1,   664,   665,   666,
     667,   668,    -1,   670,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,   682,   683,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   700,    -1,    -1,    -1,    -1,    44,    45,
      -1,    47,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,
     299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   142,    -1,   144,   333,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,   167,    -1,   169,   170,
     171,   172,   173,   174,    -1,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,   142,    -1,   144,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,   420,   178,   179,   180,   181,   182,   183,   184,    -1,
      -1,    -1,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    24,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   471,    -1,    -1,    -1,    44,    45,    -1,    47,
      -1,    -1,    -1,    51,    -1,    -1,    54,    -1,   299,    -1,
      -1,    -1,    -1,   304,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   322,    -1,    -1,    -1,    -1,   515,     0,     1,    -1,
      -1,    -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      23,    24,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    44,    45,    -1,    47,    -1,   322,    -1,    51,    -1,
      -1,    54,    -1,    -1,   142,    -1,   144,   333,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,   164,   165,   166,   167,
      -1,   169,   170,   171,   172,   173,   174,    -1,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,
     471,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,   164,   165,   166,   167,   496,   169,   170,   171,   172,
     173,   174,    -1,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,    -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   196,    -1,   471,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,    -1,
      -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   322,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     333,    -1,    -1,   664,   665,   666,   667,   668,    -1,   670,
     671,   672,   673,   674,   675,   676,   677,   678,   679,   680,
     681,   682,   683,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   471,    -1,    -1,     1,    -1,   664,   665,
     666,   667,   668,    -1,   670,   671,   672,   673,   674,   675,
     676,   677,   678,   679,   680,   681,   682,   683,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   700,    -1,    -1,   515,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,
      -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
      -1,    -1,    -1,     0,     1,    -1,   664,   665,   666,   667,
     668,   196,   670,   671,   672,   673,   674,   675,   676,   677,
     678,   679,   680,   681,   682,   683,    23,    24,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   700,    -1,    -1,    -1,    -1,    44,    45,    -1,
      47,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,
      -1,   664,   665,   666,   667,   668,    -1,   670,   671,   672,
     673,   674,   675,   676,   677,   678,   679,   680,   681,   682,
     683,    23,    24,    -1,   299,    -1,    -1,    -1,    -1,   304,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,    -1,
      -1,    -1,    44,    45,    -1,    47,    -1,    -1,    -1,    51,
      -1,    -1,    54,    -1,    -1,   142,    -1,   144,   333,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     142,    -1,   144,    -1,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    54,   160,   161,
     162,   163,   164,   165,   166,   167,    -1,   169,   170,   171,
     172,   173,   174,    -1,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,   471,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   322,    -1,    -1,    -1,    -1,
     515,    -1,    -1,    -1,    -1,   142,   333,    -1,    -1,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,   166,
     167,    -1,   169,   170,   171,   172,   173,   174,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,   196,
      -1,    -1,   304,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   333,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   471,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   299,    -1,    50,    -1,    -1,   304,    54,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   496,    -1,   142,    -1,    -1,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   515,   160,   161,   162,   163,   164,   165,
     166,   167,    -1,   169,   170,   171,   172,   173,   174,    -1,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   471,    -1,    -1,   664,   665,   666,
     667,   668,    -1,   670,   671,   672,   673,   674,   675,   676,
     677,   678,   679,   680,   681,   682,   683,    -1,    -1,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   700,    -1,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   299,    -1,    -1,    -1,    -1,   304,    -1,
      -1,    -1,   664,   665,   666,   667,   668,    -1,   670,   671,
     672,   673,   674,   675,   676,   677,   678,   679,   680,   681,
     682,   683,    -1,    -1,    -1,    -1,    -1,   333,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    42,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,   394,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,   101,   102,   103,    -1,    -1,    -1,
      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   515,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,   530,    -1,    -1,   533,   195,    -1,
      -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,    -1,    -1,
      -1,   208,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   568,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   583,    -1,    -1,
     586,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   673,    -1,   336,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   388,    -1,    62,    -1,    -1,     1,    -1,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,    -1,    -1,    -1,   435,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,   142,    -1,    -1,
     209,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,   164,
     165,   166,   167,    -1,   169,   170,   171,   172,   173,   174,
      -1,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   663,   336,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,   299,    -1,    -1,    -1,   367,   304,
      -1,    42,    43,    -1,    -1,    -1,    -1,   704,    -1,    50,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    -1,     1,    -1,    -1,    -1,   333,    -1,
      -1,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,
     101,   102,   103,    -1,    -1,    -1,   435,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,   142,   471,    -1,   209,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,   161,   162,   163,   164,   165,   166,
     167,   496,   169,   170,   171,   172,   173,   174,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,    -1,    -1,
     515,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,
      -1,    -1,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
     659,   660,   661,   662,   663,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,   299,    -1,    -1,    -1,   367,   304,    -1,    42,
      43,    -1,    -1,    -1,    -1,   704,    -1,    50,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    -1,     1,    -1,    -1,    -1,   333,    -1,    -1,   400,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,    -1,    -1,    -1,   435,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,   420,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,   142,   471,    -1,   209,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,   164,   165,   166,   167,   496,
     169,   170,   171,   172,   173,   174,    -1,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,    -1,    -1,   515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
     299,    -1,    -1,    -1,   367,   304,    -1,    42,    43,    -1,
      -1,    -1,    -1,   704,    -1,    50,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,   333,    -1,    -1,   400,    -1,    -1,
     403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,
      -1,    -1,   435,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
     195,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,   471,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   496,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   515,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,   704,    -1,    50,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,   403,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,    -1,   101,   102,   103,    -1,    -1,    -1,
     435,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   336,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,   704,
      -1,    50,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,    -1,   101,   102,   103,    -1,    -1,    -1,   435,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   663,   336,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,   704,    -1,    50,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,
     101,   102,   103,    -1,    -1,    -1,   435,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
     659,   660,   661,   662,   663,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   704,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,   423,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   289,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    31,    32,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    49,
      50,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,   435,
      60,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   207,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,    -1,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   316,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     400,    -1,    -1,   403,    -1,    -1,    -1,    31,    32,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,   423,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    60,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   558,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,    -1,   289,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,   689,
     690,   691,   692,   693,   694,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,   403,
      -1,    -1,    -1,    31,    32,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,   423,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    60,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
      -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,   689,   690,   691,   692,   693,
     694,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    31,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,   423,    -1,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,   689,   690,   691,   692,   693,   694,   695,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,
     403,    -1,    -1,    31,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
     423,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,   689,   690,   691,   692,
     693,   694,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    31,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,   423,    -1,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,   689,   690,   691,   692,   693,   694,   695,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,
     403,    -1,    -1,    31,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
     423,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,   689,   690,   691,   692,
     693,   694,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    31,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,   423,    -1,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,   289,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,   689,   690,   691,   692,   693,   694,   695,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,
     403,    -1,    -1,    31,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
     423,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,   689,   690,   691,   692,
     693,   694,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   423,    42,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    60,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,   689,   690,   691,   692,   693,   694,   695,    -1,    -1,
     316,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,
      -1,    31,    32,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,   423,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      60,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   558,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,    -1,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     400,    -1,    -1,   403,    -1,    -1,    -1,    31,    32,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,   423,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    60,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,    -1,   289,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,    -1,    -1,
      -1,    -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,   403,
      -1,    -1,    31,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,   423,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,    -1,    -1,    -1,    -1,    -1,    -1,
     694,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   400,    -1,    -1,   403,    -1,    -1,    31,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,   423,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
     659,   660,   661,   662,   663,   289,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,    -1,
      -1,    -1,    -1,    -1,    -1,   694,   695,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    -1,   367,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
      -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,   687,    -1,    -1,    -1,    -1,    -1,    -1,
     694,   695,    -1,    -1,    -1,   380,    -1,    -1,    -1,   703,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,   403,    -1,
      -1,    31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,   423,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,
     695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   433,    -1,   435,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
     195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,
     695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   703,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    31,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,
     695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    31,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   703,    31,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   110,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,   233,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,    31,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,   703,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   700,    -1,   367,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   700,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     448,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,   694,   695,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   263,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,   694,   695,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   299,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   663,    -1,   336,    -1,   338,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   694,   695,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,   530,    -1,    -1,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   550,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,   694,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   263,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,    -1,    -1,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,
     695,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,    -1,   335,   336,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,   694,   695,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
     659,   660,   661,   662,    -1,    -1,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,   694,   695,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,    -1,   335,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,   694,   695,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,    -1,    -1,   336,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   694,   695,   367,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    31,   694,   695,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    -1,   403,    -1,    -1,
      50,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   233,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   694,   695,
      -1,    -1,    -1,    -1,    18,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,   233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,    -1,   338,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   101,   102,   103,    -1,   433,
      -1,   435,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,   480,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   663,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,    -1,   101,   102,   103,    -1,    -1,    -1,   435,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   663,   336,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,   231,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   258,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   433,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,   480,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   581,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   663,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   376,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    31,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    62,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     663,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,   336,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
     110,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,   233,    -1,   533,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   663,    31,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
     550,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,   233,   569,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   663,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,   110,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,
     435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,   233,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,    31,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,   435,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   663,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   663,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   346,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,    -1,   366,   367,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   346,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,   518,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   336,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,   346,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    42,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,
     403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
     336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   400,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   467,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,   336,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    57,    -1,    -1,    -1,   367,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   400,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
     659,   660,   661,   662,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,   209,    -1,   537,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   586,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   564,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   420,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,   336,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,   110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,
     186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,
      -1,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,
     596,   597,   598,   599,   600,   601,   602,   603,   604,   605,
     606,   607,   608,   609,   610,   611,   612,   613,   614,   615,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,   627,   628,   629,   630,   631,   632,   633,   634,   635,
     636,   637,   638,   639,   640,   641,   642,   643,   644,   645,
     646,   647,   648,   649,   650,   651,   652,   653,   654,   655,
     656,   657,   658,   659,   660,   661,   662,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   435,   110,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     530,    -1,    -1,   533,    -1,   209,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   592,   593,   594,   595,   596,   597,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
     630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
     640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   658,   659,
     660,   661,   662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,
     594,   595,   596,   597,   598,   599,   600,   601,   602,   603,
     604,   605,   606,   607,   608,   609,   610,   611,   612,   613,
     614,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,   646,   647,   648,   649,   650,   651,   652,   653,
     654,   655,   656,   657,   658,   659,   660,   661,   662,   336,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,   188,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,
      43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,
     409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   435,   110,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,    -1,   209,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,   607,   608,
     609,   610,   611,   612,   613,   614,   615,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,   627,   628,
     629,   630,   631,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,   650,   651,   652,   653,   654,   655,   656,   657,   658,
     659,   660,   661,   662,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,
     187,   188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,
     533,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,   607,   608,   609,   610,   611,   612,
     613,   614,   615,   616,   617,   618,   619,   620,   621,   622,
     623,   624,   625,   626,   627,   628,   629,   630,   631,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,   645,   646,   647,   648,   649,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,   660,   661,   662,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,
      -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,   110,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   530,    -1,    -1,   533,    -1,   209,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
     607,   608,   609,   610,   611,   612,   613,   614,   615,   616,
     617,   618,   619,   620,   621,   622,   623,   624,   625,   626,
     627,   628,   629,   630,   631,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,   645,   646,
     647,   648,   649,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,   660,   661,   662,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,   186,   187,   188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,   533,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,   607,   608,   609,   610,
     611,   612,   613,   614,   615,   616,   617,   618,   619,   620,
     621,   622,   623,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,   645,   646,   647,   648,   649,   650,
     651,   652,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   403,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     435,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   185,   186,   187,
     188,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   530,    -1,    -1,   533,    -1,
      -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   336,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   367,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,
      -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   530,    -1,    -1,   533,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   367,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   435,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   477,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,    -1,
      -1,   533,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   603,   604,   605,   606,   607,   608,   609,   610,   611,
     612,   613,   614,   615,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,   627,   628,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   644,   645,   646,   647,   648,   649,   650,   651,
     652,   653,   654,   655,   656,   657,   658,   659,   660,   661,
     662,   189,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,
      -1,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,   229,    -1,    -1,    -1,   233,    -1,    -1,    -1,   237,
     238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     248,    -1,    -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   264,    -1,    -1,    -1,
     268,    -1,    -1,    -1,   272,   273,    -1,    -1,   276,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,   306,    -1,
      -1,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   323,    -1,    -1,    -1,    -1,
     328,   329,   330,   331,    -1,    -1,   334,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   344,   345,    -1,   347,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   389,   390,   391,   392,    -1,    -1,    -1,    -1,   397,
     398,   399,    -1,   401,    -1,    -1,   404,   405,   406,   407,
     408,    -1,   410,    -1,   412,    -1,    -1,    -1,    -1,   417,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   427,
     428,   429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     438,    -1,   440,   441,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   452,    -1,    -1,    -1,   456,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     468,   469,   470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   482,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     508,   509,    -1,    -1,    -1,    -1,    -1,    -1,   516,   517,
      -1,   519,    -1,    -1,    -1,   523,    -1,    -1,    -1,   527,
     528,    -1,    -1,   531,   532,    -1,    -1,    -1,    -1,    -1,
     538,    -1,    -1,   541,   542,   543,   544,   545,   546,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   557,
      -1,    -1,    -1,    -1,    -1,   563,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   571,   572,    -1,    -1,   575,   576,    -1,
     578,   579,   580,    -1,   582,    -1,    -1,   585,    -1,    -1,
      -1,    -1,    -1,   591
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,   125,   707,   708,   709,   711,   712,   713,   714,   126,
     127,   494,   531,     0,    14,    15,   970,   971,   437,   719,
       3,   462,   715,   714,    31,    31,    31,    31,    31,    43,
     110,   185,   186,   187,   188,   209,   233,   367,   403,   409,
     435,   477,   530,   533,   592,   593,   594,   595,   596,   597,
     598,   599,   600,   601,   602,   603,   604,   605,   606,   607,
     608,   609,   610,   611,   612,   613,   614,   615,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,   627,
     628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
     638,   639,   640,   641,   642,   643,   644,   645,   646,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   656,   657,
     658,   659,   660,   661,   662,   700,   735,  1033,  1034,   700,
     735,   709,     1,   700,   162,   284,   594,   608,   613,   614,
     624,   720,   721,   722,   724,   725,   726,   728,   729,   730,
       4,   739,   700,   700,   716,   586,   231,   195,   393,   506,
     587,   732,   733,   503,   371,  1339,  1339,   284,   727,   727,
     645,   700,   721,   700,     6,   818,   336,   715,   718,   735,
      31,    31,    58,   731,   733,   411,  1343,   418,   525,   650,
     651,   723,   243,  1339,  1339,  1339,   740,   819,   710,    31,
     213,   717,   550,  1358,  1339,   619,   620,   601,   607,   619,
     620,   633,   634,   641,   657,   937,     8,   104,   105,   109,
     111,   115,   116,   118,   119,   123,   256,   741,   742,  1361,
    1362,  1363,  1373,  1376,  1379,     7,     9,    10,    11,   506,
     820,   821,     5,   908,   717,    43,   736,  1339,    42,    43,
     223,   346,   400,   734,   598,   635,   655,   656,   936,   937,
     700,    31,    43,    43,  1377,  1378,    93,    94,  1374,  1375,
     700,   742,   700,   700,   700,   700,    58,   821,    18,   574,
     700,   910,   736,  1339,   716,   253,   355,   477,   737,   738,
      62,   175,   318,   370,   743,   744,   749,   750,  1378,  1375,
      12,   492,   521,   522,   784,   785,   822,   825,   824,   823,
     700,  1030,  1031,  1033,   231,   436,   911,   912,  1327,  1347,
     909,   700,   700,   465,   463,   738,  1348,  1347,   700,   700,
     744,   750,   700,   716,   700,   700,   785,   317,   507,   826,
     827,   830,     1,    26,    27,    28,    29,   853,   854,   855,
     869,   870,   873,   875,  1361,   853,   853,   350,   431,  1032,
      18,   912,   258,   480,   581,  1025,  1026,  1027,  1030,   283,
     914,   914,   700,    31,   749,   209,   505,   745,   746,    31,
     242,   336,   359,   463,   464,   786,   787,   788,   791,   792,
     795,   796,    31,    31,    61,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,   197,   242,   266,   282,   388,
     534,   799,   800,   801,   805,   806,   812,    31,    31,   827,
     228,   245,   269,   375,   386,   474,   475,   489,   491,   581,
     700,   831,   832,   833,   836,   843,   848,   852,  1339,  1033,
      31,    31,    31,   855,   106,   207,   220,   227,   424,   430,
     453,   478,   505,   516,   535,   561,   573,   581,   584,   856,
     876,   877,   878,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   905,   906,
     907,  1339,  1359,   700,   486,  1033,  1030,     1,  1347,    42,
      43,    62,   346,   400,   423,   467,   913,  1025,  1108,  1109,
     402,  1028,  1057,   700,     1,    31,    50,    54,   142,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   160,   161,   162,   163,   164,   165,   166,   167,
     169,   170,   171,   172,   173,   174,   176,   178,   179,   180,
     181,   182,   183,   196,   299,   304,   333,   471,   496,   515,
     709,   916,   917,   918,   919,   920,   921,   923,   924,   929,
     930,   931,   943,   946,   947,   948,   955,   957,   958,   960,
     963,   964,   965,   972,   973,   978,   997,   998,   999,  1005,
    1006,  1035,  1038,  1039,  1040,  1052,  1055,  1063,  1068,  1075,
    1081,  1111,  1112,  1113,  1122,  1123,  1124,  1135,  1136,  1146,
    1147,  1148,  1151,  1152,  1155,  1156,  1157,  1160,  1165,  1172,
    1173,  1182,  1191,  1192,  1193,  1203,  1204,  1205,  1206,  1218,
    1241,  1250,  1251,  1252,  1256,  1266,  1268,  1273,  1274,  1277,
    1278,  1279,  1289,  1291,  1292,   916,   190,   204,   217,   246,
     319,   374,   395,   442,   447,   474,   494,   514,   700,   753,
     754,   755,   757,   761,   762,   763,   764,   765,   770,   771,
     772,   773,   776,   777,   778,   779,   781,  1329,  1334,   252,
     176,   177,   474,   748,  1350,   700,   746,   246,   463,   512,
     798,    31,    31,   195,   793,   794,    31,    31,    31,   700,
     787,   586,   797,  1360,  1339,   432,   434,   813,  1339,    31,
      31,   516,  1351,  1339,    31,   240,  1328,   700,   801,  1339,
     257,  1330,  1339,   474,   476,   837,   837,  1339,  1330,  1339,
    1343,   431,   828,   700,   832,   308,   339,   581,   424,   581,
    1336,  1339,   379,    62,   184,    50,   564,   857,   858,   859,
     860,  1030,    20,    21,    34,    35,    36,    41,   702,   879,
     880,   881,   882,   887,    31,   213,  1339,   378,   502,  1358,
     371,  1339,     1,   195,  1323,   877,   377,   555,   903,    17,
     308,   339,   562,    52,    53,    57,   155,   224,   352,   446,
    1030,  1025,    50,    62,   195,   289,   336,   380,   663,   694,
     695,   703,   992,   993,   994,   995,   996,  1025,  1049,  1058,
    1062,  1301,  1302,   402,  1028,   915,    58,  1054,  1025,   263,
     380,   694,   695,   933,  1025,  1047,  1048,  1061,  1062,  1301,
    1269,    43,  1025,  1254,  1257,  1257,  1267,  1069,   950,  1025,
    1046,   194,    31,  1149,  1214,    43,    50,   101,   102,   103,
     195,   380,   663,   874,  1025,  1108,  1116,  1117,  1118,  1119,
    1121,  1301,   967,   968,   969,  1048,   974,    18,   472,   975,
     977,  1360,    50,  1031,  1275,  1276,     1,  1025,  1036,  1037,
    1121,    55,  1217,  1161,   263,  1025,  1301,  1323,    43,  1042,
    1048,  1064,    31,  1125,    31,  1208,  1209,  1214,    31,   319,
    1138,  1139,  1153,   195,  1030,  1175,  1176,    32,   300,   376,
     380,   663,   940,   941,   942,  1025,  1162,  1164,  1166,    46,
    1026,    43,  1025,  1108,  1281,  1282,  1283,  1284,  1301,    43,
      50,   504,   263,  1047,  1115,  1159,  1214,    43,  1025,  1293,
    1294,  1301,  1137,  1138,   992,  1025,    43,   236,   961,   663,
     979,   980,  1025,    23,    31,   420,  1276,     0,    16,   917,
     918,  1052,   700,     0,   700,   920,    23,   664,   922,   925,
     926,   335,   665,   932,   932,   667,   949,   949,   421,   669,
     956,   570,   670,   966,   966,   683,  1004,    60,   195,   687,
     703,   942,   981,   982,   983,   984,   985,   986,   988,   990,
     991,   992,  1000,  1323,   316,   558,   983,   992,  1007,  1008,
    1009,  1024,   672,  1041,  1041,    50,   568,   583,  1031,  1048,
    1076,  1077,  1078,  1079,  1080,  1082,  1083,  1085,  1086,  1087,
    1103,  1104,  1276,  1360,   680,  1114,  1114,   668,  1150,  1150,
     678,  1158,  1158,   677,  1174,  1174,   675,  1207,  1207,   666,
    1253,  1253,   679,  1280,  1280,   681,  1290,  1290,  1343,  1350,
     574,  1358,  1339,  1343,  1339,   239,   774,   286,   374,  1340,
      50,  1360,   700,   754,   353,   383,   481,   513,   512,   529,
     434,  1346,   211,   747,   747,   512,   246,   512,  1339,   700,
     213,   789,   789,   367,   367,   794,   789,   789,   789,   700,
     281,    31,   529,  1354,  1354,    31,  1339,  1339,  1339,   249,
    1339,    31,    50,   803,    31,    50,   834,    31,  1030,  1197,
      31,   433,   525,   841,   842,  1049,   834,   583,   844,  1339,
      31,   838,   839,   854,   829,   213,  1325,  1339,   174,   184,
     550,   815,   816,   817,  1323,   335,  1325,   339,    62,   549,
    1356,   214,   288,   353,   861,   862,   863,   866,   550,  1356,
     861,   866,   287,   866,   703,   886,   881,    37,    39,    40,
     883,  1030,    31,  1029,  1029,    43,    50,   694,   695,   703,
    1050,  1051,  1108,   511,   904,   530,  1355,   649,   660,  1352,
     418,  1344,   550,  1344,  1344,  1360,   684,   431,    52,    53,
    1030,  1120,   431,   995,   996,   992,   705,   694,   695,   696,
     697,   698,   704,   992,    13,    31,    99,   100,   189,   191,
     205,   216,   219,   221,   225,   226,   229,   233,   237,   238,
     248,   254,   261,   264,   268,   272,   273,   276,   278,   295,
     305,   306,   309,   310,   311,   312,   313,   314,   315,   323,
     328,   329,   330,   331,   334,   344,   345,   347,   360,   361,
     362,   363,   364,   365,   379,   389,   390,   391,   392,   397,
     398,   399,   401,   404,   405,   406,   407,   408,   410,   412,
     417,   427,   428,   429,   438,   440,   441,   452,   456,   468,
     469,   470,   482,   497,   508,   509,   516,   517,   519,   523,
     527,   528,   531,   532,   538,   541,   542,   543,   544,   545,
     546,   557,   563,   571,   572,   575,   576,   578,   579,   580,
     582,   585,   591,  1303,  1304,  1312,  1313,  1315,  1316,  1317,
    1318,  1319,  1320,  1321,  1322,   992,   916,     1,   700,  1053,
    1047,  1030,  1120,  1062,  1062,    24,  1043,  1044,   338,   550,
    1048,  1270,  1271,  1276,    23,    51,  1264,  1265,    18,   338,
     574,  1255,  1257,    31,  1070,  1071,  1043,   503,   934,   951,
    1025,   992,    47,  1143,  1144,  1350,  1118,  1030,  1120,   431,
     701,  1117,  1043,   483,   483,   231,   366,    54,    58,   168,
     463,   976,  1056,  1354,     1,    23,   376,    22,   637,   287,
    1276,   143,   195,   198,   201,   202,   279,   298,   415,   416,
     425,   426,  1037,  1242,  1243,  1244,  1245,  1246,  1357,  1360,
    1025,  1216,  1301,  1214,  1025,   550,   550,   874,  1061,  1109,
    1043,   231,   307,   357,   369,   445,  1065,  1066,  1067,   420,
     474,   640,  1126,    44,   674,  1128,  1129,  1143,   335,    44,
    1210,  1211,  1212,   366,   474,  1032,  1214,  1350,   335,   676,
    1143,  1154,  1030,  1183,   583,  1177,   184,  1178,  1179,  1180,
     218,  1326,    43,   927,  1025,    23,  1025,   431,  1345,   550,
     942,  1028,  1057,   292,   550,   569,  1164,    60,  1167,  1168,
    1169,  1170,  1194,  1195,  1346,  1194,  1198,  1360,    51,  1287,
    1288,   366,  1283,  1286,   285,   975,  1047,   335,  1043,  1143,
     324,   374,   376,  1287,   285,  1295,    45,   682,  1131,  1132,
    1143,   194,   222,  1140,   240,   623,   944,   574,   413,   962,
     431,   980,    31,   652,   735,   700,   922,   926,   919,    31,
     185,   186,   188,   250,   251,   270,   275,   277,   300,   548,
     806,   928,   193,    31,   185,   187,   188,   806,   959,    62,
     687,   703,   981,   990,   984,   992,  1357,   685,   686,   703,
     990,   992,   688,   689,   690,   691,   692,   693,  1045,    49,
      56,    62,    98,   687,   938,   939,  1339,   420,   919,  1001,
    1003,    43,   423,  1109,   184,   203,  1010,  1012,  1013,  1014,
    1015,  1016,  1084,  1048,   549,  1048,  1080,  1082,  1360,  1085,
    1086,  1360,  1085,  1085,   673,   919,  1083,  1104,   194,  1105,
    1106,   684,   394,   540,  1339,  1340,  1030,   308,   751,   752,
     806,  1030,  1339,   474,  1339,  1339,  1339,   211,   212,   780,
     169,   195,   421,   782,   513,    31,   201,   415,  1339,  1197,
     327,  1074,  1074,  1339,   512,  1339,    31,    43,   612,   790,
     790,   411,  1339,  1339,   813,     1,    43,    50,    59,   203,
     296,   418,   807,   808,   809,   811,   815,    43,    31,    43,
     802,   210,   804,  1339,   550,   240,   476,   835,  1030,   842,
     383,   384,   849,   850,  1342,  1328,    50,   240,   335,   350,
     518,   550,   845,   846,   287,   847,    31,  1339,   839,   854,
      43,   233,   379,   380,   871,   872,   874,  1024,  1050,  1108,
     550,   174,   550,   816,   316,    43,    50,  1108,    31,   871,
     874,  1108,  1327,   862,   866,  1340,   858,   860,   866,  1346,
      31,    50,    38,   884,   885,   884,   885,  1050,  1050,  1050,
     694,   695,   696,   697,   239,     1,   421,  1030,  1025,   402,
    1057,  1025,   704,   704,   992,   994,   994,   995,   995,   996,
     703,   703,   703,   703,   703,   703,   703,   703,  1214,   703,
     703,   703,   703,   703,   703,   703,   703,   703,   703,   703,
     703,   703,   703,   703,   703,   992,   703,   703,   703,   703,
     703,   703,   703,   703,  1028,   703,   703,   703,   703,   703,
     703,   703,   703,    44,   124,  1364,  1365,   550,  1057,  1044,
     919,  1046,  1025,  1046,  1048,  1271,   550,  1272,  1265,   919,
     433,   663,  1025,  1258,  1259,  1260,  1263,  1327,  1025,   479,
     565,  1072,  1073,  1360,  1071,   411,   935,   301,   690,   952,
     934,   646,  1340,  1144,  1057,  1025,    43,  1025,  1025,  1048,
    1046,  1048,   977,    50,  1025,    25,  1056,  1056,  1346,  1360,
    1358,  1357,   488,  1358,   159,   262,   488,   537,  1194,   550,
    1036,  1036,   550,   550,   550,  1046,  1048,  1061,  1066,  1213,
    1214,   474,   474,   366,  1127,  1130,   674,  1129,   674,  1025,
    1211,   919,  1025,  1214,    43,   840,  1025,  1108,  1239,  1301,
    1154,   184,  1184,  1185,  1326,  1030,  1179,   983,  1181,    44,
     550,   550,   550,  1025,  1024,  1028,   231,   299,   423,   663,
    1061,  1109,  1163,  1164,   231,  1168,   550,  1170,  1195,  1198,
     214,   288,  1196,  1198,  1199,  1329,   293,  1288,   919,  1025,
    1327,   335,  1046,  1048,  1045,  1327,   366,  1133,   682,  1132,
     682,   193,   448,   806,  1025,  1061,  1141,  1142,   944,    18,
     945,  1258,  1116,  1025,   700,   919,   703,   593,   592,   927,
     669,   984,   704,   984,   989,   990,  1045,   984,   989,   703,
     987,   989,   990,   992,    30,   433,   198,   199,   200,   279,
     373,   425,  1110,    30,   433,   145,   144,     1,  1017,  1008,
     671,  1023,   184,  1013,   420,   919,  1016,   983,   335,   549,
     919,   673,  1088,  1105,  1048,  1106,  1276,   194,   222,   294,
     468,   513,   756,  1339,    43,  1025,   574,   403,   474,   597,
     767,    31,    43,    50,   775,    59,  1030,   435,   443,   783,
     783,  1339,  1339,  1030,  1213,  1213,    31,  1339,    31,    31,
      31,    31,   810,   811,  1109,   809,   684,  1360,    50,    50,
      50,   850,  1342,  1326,  1360,   550,  1328,    50,   518,    50,
     846,  1346,   840,  1345,  1345,  1345,   550,  1339,   684,   684,
     684,   867,   868,  1033,  1339,  1356,   287,  1030,   704,   704,
      38,   883,   704,  1050,  1050,  1050,  1050,   516,   992,   704,
    1117,    43,   992,  1059,  1060,  1117,   992,   992,  1117,   992,
     992,  1117,   103,   101,     1,   103,   102,  1117,   101,   103,
    1027,  1119,  1117,  1117,  1117,  1117,   215,   267,   419,   524,
     552,  1305,  1117,   840,  1059,   704,   102,   103,  1117,  1117,
     101,   102,   103,  1117,     1,   992,   840,   992,   840,   992,
     992,   992,   992,  1117,  1117,  1059,   283,   281,   297,   339,
    1337,  1366,  1367,  1370,   716,  1046,   919,   338,   460,  1276,
     919,   431,   213,  1255,  1259,   258,   480,   581,   586,  1074,
     395,   421,  1339,   954,   953,  1145,   338,   338,  1025,   159,
     581,  1358,  1245,  1247,  1248,   284,  1242,   840,   195,   240,
     324,   377,   555,  1230,  1231,  1232,  1238,  1219,  1220,  1199,
    1025,  1036,  1036,  1036,   338,  1214,  1025,   374,  1134,   919,
    1186,  1185,    44,   420,   919,  1187,   919,   840,   432,  1025,
    1048,    43,  1025,  1345,  1048,   432,   434,  1171,  1199,  1340,
    1199,   512,   350,  1331,   919,  1360,    43,   518,  1025,  1108,
    1285,  1046,   338,  1030,  1296,  1297,  1323,  1025,  1298,  1299,
    1300,   919,  1142,  1342,  1342,    18,  1025,   992,   704,   990,
     987,   685,   686,   704,  1002,    49,    56,   207,   703,   983,
     990,  1018,  1019,  1020,  1021,  1024,  1045,   443,   145,  1048,
     184,  1090,  1091,   335,  1030,  1030,   766,  1360,   520,   758,
      31,    31,  1030,    31,   574,   434,   432,   811,   454,   814,
     230,   551,   851,   326,    50,   550,  1328,  1328,    31,  1030,
    1030,  1030,  1120,    43,    50,  1108,  1323,  1323,  1323,   868,
     864,   865,  1030,  1346,   704,  1117,   704,  1060,  1117,   704,
     704,   201,   206,   207,   343,   414,   415,  1306,  1308,   704,
     992,   704,   992,   376,  1341,   704,   992,   704,   992,   992,
     704,  1117,  1117,   704,   704,  1117,   704,  1117,   704,  1117,
     704,  1117,   704,   388,  1117,  1309,   704,   704,  1117,  1117,
    1117,   208,  1310,  1311,  1324,  1117,  1117,  1117,  1309,   704,
     377,   555,  1314,   992,   704,   992,   704,   704,   992,   704,
     992,   704,  1117,   704,   700,  1346,    31,   194,   525,  1367,
      22,    23,  1371,  1046,   550,  1263,   325,  1025,    43,   433,
     992,  1261,  1260,   380,   663,   913,  1050,  1262,   421,   485,
     499,   936,   992,   992,   919,  1046,  1046,  1243,   284,   269,
    1332,  1248,   550,   231,  1232,   840,  1233,  1234,   488,  1221,
      33,  1222,  1227,  1228,  1229,   574,  1046,  1061,  1339,   942,
    1025,  1188,  1189,   919,   145,   336,   463,     1,   357,   574,
    1200,  1197,  1339,   439,  1349,    57,  1046,  1360,   685,  1284,
     265,   286,   537,  1300,  1360,  1025,   704,   704,   703,   989,
     703,   989,  1003,   990,  1021,   144,   684,   203,   685,   686,
     990,  1011,   231,  1107,    23,    25,  1093,  1094,  1095,  1096,
     184,  1091,  1097,  1048,   758,   396,  1339,    31,  1354,  1354,
     533,  1049,  1326,  1328,    50,    43,    50,    43,    50,   865,
    1030,   704,  1117,   232,  1307,  1308,   704,   992,   704,   992,
     181,  1353,   704,   992,   704,   992,   704,   704,   704,  1117,
     704,   704,   704,    31,  1324,   704,   704,   704,  1117,   704,
    1311,   324,   376,  1335,   704,   704,   704,  1324,   704,   992,
     704,   992,   704,   704,   704,   195,  1275,   319,  1368,   525,
     458,  1372,   379,  1025,   431,   499,   231,  1323,   840,   231,
    1234,  1230,  1222,   327,  1057,  1032,  1213,  1030,   690,   686,
    1187,  1184,  1033,    43,  1033,   458,  1213,   338,   445,  1201,
    1033,  1025,   379,  1297,  1331,  1331,  1331,    57,   989,   989,
     704,   990,  1019,   703,   990,  1022,  1045,   703,  1022,   919,
    1048,  1083,   307,   357,   369,   445,  1213,  1369,  1092,  1095,
     319,   443,   184,  1099,  1107,   760,  1360,   409,   768,   759,
    1030,  1339,  1339,    43,  1049,  1328,   704,   704,   343,   704,
     704,   194,  1324,   704,   992,   704,   704,   704,   704,  1117,
    1117,   704,   704,   704,   459,  1213,  1346,  1025,    50,   840,
    1249,   840,   194,   222,  1235,  1236,  1237,  1240,   840,   195,
     240,   377,   555,  1223,  1224,    33,  1201,    43,   992,  1190,
    1189,  1339,  1213,   458,   992,  1025,  1025,  1025,  1025,   704,
     704,  1022,   990,  1022,   919,  1213,  1098,   253,  1089,  1083,
     293,   474,   476,   769,  1030,    31,    31,  1117,   704,   704,
     704,  1117,  1213,  1369,  1235,  1237,   355,  1338,  1235,   840,
    1225,  1226,  1235,  1225,  1225,  1224,    31,  1202,  1215,  1339,
     265,   537,   704,   704,    23,  1333,  1100,   322,  1101,   840,
    1235,  1226,  1025,   684,  1202,  1331,  1331,   919,  1333,  1102,
     673,  1215,  1025,  1025,   919,  1333,   919
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   706,   707,   707,   708,   708,   710,   709,   711,   711,
     711,   712,   712,   713,   713,   714,   714,   714,   714,   715,
     716,   716,   717,   717,   718,   718,   719,   719,   719,   720,
     720,   721,   721,   721,   721,   721,   721,   721,   722,   723,
     723,   723,   723,   724,   725,   726,   726,   727,   727,   728,
     728,   728,   728,   729,   730,   731,   731,   732,   732,   732,
     733,   733,   733,   734,   734,   734,   734,   734,   735,   735,
     736,   736,   737,   737,   738,   738,   738,   739,   739,   740,
     739,   741,   741,   742,   742,   742,   742,   742,   742,   743,
     743,   744,   744,   744,   744,   745,   745,   746,   746,   746,
     747,   747,   748,   748,   749,   749,   750,   750,   751,   751,
     752,   752,   753,   753,   754,   754,   754,   754,   754,   754,
     754,   754,   754,   754,   754,   754,   754,   755,   756,   756,
     756,   757,   758,   758,   759,   759,   760,   760,   761,   761,
     761,   761,   762,   763,   763,   763,   764,   764,   765,   766,
     766,   767,   767,   767,   768,   768,   769,   769,   770,   771,
     771,   771,   771,   772,   772,   772,   772,   773,   774,   774,
     775,   775,   775,   776,   777,   778,   779,   780,   780,   780,
     781,   782,   782,   782,   783,   783,   784,   784,   785,   785,
     785,   785,   785,   785,   785,   785,   786,   786,   787,   787,
     787,   787,   787,   788,   789,   789,   790,   790,   791,   792,
     792,   792,   793,   793,   794,   795,   796,   797,   797,   798,
     798,   798,   798,   798,   799,   800,   800,   801,   801,   801,
     801,   801,   801,   801,   801,   802,   802,   803,   803,   804,
     804,   805,   805,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   807,   807,   807,   807,   807,   808,   808,
     809,   809,   809,   810,   810,   811,   811,   812,   812,   812,
     813,   813,   813,   813,   814,   814,   815,   815,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   817,   817,
     817,   817,   817,   817,   817,   817,   818,   818,   819,   818,
     820,   820,   821,   822,   821,   823,   821,   824,   821,   825,
     821,   821,   826,   826,   828,   827,   829,   827,   830,   830,
     831,   831,   832,   832,   832,   832,   832,   832,   832,   832,
     832,   832,   832,   832,   833,   834,   834,   835,   835,   835,
     836,   836,   836,   837,   837,   838,   838,   839,   840,   840,
     841,   841,   842,   843,   843,   844,   844,   844,   844,   845,
     845,   845,   846,   846,   846,   846,   846,   846,   847,   847,
     848,   848,   849,   849,   850,   850,   851,   851,   852,   852,
     853,   853,   854,   854,   855,   855,   856,   856,   856,   856,
     856,   857,   858,   859,   859,   860,   860,   861,   861,   862,
     863,   863,   864,   864,   865,   866,   866,   867,   867,   868,
     869,   869,   870,   870,   871,   871,   871,   871,   871,   872,
     872,   872,   872,   873,   873,   873,   873,   873,   873,   873,
     873,   873,   873,   873,   874,   874,   875,   876,   876,   877,
     877,   877,   877,   877,   877,   877,   877,   877,   877,   877,
     877,   877,   877,   877,   877,   877,   878,   878,   878,   878,
     878,   878,   878,   879,   880,   880,   881,   882,   882,   883,
     883,   884,   884,   885,   885,   886,   886,   886,   887,   887,
     887,   888,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   890,   890,   890,   890,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   898,   899,   899,   899,   900,   901,
     902,   902,   903,   903,   904,   904,   904,   905,   905,   906,
     907,   908,   909,   908,   908,   908,   910,   910,   910,   911,
     911,   912,   912,   912,   912,   913,   913,   913,   914,   915,
     914,   916,   916,   916,   916,   916,   916,   917,   917,   918,
     918,   918,   918,   919,   919,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   920,   920,   920,
     920,   920,   920,   920,   920,   920,   920,   921,   921,   922,
     922,   923,   923,   923,   923,   923,   923,   923,   923,   923,
     923,   923,   923,   924,   925,   925,   926,   927,   927,   928,
     928,   928,   928,   928,   929,   929,   930,   931,   932,   932,
     933,   933,   933,   933,   934,   934,   934,   935,   936,   936,
     936,   936,   936,   937,   937,   937,   937,   938,   938,   939,
     939,   939,   940,   940,   941,   942,   942,   942,   942,   943,
     943,   944,   944,   945,   945,   946,   946,   947,   948,   949,
     949,   951,   950,   953,   952,   954,   952,   955,   956,   956,
     956,   956,   957,   957,   958,   959,   959,   959,   959,   959,
     960,   961,   961,   962,   962,   963,   963,   964,   965,   966,
     966,   967,   967,   967,   967,   967,   968,   969,   970,   970,
     971,   971,   971,   971,   972,   972,   973,   973,   974,   973,
     973,   975,   975,   975,   975,   976,   976,   976,   976,   976,
     977,   977,   977,   978,   979,   979,   980,   980,   981,   981,
     981,   981,   981,   981,   981,   981,   982,   983,   984,   984,
     984,   984,   984,   985,   985,   985,   985,   985,   986,   986,
     987,   987,   987,   987,   987,   987,   988,   989,   989,   990,
     991,   991,   991,   991,   991,   991,   992,   993,   993,   993,
     994,   994,   994,   995,   995,   995,   995,   996,   996,   997,
     998,   999,  1000,  1001,  1002,  1001,  1003,  1003,  1004,  1004,
    1005,  1006,  1007,  1007,  1008,  1009,  1009,  1009,  1010,  1011,
    1010,  1012,  1012,  1013,  1013,  1014,  1015,  1015,  1017,  1016,
    1016,  1018,  1018,  1019,  1019,  1019,  1019,  1019,  1019,  1019,
    1020,  1020,  1021,  1021,  1021,  1021,  1021,  1021,  1021,  1022,
    1022,  1023,  1023,  1024,  1024,  1025,  1026,  1027,  1027,  1027,
    1027,  1028,  1028,  1029,  1030,  1031,  1031,  1032,  1032,  1033,
    1033,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,  1034,
    1034,  1034,  1034,  1034,  1034,  1034,  1035,  1035,  1035,  1035,
    1035,  1035,  1036,  1036,  1037,  1037,  1037,  1038,  1038,  1039,
    1040,  1041,  1041,  1042,  1042,  1042,  1042,  1042,  1043,  1043,
    1044,  1045,  1045,  1045,  1045,  1045,  1045,  1046,  1046,  1047,
    1047,  1048,  1048,  1048,  1049,  1049,  1049,  1049,  1049,  1049,
    1049,  1049,  1050,  1050,  1050,  1050,  1050,  1050,  1050,  1050,
    1051,  1052,  1053,  1052,  1054,  1054,  1055,  1055,  1055,  1056,
    1056,  1056,  1057,  1058,  1058,  1058,  1059,  1059,  1060,  1060,
    1061,  1061,  1061,  1061,  1061,  1061,  1062,  1062,  1064,  1063,
    1065,  1065,  1066,  1067,  1067,  1067,  1067,  1069,  1068,  1070,
    1070,  1071,  1072,  1072,  1072,  1072,  1072,  1072,  1073,  1073,
    1074,  1074,  1075,  1075,  1075,  1076,  1076,  1076,  1076,  1077,
    1077,  1077,  1077,  1078,  1078,  1079,  1080,  1080,  1080,  1080,
    1081,  1082,  1082,  1084,  1083,  1085,  1085,  1086,  1086,  1088,
    1089,  1087,  1090,  1090,  1092,  1091,  1093,  1093,  1093,  1093,
    1094,  1094,  1095,  1096,  1097,  1098,  1097,  1099,  1100,  1099,
    1101,  1102,  1101,  1103,  1103,  1104,  1105,  1105,  1106,  1107,
    1107,  1108,  1108,  1108,  1109,  1109,  1109,  1109,  1110,  1110,
    1110,  1110,  1110,  1110,  1111,  1111,  1112,  1113,  1114,  1114,
    1115,  1115,  1115,  1116,  1116,  1117,  1117,  1118,  1118,  1119,
    1119,  1119,  1119,  1119,  1119,  1119,  1120,  1120,  1121,  1121,
    1121,  1121,  1121,  1122,  1122,  1123,  1124,  1124,  1124,  1124,
    1124,  1124,  1125,  1126,  1126,  1126,  1126,  1126,  1126,  1127,
    1127,  1128,  1128,  1130,  1129,  1131,  1131,  1133,  1132,  1134,
    1134,  1135,  1136,  1136,  1136,  1136,  1136,  1136,  1137,  1137,
    1138,  1138,  1139,  1139,  1139,  1140,  1140,  1141,  1141,  1142,
    1142,  1142,  1142,  1143,  1143,  1145,  1144,  1146,  1146,  1147,
    1148,  1149,  1150,  1150,  1151,  1152,  1152,  1153,  1154,  1154,
    1155,  1155,  1156,  1157,  1158,  1158,  1159,  1159,  1159,  1159,
    1159,  1161,  1160,  1162,  1162,  1163,  1163,  1163,  1163,  1163,
    1164,  1164,  1165,  1165,  1165,  1165,  1165,  1165,  1165,  1165,
    1165,  1165,  1165,  1166,  1165,  1167,  1167,  1168,  1169,  1169,
    1170,  1171,  1171,  1172,  1172,  1173,  1174,  1174,  1175,  1175,
    1176,  1177,  1177,  1178,  1178,  1179,  1180,  1181,  1182,  1182,
    1183,  1184,  1184,  1186,  1185,  1187,  1187,  1188,  1188,  1189,
    1189,  1190,  1190,  1191,  1191,  1192,  1192,  1193,  1193,  1194,
    1194,  1195,  1195,  1196,  1196,  1197,  1197,  1198,  1198,  1199,
    1199,  1200,  1200,  1201,  1201,  1202,  1202,  1203,  1203,  1204,
    1204,  1205,  1206,  1207,  1207,  1208,  1208,  1209,  1209,  1210,
    1210,  1211,  1212,  1213,  1213,  1214,  1215,  1216,  1216,  1217,
    1217,  1218,  1218,  1218,  1218,  1220,  1219,  1221,  1219,  1222,
    1223,  1223,  1224,  1224,  1224,  1224,  1224,  1225,  1225,  1226,
    1227,  1227,  1227,  1228,  1229,  1229,  1230,  1231,  1231,  1232,
    1232,  1233,  1233,  1234,  1235,  1235,  1236,  1236,  1237,  1238,
    1238,  1238,  1238,  1239,  1239,  1239,  1240,  1240,  1241,  1241,
    1241,  1241,  1241,  1242,  1242,  1242,  1242,  1243,  1243,  1243,
    1244,  1244,  1245,  1245,  1245,  1245,  1245,  1245,  1245,  1245,
    1245,  1246,  1247,  1247,  1248,  1249,  1249,  1250,  1250,  1251,
    1252,  1253,  1253,  1254,  1254,  1254,  1254,  1255,  1255,  1256,
    1256,  1257,  1257,  1258,  1258,  1259,  1259,  1259,  1259,  1260,
    1260,  1260,  1261,  1261,  1261,  1262,  1262,  1262,  1262,  1263,
    1263,  1264,  1264,  1265,  1265,  1266,  1267,  1267,  1269,  1268,
    1270,  1270,  1271,  1272,  1272,  1273,  1273,  1273,  1274,  1274,
    1275,  1275,  1276,  1276,  1277,  1277,  1278,  1279,  1280,  1280,
    1281,  1282,  1282,  1283,  1283,  1284,  1284,  1284,  1284,  1285,
    1285,  1285,  1285,  1286,  1286,  1287,  1287,  1288,  1289,  1289,
    1290,  1290,  1291,  1292,  1293,  1294,  1294,  1294,  1295,  1295,
    1296,  1296,  1297,  1298,  1298,  1298,  1298,  1299,  1299,  1300,
    1300,  1300,  1300,  1301,  1301,  1301,  1302,  1302,  1303,  1303,
    1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,
    1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1304,  1305,
    1305,  1305,  1305,  1305,  1306,  1306,  1306,  1307,  1307,  1308,
    1308,  1308,  1308,  1309,  1309,  1309,  1310,  1310,  1311,  1312,
    1312,  1312,  1312,  1312,  1312,  1312,  1312,  1313,  1313,  1314,
    1314,  1314,  1315,  1315,  1315,  1315,  1315,  1315,  1315,  1315,
    1315,  1315,  1315,  1315,  1316,  1316,  1316,  1316,  1316,  1316,
    1316,  1316,  1316,  1316,  1316,  1316,  1316,  1316,  1316,  1316,
    1316,  1316,  1316,  1316,  1316,  1317,  1318,  1318,  1318,  1318,
    1318,  1318,  1318,  1318,  1318,  1318,  1318,  1318,  1318,  1319,
    1319,  1319,  1320,  1320,  1320,  1320,  1320,  1320,  1320,  1320,
    1321,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,  1322,
    1322,  1322,  1322,  1323,  1323,  1324,  1324,  1325,  1325,  1326,
    1326,  1327,  1327,  1328,  1328,  1329,  1329,  1330,  1330,  1331,
    1331,  1332,  1332,  1333,  1333,  1334,  1334,  1335,  1335,  1335,
    1336,  1336,  1337,  1337,  1338,  1338,  1339,  1339,  1340,  1340,
    1341,  1341,  1342,  1342,  1342,  1343,  1343,  1344,  1344,  1345,
    1345,  1346,  1346,  1347,  1347,  1348,  1348,  1349,  1349,  1350,
    1350,  1351,  1351,  1352,  1352,  1352,  1353,  1353,  1354,  1354,
    1355,  1355,  1356,  1356,  1357,  1357,  1358,  1358,  1359,  1359,
    1359,  1360,  1360,  1361,  1361,  1361,  1361,  1362,  1362,  1363,
    1363,  1364,  1365,  1365,  1365,  1365,  1365,  1366,  1366,  1367,
    1368,  1368,  1369,  1369,  1369,  1369,  1370,  1370,  1370,  1370,
    1371,  1371,  1372,  1372,  1373,  1374,  1374,  1375,  1375,  1376,
    1377,  1377,  1378,  1379,  1379,  1379,  1379,  1379
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     2,     1,     3,     0,     6,     4,     2,
       4,     0,     1,     1,     2,     5,     3,     5,     3,     6,
       0,     1,     0,     2,     5,     6,     0,     3,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     5,     3,     4,     4,     0,     1,     4,
       4,     4,     4,     4,     5,     0,     1,     1,     1,     2,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       0,     3,     1,     2,     1,     1,     1,     0,     2,     0,
       4,     1,     2,     2,     3,     3,     2,     3,     1,     1,
       2,     2,     3,     2,     4,     1,     2,     5,     5,     4,
       0,     1,     1,     1,     1,     2,     5,     4,     2,     2,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     1,
       1,     7,     0,     3,     1,     2,     0,     2,     3,     5,
       3,     3,     1,     3,     5,     5,     4,     5,     5,     0,
       4,     1,     1,     1,     0,     1,     1,     1,     1,     0,
       2,     3,     1,     2,     3,     2,     2,     4,     0,     1,
       1,     1,     1,     4,     5,     3,     3,     0,     1,     1,
       3,     2,     2,     2,     0,     1,     1,     2,     2,     4,
       2,     5,     2,     5,     2,     4,     1,     2,     1,     1,
       1,     1,     1,     4,     0,     2,     0,     4,     4,     3,
       3,     2,     1,     2,     2,     3,     3,     0,     3,     0,
       5,     4,     4,     3,     1,     1,     2,     1,     4,     4,
       6,     3,     4,     1,     4,     1,     1,     1,     1,     2,
       2,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     3,     2,     1,     1,     1,     1,     3,     4,     2,
       4,     4,     8,     8,     0,     3,     1,     2,     2,     5,
       2,     5,     2,     5,     5,     4,     4,     4,     0,     1,
       1,     1,     2,     2,     2,     3,     0,     1,     0,     3,
       1,     2,     2,     0,     4,     0,     4,     0,     4,     0,
       4,     3,     1,     2,     0,     4,     0,     5,     2,     2,
       1,     2,     1,     1,     1,     3,     4,     3,     3,     2,
       2,     4,     1,     1,     4,     1,     3,     0,     1,     1,
       3,     3,     3,     1,     1,     1,     2,     3,     1,     1,
       1,     2,     1,     4,     4,     3,     2,     2,     1,     2,
       1,     1,     5,     4,     3,     3,     2,     1,     0,     3,
       4,     4,     1,     2,     5,     4,     1,     1,     1,     1,
       0,     1,     1,     2,     1,     2,     3,     4,     4,     3,
       3,     2,     1,     6,     4,     2,     2,     1,     2,     4,
       1,     1,     1,     2,     1,     0,     3,     1,     2,     1,
       2,     1,     1,     1,     1,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     5,     5,     5,     5,     5,     3,
       4,     3,     5,     2,     1,     3,     2,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     5,     4,     4,     2,
       2,     2,     2,     1,     1,     2,     2,     0,     1,     0,
       1,     0,     1,     1,     2,     0,     3,     3,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     5,     2,     2,
       4,     3,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     1,     1,     3,     2,     1,     2,     2,     3,     3,
       0,     2,     1,     1,     0,     2,     1,     3,     3,     3,
       1,     0,     0,     5,     5,     3,     2,     4,     2,     1,
       2,     2,     4,     3,     3,     1,     1,     1,     0,     0,
       7,     1,     1,     2,     2,     2,     3,     1,     1,     2,
       2,     4,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     3,     4,     3,     4,     3,     3,     3,     4,
       3,     6,     3,     2,     3,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     3,     0,     1,
       3,     5,     3,     4,     0,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       1,     1,     1,     2,     1,     3,     2,     2,     1,     6,
       4,     0,     1,     0,     2,     2,     2,     2,     3,     0,
       1,     0,     3,     0,     3,     0,     3,     2,     0,     1,
       2,     3,     1,     3,     2,     1,     1,     1,     1,     1,
       4,     0,     1,     0,     1,     2,     2,     2,     3,     0,
       1,     3,     1,     3,     1,     3,     5,     5,     2,     2,
       2,     2,     2,     2,     1,     4,     2,     2,     0,     3,
       1,     0,     3,     3,     2,     1,     2,     1,     1,     1,
       3,     2,     2,     2,     1,     2,     1,     3,     1,     1,
       3,     3,     3,     3,     2,     1,     3,     1,     1,     3,
       3,     3,     3,     3,     4,     1,     1,     2,     2,     4,
       1,     3,     3,     5,     3,     5,     2,     1,     2,     1,
       2,     2,     2,     2,     1,     2,     1,     3,     3,     1,
       3,     3,     1,     3,     2,     2,     1,     3,     1,     2,
       3,     1,     2,     1,     0,     4,     1,     2,     0,     1,
       4,     1,     1,     3,     1,     1,     1,     1,     1,     0,
       5,     1,     2,     2,     3,     1,     1,     2,     0,     3,
       2,     1,     3,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     2,     3,     3,     5,     3,     5,     1,
       2,     0,     1,     1,     1,     1,     1,     3,     2,     2,
       1,     5,     4,     1,     1,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     5,     5,     5,
       4,     5,     1,     2,     1,     1,     1,     2,     2,     2,
       3,     0,     1,     3,     3,     5,     5,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     3,     3,     2,
       2,     3,     1,     3,     3,     3,     3,     2,     2,     3,
       1,     3,     0,     5,     1,     2,     3,     2,     2,     1,
       2,     2,     3,     1,     2,     1,     1,     2,     1,     1,
       1,     2,     2,     2,     2,     3,     1,     1,     0,     3,
       1,     2,     2,     1,     1,     1,     1,     0,     3,     1,
       2,     2,     0,     1,     3,     4,     3,     2,     1,     1,
       0,     1,     2,     2,     2,     2,     2,     2,     1,     1,
       3,     2,     2,     1,     3,     2,     3,     2,     2,     1,
       1,     2,     1,     0,     3,     3,     2,     0,     2,     0,
       0,     9,     1,     2,     0,     4,     2,     2,     1,     1,
       1,     2,     1,     3,     0,     0,     5,     0,     0,     5,
       0,     0,     4,     3,     3,     6,     1,     2,     6,     0,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     2,     3,     0,     1,
       3,     5,     4,     1,     2,     1,     2,     1,     1,     3,
       1,     1,     1,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     3,     2,     1,     2,     3,     3,     4,
       3,     4,     4,     0,     2,     1,     2,     1,     1,     0,
       2,     1,     2,     0,     3,     1,     2,     0,     3,     0,
       3,     1,     2,     3,     3,     4,     3,     4,     3,     1,
       3,     1,     1,     3,     2,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     2,     0,     4,     2,     2,     2,
       3,     2,     0,     1,     1,     3,     4,     2,     0,     1,
       2,     2,     2,     3,     0,     1,     1,     4,     7,     2,
       2,     0,     8,     1,     2,     1,     1,     4,     4,     4,
       1,     3,     4,     4,     4,     5,     5,     5,     5,     5,
       5,     5,     4,     0,     3,     1,     2,     3,     1,     2,
       1,     1,     1,     2,     2,     3,     0,     1,     1,     4,
       2,     0,     2,     1,     2,     3,     1,     1,     4,     7,
       1,     1,     2,     0,     4,     1,     2,     1,     3,     3,
       1,     1,     1,     1,     1,     5,     4,     7,     6,     1,
       2,     4,     3,     1,     1,     1,     2,     0,     4,     0,
       4,     2,     4,     2,     4,     1,     3,     4,     2,     2,
       2,     2,     3,     0,     1,     1,     3,     1,     2,     1,
       2,     2,     1,     1,     2,     1,     1,     1,     1,     0,
       1,     5,     7,     5,     9,     0,     2,     0,     3,     3,
       1,     2,     3,     2,     2,     2,     2,     1,     2,     2,
       0,     2,     1,     1,     1,     3,     1,     1,     2,     4,
       2,     1,     2,     4,     0,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     4,
       3,     5,     5,     1,     1,     3,     4,     4,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     2,     4,     1,     1,     2,     2,     2,
       3,     0,     1,     1,     3,     3,     5,     1,     1,     2,
       4,     1,     1,     1,     2,     1,     3,     3,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       4,     3,     2,     1,     1,     2,     1,     2,     0,     3,
       1,     2,     3,     1,     3,     2,     5,     1,     3,     2,
       1,     2,     1,     1,     2,     2,     2,     3,     0,     1,
       2,     1,     2,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     5,     2,     3,     1,     2,     2,
       0,     1,     2,     3,     4,     1,     1,     1,     0,     3,
       1,     3,     2,     1,     4,     4,     7,     1,     2,     1,
       4,     4,     7,     2,     3,     2,     0,     1,     4,     1,
       1,     1,     4,     4,     6,     4,     4,     6,     4,     5,
       2,     7,     5,     6,     7,     4,     6,     5,     4,     5,
       5,     5,     5,     5,     5,     5,     4,     4,     4,     4,
       4,     6,     4,     1,     3,     7,     6,     5,     5,     6,
       4,     5,     6,     4,     4,     4,     5,     4,     5,     6,
       4,     5,     6,     4,     5,     6,     5,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     2,     4,     5,
       6,     4,     5,     4,     5,     4,     5,     1,     1,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     0,     1,     0,     1,     0,
       1,     0,     1,     0,     1,     0,     1,     0,     1,     0,
       1,     0,     1,     0,     1,     0,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     1,     0,     1,     0,     1,
       0,     1,     0,     1,     1,     0,     1,     0,     1,     0,
       1,     0,     1,     0,     1,     0,     1,     0,     1,     0,
       1,     0,     1,     0,     1,     1,     0,     3,     0,     1,
       0,     1,     0,     1,     0,     1,     0,     1,     0,     1,
       2,     0,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     4,     5,     6,     6,     2,     1,     2,     3,
       0,     2,     1,     1,     1,     1,     1,     2,     2,     3,
       1,     1,     0,     1,     2,     1,     2,     1,     1,     2,
       1,     2,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yykind)
    {
    case YYSYMBOL_ALNUM: /* ALNUM  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14613 "parse.cc"
        break;

    case YYSYMBOL_ALPHED: /* ALPHED  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14619 "parse.cc"
        break;

    case YYSYMBOL_ERROR: /* ERROR  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14625 "parse.cc"
        break;

    case YYSYMBOL_EXCEPTION: /* EXCEPTION  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14631 "parse.cc"
        break;

    case YYSYMBOL_SIZE_ERROR: /* "SIZE ERROR"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14637 "parse.cc"
        break;

    case YYSYMBOL_LEVEL: /* LEVEL  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14643 "parse.cc"
        break;

    case YYSYMBOL_LEVEL66: /* "66"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14649 "parse.cc"
        break;

    case YYSYMBOL_LEVEL78: /* "78"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14655 "parse.cc"
        break;

    case YYSYMBOL_LEVEL88: /* "88"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14661 "parse.cc"
        break;

    case YYSYMBOL_CLASS_NAME: /* "class name"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14667 "parse.cc"
        break;

    case YYSYMBOL_NAME: /* NAME  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14673 "parse.cc"
        break;

    case YYSYMBOL_NAME88: /* "Level 88 NAME"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14679 "parse.cc"
        break;

    case YYSYMBOL_NUME: /* "Name"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14685 "parse.cc"
        break;

    case YYSYMBOL_NUMED: /* "NUMERIC-EDITED picture"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14691 "parse.cc"
        break;

    case YYSYMBOL_NUMED_CR: /* "NUMERIC-EDITED CR picture"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14697 "parse.cc"
        break;

    case YYSYMBOL_NUMED_DB: /* "NUMERIC-EDITED DB picture"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14703 "parse.cc"
        break;

    case YYSYMBOL_NINEDOT: /* NINEDOT  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14709 "parse.cc"
        break;

    case YYSYMBOL_NINES: /* NINES  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14715 "parse.cc"
        break;

    case YYSYMBOL_NINEV: /* NINEV  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14721 "parse.cc"
        break;

    case YYSYMBOL_PIC_P: /* PIC_P  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14727 "parse.cc"
        break;

    case YYSYMBOL_ONES: /* ONES  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14733 "parse.cc"
        break;

    case YYSYMBOL_SPACES: /* SPACES  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14739 "parse.cc"
        break;

    case YYSYMBOL_LITERAL: /* LITERAL  */
#line 965 "parse.y"
         { fprintf(yyo, "%s'%.*s'{" HOST_SIZE_T_PRINT_UNSIGNED "} %s",
                        ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, (fmt_size_t)((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 14747 "parse.cc"
        break;

    case YYSYMBOL_END: /* END  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14753 "parse.cc"
        break;

    case YYSYMBOL_EOP: /* EOP  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14759 "parse.cc"
        break;

    case YYSYMBOL_FILENAME: /* FILENAME  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14765 "parse.cc"
        break;

    case YYSYMBOL_INVALID: /* INVALID  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14771 "parse.cc"
        break;

    case YYSYMBOL_NUMBER: /* NUMBER  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14777 "parse.cc"
        break;

    case YYSYMBOL_NEGATIVE: /* NEGATIVE  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14783 "parse.cc"
        break;

    case YYSYMBOL_NUMSTR: /* "numeric literal"  */
#line 980 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).numstr).string ); }
#line 14789 "parse.cc"
        break;

    case YYSYMBOL_OVERFLOW_kw: /* "OVERFLOW"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14795 "parse.cc"
        break;

    case YYSYMBOL_BINARY_INTEGER: /* BINARY_INTEGER  */
#line 983 "parse.y"
         { fprintf(yyo, "{%s %c%u}", cbl_field_type_str(((*yyvaluep).computational).type),
                                     ((*yyvaluep).computational).signable? '+' : ' ',
                                     ((*yyvaluep).computational).capacity ); }
#line 14803 "parse.cc"
        break;

    case YYSYMBOL_COMPUTATIONAL: /* COMPUTATIONAL  */
#line 983 "parse.y"
         { fprintf(yyo, "{%s %c%u}", cbl_field_type_str(((*yyvaluep).computational).type),
                                     ((*yyvaluep).computational).signable? '+' : ' ',
                                     ((*yyvaluep).computational).capacity ); }
#line 14811 "parse.cc"
        break;

    case YYSYMBOL_POSITIVE: /* POSITIVE  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14817 "parse.cc"
        break;

    case YYSYMBOL_SECTION: /* SECTION  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14823 "parse.cc"
        break;

    case YYSYMBOL_STANDARD_ALPHABET: /* "STANDARD ALPHABET"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14829 "parse.cc"
        break;

    case YYSYMBOL_SWITCH: /* SWITCH  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14835 "parse.cc"
        break;

    case YYSYMBOL_UPSI: /* UPSI  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 14841 "parse.cc"
        break;

    case YYSYMBOL_ZERO: /* ZERO  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14847 "parse.cc"
        break;

    case YYSYMBOL_SYSIN: /* SYSIN  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14853 "parse.cc"
        break;

    case YYSYMBOL_SYSIPT: /* SYSIPT  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14859 "parse.cc"
        break;

    case YYSYMBOL_SYSOUT: /* SYSOUT  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14865 "parse.cc"
        break;

    case YYSYMBOL_SYSLIST: /* SYSLIST  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14871 "parse.cc"
        break;

    case YYSYMBOL_SYSLST: /* SYSLST  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14877 "parse.cc"
        break;

    case YYSYMBOL_SYSPUNCH: /* SYSPUNCH  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14883 "parse.cc"
        break;

    case YYSYMBOL_SYSPCH: /* SYSPCH  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14889 "parse.cc"
        break;

    case YYSYMBOL_CONSOLE: /* CONSOLE  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14895 "parse.cc"
        break;

    case YYSYMBOL_C01: /* C01  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14901 "parse.cc"
        break;

    case YYSYMBOL_C02: /* C02  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14907 "parse.cc"
        break;

    case YYSYMBOL_C03: /* C03  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14913 "parse.cc"
        break;

    case YYSYMBOL_C04: /* C04  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14919 "parse.cc"
        break;

    case YYSYMBOL_C05: /* C05  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14925 "parse.cc"
        break;

    case YYSYMBOL_C06: /* C06  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14931 "parse.cc"
        break;

    case YYSYMBOL_C07: /* C07  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14937 "parse.cc"
        break;

    case YYSYMBOL_C08: /* C08  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14943 "parse.cc"
        break;

    case YYSYMBOL_C09: /* C09  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14949 "parse.cc"
        break;

    case YYSYMBOL_C10: /* C10  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14955 "parse.cc"
        break;

    case YYSYMBOL_C11: /* C11  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14961 "parse.cc"
        break;

    case YYSYMBOL_C12: /* C12  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14967 "parse.cc"
        break;

    case YYSYMBOL_CSP: /* CSP  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14973 "parse.cc"
        break;

    case YYSYMBOL_S01: /* S01  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14979 "parse.cc"
        break;

    case YYSYMBOL_S02: /* S02  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14985 "parse.cc"
        break;

    case YYSYMBOL_S03: /* S03  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14991 "parse.cc"
        break;

    case YYSYMBOL_S04: /* S04  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 14997 "parse.cc"
        break;

    case YYSYMBOL_S05: /* S05  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15003 "parse.cc"
        break;

    case YYSYMBOL_AFP_5A: /* "AFP 5A"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15009 "parse.cc"
        break;

    case YYSYMBOL_STDIN: /* STDIN  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15015 "parse.cc"
        break;

    case YYSYMBOL_STDOUT: /* STDOUT  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15021 "parse.cc"
        break;

    case YYSYMBOL_STDERR: /* STDERR  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15027 "parse.cc"
        break;

    case YYSYMBOL_LIST: /* LIST  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15033 "parse.cc"
        break;

    case YYSYMBOL_MAP: /* MAP  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15039 "parse.cc"
        break;

    case YYSYMBOL_NOLIST: /* NOLIST  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15045 "parse.cc"
        break;

    case YYSYMBOL_NOMAP: /* NOMAP  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15051 "parse.cc"
        break;

    case YYSYMBOL_NOSOURCE: /* NOSOURCE  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15057 "parse.cc"
        break;

    case YYSYMBOL_MIGHT_BE: /* "IS or IS NOT"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15063 "parse.cc"
        break;

    case YYSYMBOL_FUNCTION_UDF: /* "UDF name"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15069 "parse.cc"
        break;

    case YYSYMBOL_FUNCTION_UDF_0: /* "UDF"  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15075 "parse.cc"
        break;

    case YYSYMBOL_DATE_FMT: /* "date format"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15081 "parse.cc"
        break;

    case YYSYMBOL_TIME_FMT: /* "time format"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15087 "parse.cc"
        break;

    case YYSYMBOL_DATETIME_FMT: /* "datetime format"  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15093 "parse.cc"
        break;

    case YYSYMBOL_program_as: /* program_as  */
#line 965 "parse.y"
         { fprintf(yyo, "%s'%.*s'{" HOST_SIZE_T_PRINT_UNSIGNED "} %s",
                        ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, (fmt_size_t)((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 15101 "parse.cc"
        break;

    case YYSYMBOL_opt_init_value: /* opt_init_value  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15107 "parse.cc"
        break;

    case YYSYMBOL_namestr: /* namestr  */
#line 965 "parse.y"
         { fprintf(yyo, "%s'%.*s'{" HOST_SIZE_T_PRINT_UNSIGNED "} %s",
                        ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, (fmt_size_t)((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 15115 "parse.cc"
        break;

    case YYSYMBOL_selected_name: /* selected_name  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15121 "parse.cc"
        break;

    case YYSYMBOL_access_mode: /* access_mode  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15127 "parse.cc"
        break;

    case YYSYMBOL_lock_how: /* lock_how  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15133 "parse.cc"
        break;

    case YYSYMBOL_lock_mode: /* lock_mode  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15139 "parse.cc"
        break;

    case YYSYMBOL_multiple: /* multiple  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15145 "parse.cc"
        break;

    case YYSYMBOL_org_is: /* org_is  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15151 "parse.cc"
        break;

    case YYSYMBOL_org_clause1: /* org_clause1  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15157 "parse.cc"
        break;

    case YYSYMBOL_repo_as: /* repo_as  */
#line 965 "parse.y"
         { fprintf(yyo, "%s'%.*s'{" HOST_SIZE_T_PRINT_UNSIGNED "} %s",
                        ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, (fmt_size_t)((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 15165 "parse.cc"
        break;

    case YYSYMBOL_collating_sequence: /* collating_sequence  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15171 "parse.cc"
        break;

    case YYSYMBOL_locale_spec: /* locale_spec  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15177 "parse.cc"
        break;

    case YYSYMBOL_alphabet_seq: /* alphabet_seq  */
#line 986 "parse.y"
         { fprintf(yyo, "{'%s'-'%s'%s}",
                        ((*yyvaluep).colseq).low?  (const char*) ((*yyvaluep).colseq).low : "",
                        ((*yyvaluep).colseq).high? (const char*) ((*yyvaluep).colseq).high : "",
                        ((*yyvaluep).colseq).also? "+" : "" ); }
#line 15186 "parse.cc"
        break;

    case YYSYMBOL_alphabet_etc: /* alphabet_etc  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15192 "parse.cc"
        break;

    case YYSYMBOL_alphabet_lit: /* alphabet_lit  */
#line 965 "parse.y"
         { fprintf(yyo, "%s'%.*s'{" HOST_SIZE_T_PRINT_UNSIGNED "} %s",
                        ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, (fmt_size_t)((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 15200 "parse.cc"
        break;

    case YYSYMBOL_picture_sym: /* picture_sym  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15206 "parse.cc"
        break;

    case YYSYMBOL_fd_name: /* fd_name  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15212 "parse.cc"
        break;

    case YYSYMBOL_rec_contains: /* rec_contains  */
#line 974 "parse.y"
         { fprintf(yyo, "{" HOST_SIZE_T_PRINT_UNSIGNED "-" HOST_SIZE_T_PRINT_UNSIGNED "}",
                        (fmt_size_t)((*yyvaluep).min_max).min, (fmt_size_t)((*yyvaluep).min_max).max ); }
#line 15219 "parse.cc"
        break;

    case YYSYMBOL_alpha_val: /* alpha_val  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15225 "parse.cc"
        break;

    case YYSYMBOL_record_desc: /* record_desc  */
#line 974 "parse.y"
         { fprintf(yyo, "{" HOST_SIZE_T_PRINT_UNSIGNED "-" HOST_SIZE_T_PRINT_UNSIGNED "}",
                        (fmt_size_t)((*yyvaluep).min_max).min, (fmt_size_t)((*yyvaluep).min_max).max ); }
#line 15232 "parse.cc"
        break;

    case YYSYMBOL_record_vary: /* record_vary  */
#line 974 "parse.y"
         { fprintf(yyo, "{" HOST_SIZE_T_PRINT_UNSIGNED "-" HOST_SIZE_T_PRINT_UNSIGNED "}",
                        (fmt_size_t)((*yyvaluep).min_max).min, (fmt_size_t)((*yyvaluep).min_max).max ); }
#line 15239 "parse.cc"
        break;

    case YYSYMBOL_from_to: /* from_to  */
#line 974 "parse.y"
         { fprintf(yyo, "{" HOST_SIZE_T_PRINT_UNSIGNED "-" HOST_SIZE_T_PRINT_UNSIGNED "}",
                        (fmt_size_t)((*yyvaluep).min_max).min, (fmt_size_t)((*yyvaluep).min_max).max ); }
#line 15246 "parse.cc"
        break;

    case YYSYMBOL_cardinal: /* cardinal  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15252 "parse.cc"
        break;

    case YYSYMBOL_bound: /* bound  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15258 "parse.cc"
        break;

    case YYSYMBOL_level_name: /* level_name  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15268 "parse.cc"
        break;

    case YYSYMBOL_data_descr: /* data_descr  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15278 "parse.cc"
        break;

    case YYSYMBOL_const_value: /* const_value  */
#line 981 "parse.y"
         { const char *s = string_of(((*yyvaluep).float128));
           fprintf(yyo, "{%s}", s? s : "??" ); }
#line 15285 "parse.cc"
        break;

    case YYSYMBOL_data_descr1: /* data_descr1  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15295 "parse.cc"
        break;

    case YYSYMBOL_literalism: /* literalism  */
#line 965 "parse.y"
         { fprintf(yyo, "%s'%.*s'{" HOST_SIZE_T_PRINT_UNSIGNED "} %s",
                        ((*yyvaluep).literal).prefix, int(((*yyvaluep).literal).len), ((*yyvaluep).literal).data, (fmt_size_t)((*yyvaluep).literal).len,
                        ((*yyvaluep).literal).symbol_name()); }
#line 15303 "parse.cc"
        break;

    case YYSYMBOL_name66: /* name66  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15309 "parse.cc"
        break;

    case YYSYMBOL_data_clauses: /* data_clauses  */
#line 950 "parse.y"
         { fprintf(yyo, "clauses: 0x%04x", ((*yyvaluep).number)); }
#line 15315 "parse.cc"
        break;

    case YYSYMBOL_data_clause: /* data_clause  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15321 "parse.cc"
        break;

    case YYSYMBOL_alphanum_pic: /* alphanum_pic  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15327 "parse.cc"
        break;

    case YYSYMBOL_signed: /* signed  */
#line 976 "parse.y"
         { fprintf(yyo, "{%s}", ((*yyvaluep).number)? "+/-" : "" ); }
#line 15333 "parse.cc"
        break;

    case YYSYMBOL_nps: /* nps  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15339 "parse.cc"
        break;

    case YYSYMBOL_nine: /* nine  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15345 "parse.cc"
        break;

    case YYSYMBOL_nines: /* nines  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15351 "parse.cc"
        break;

    case YYSYMBOL_count: /* count  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15357 "parse.cc"
        break;

    case YYSYMBOL_numed: /* numed  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15363 "parse.cc"
        break;

    case YYSYMBOL_usage_clause1: /* usage_clause1  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15369 "parse.cc"
        break;

    case YYSYMBOL_by_value_arg: /* by_value_arg  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15375 "parse.cc"
        break;

    case YYSYMBOL_paragraph_name: /* paragraph_name  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15381 "parse.cc"
        break;

    case YYSYMBOL_sentence: /* sentence  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15387 "parse.cc"
        break;

    case YYSYMBOL_statements: /* statements  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15393 "parse.cc"
        break;

    case YYSYMBOL_statement: /* statement  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15399 "parse.cc"
        break;

    case YYSYMBOL_accept_refer: /* accept_refer  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15405 "parse.cc"
        break;

    case YYSYMBOL_envar: /* envar  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15411 "parse.cc"
        break;

    case YYSYMBOL_might_be: /* might_be  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15417 "parse.cc"
        break;

    case YYSYMBOL_posneg: /* posneg  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15423 "parse.cc"
        break;

    case YYSYMBOL_name88: /* name88  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15433 "parse.cc"
        break;

    case YYSYMBOL_scalar88: /* scalar88  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15439 "parse.cc"
        break;

    case YYSYMBOL_alloc_ret: /* alloc_ret  */
#line 952 "parse.y"
         { fprintf(yyo, "%s", ((*yyvaluep).refer)->field? name_of(((*yyvaluep).refer)->field) : "[omitted]"); }
#line 15445 "parse.cc"
        break;

    case YYSYMBOL_compute_expr: /* compute_expr  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15451 "parse.cc"
        break;

    case YYSYMBOL_exit_with: /* exit_with  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15457 "parse.cc"
        break;

    case YYSYMBOL_free_tgt: /* free_tgt  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15463 "parse.cc"
        break;

    case YYSYMBOL_simple_cond: /* simple_cond  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15469 "parse.cc"
        break;

    case YYSYMBOL_kind_of_name: /* kind_of_name  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15479 "parse.cc"
        break;

    case YYSYMBOL_bool_expr: /* bool_expr  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15485 "parse.cc"
        break;

    case YYSYMBOL_log_term: /* log_term  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15495 "parse.cc"
        break;

    case YYSYMBOL_rel_expr: /* rel_expr  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15505 "parse.cc"
        break;

    case YYSYMBOL_rel_abbr: /* rel_abbr  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15515 "parse.cc"
        break;

    case YYSYMBOL_rel_term: /* rel_term  */
#line 959 "parse.y"
         { fprintf(yyo, "%c %s",
                        ((*yyvaluep).rel_term_t).invert? '!' : ' ',
		        ((*yyvaluep).rel_term_t).term? name_of(((*yyvaluep).rel_term_t).term->field) : "<none>"); }
#line 15523 "parse.cc"
        break;

    case YYSYMBOL_rel_term1: /* rel_term1  */
#line 959 "parse.y"
         { fprintf(yyo, "%c %s",
                        ((*yyvaluep).rel_term_t).invert? '!' : ' ',
		        ((*yyvaluep).rel_term_t).term? name_of(((*yyvaluep).rel_term_t).term->field) : "<none>"); }
#line 15531 "parse.cc"
        break;

    case YYSYMBOL_expr: /* expr  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15537 "parse.cc"
        break;

    case YYSYMBOL_expr_term: /* expr_term  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15543 "parse.cc"
        break;

    case YYSYMBOL_num_term: /* num_term  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15549 "parse.cc"
        break;

    case YYSYMBOL_value: /* value  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15555 "parse.cc"
        break;

    case YYSYMBOL_factor: /* factor  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15561 "parse.cc"
        break;

    case YYSYMBOL_eval_subject1: /* eval_subject1  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15567 "parse.cc"
        break;

    case YYSYMBOL_eval_posneg: /* eval_posneg  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15573 "parse.cc"
        break;

    case YYSYMBOL_eval_abbr: /* eval_abbr  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15583 "parse.cc"
        break;

    case YYSYMBOL_true_false: /* true_false  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15589 "parse.cc"
        break;

    case YYSYMBOL_scalar: /* scalar  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15595 "parse.cc"
        break;

    case YYSYMBOL_tableref: /* tableref  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15601 "parse.cc"
        break;

    case YYSYMBOL_tableish: /* tableish  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15607 "parse.cc"
        break;

    case YYSYMBOL_typename: /* typename  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15617 "parse.cc"
        break;

    case YYSYMBOL_name: /* name  */
#line 971 "parse.y"
         { fprintf(yyo, "#" HOST_SIZE_T_PRINT_UNSIGNED ": %s",
                        is_temporary(((*yyvaluep).field))? 0 : (fmt_size_t)field_index(((*yyvaluep).field)),
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "<nil>" ); }
#line 15625 "parse.cc"
        break;

    case YYSYMBOL_qname: /* qname  */
#line 977 "parse.y"
         { fprintf(yyo, "{%s of " HOST_SIZE_T_PRINT_UNSIGNED "}",
		         teed_up_names().front(), (fmt_size_t) teed_up_names().size() ); }
#line 15632 "parse.cc"
        break;

    case YYSYMBOL_ctx_name: /* ctx_name  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15638 "parse.cc"
        break;

    case YYSYMBOL_context_word: /* context_word  */
#line 964 "parse.y"
         { fprintf(yyo, "'%s'", ((*yyvaluep).string)? ((*yyvaluep).string) : "" ); }
#line 15644 "parse.cc"
        break;

    case YYSYMBOL_move_tgts: /* move_tgts  */
#line 968 "parse.y"
         { fprintf(yyo,"%s (1st of" HOST_SIZE_T_PRINT_UNSIGNED")",
                        ((*yyvaluep).targets)->targets.empty()? "" : ((*yyvaluep).targets)->targets.front().refer.field->name,
                        (fmt_size_t)((*yyvaluep).targets)->targets.size() ); }
#line 15652 "parse.cc"
        break;

    case YYSYMBOL_move_tgt: /* move_tgt  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15658 "parse.cc"
        break;

    case YYSYMBOL_relop: /* relop  */
#line 963 "parse.y"
         { fprintf(yyo, "%s (token %d)", keyword_str(((*yyvaluep).number)), ((*yyvaluep).number) ); }
#line 15664 "parse.cc"
        break;

    case YYSYMBOL_num_operand: /* num_operand  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15670 "parse.cc"
        break;

    case YYSYMBOL_num_value: /* num_value  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15676 "parse.cc"
        break;

    case YYSYMBOL_cce_expr: /* cce_expr  */
#line 981 "parse.y"
         { const char *s = string_of(((*yyvaluep).float128));
           fprintf(yyo, "{%s}", s? s : "??" ); }
#line 15683 "parse.cc"
        break;

    case YYSYMBOL_cce_factor: /* cce_factor  */
#line 981 "parse.y"
         { const char *s = string_of(((*yyvaluep).float128));
           fprintf(yyo, "{%s}", s? s : "??" ); }
#line 15690 "parse.cc"
        break;

    case YYSYMBOL_stop_status: /* stop_status  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15696 "parse.cc"
        break;

    case YYSYMBOL_any_arg: /* any_arg  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15702 "parse.cc"
        break;

    case YYSYMBOL_signed_literal: /* signed_literal  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15712 "parse.cc"
        break;

    case YYSYMBOL_num_literal: /* num_literal  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15722 "parse.cc"
        break;

    case YYSYMBOL_open_io: /* open_io  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15728 "parse.cc"
        break;

    case YYSYMBOL_close_how: /* close_how  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15734 "parse.cc"
        break;

    case YYSYMBOL_perform_times: /* perform_times  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15740 "parse.cc"
        break;

    case YYSYMBOL_perform_cond: /* perform_cond  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15750 "parse.cc"
        break;

    case YYSYMBOL_perform_start: /* perform_start  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15756 "parse.cc"
        break;

    case YYSYMBOL_test_before: /* test_before  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15762 "parse.cc"
        break;

    case YYSYMBOL_vary_by: /* vary_by  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15768 "parse.cc"
        break;

    case YYSYMBOL_reserved_value: /* reserved_value  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15774 "parse.cc"
        break;

    case YYSYMBOL_spaces_etc: /* spaces_etc  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15780 "parse.cc"
        break;

    case YYSYMBOL_variable_type: /* variable_type  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15786 "parse.cc"
        break;

    case YYSYMBOL_varg: /* varg  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15792 "parse.cc"
        break;

    case YYSYMBOL_varg1: /* varg1  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15798 "parse.cc"
        break;

    case YYSYMBOL_varg1a: /* varg1a  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15804 "parse.cc"
        break;

    case YYSYMBOL_binary_type: /* binary_type  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15810 "parse.cc"
        break;

    case YYSYMBOL_literal: /* literal  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15820 "parse.cc"
        break;

    case YYSYMBOL_read_next: /* read_next  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15826 "parse.cc"
        break;

    case YYSYMBOL_read_into: /* read_into  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15832 "parse.cc"
        break;

    case YYSYMBOL_read_key: /* read_key  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15838 "parse.cc"
        break;

    case YYSYMBOL_write_what: /* write_what  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15848 "parse.cc"
        break;

    case YYSYMBOL_file_record: /* file_record  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15858 "parse.cc"
        break;

    case YYSYMBOL_advance_when: /* advance_when  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15864 "parse.cc"
        break;

    case YYSYMBOL_advancing: /* advancing  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15870 "parse.cc"
        break;

    case YYSYMBOL_advance_by: /* advance_by  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15876 "parse.cc"
        break;

    case YYSYMBOL_set_tgts: /* set_tgts  */
#line 968 "parse.y"
         { fprintf(yyo,"%s (1st of" HOST_SIZE_T_PRINT_UNSIGNED")",
                        ((*yyvaluep).targets)->targets.empty()? "" : ((*yyvaluep).targets)->targets.front().refer.field->name,
                        (fmt_size_t)((*yyvaluep).targets)->targets.size() ); }
#line 15884 "parse.cc"
        break;

    case YYSYMBOL_set_operand: /* set_operand  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15890 "parse.cc"
        break;

    case YYSYMBOL_set_tgt: /* set_tgt  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15896 "parse.cc"
        break;

    case YYSYMBOL_one_switch: /* one_switch  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15906 "parse.cc"
        break;

    case YYSYMBOL_search_varying: /* search_varying  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15916 "parse.cc"
        break;

    case YYSYMBOL_search_terms: /* search_terms  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15926 "parse.cc"
        break;

    case YYSYMBOL_search_term: /* search_term  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15936 "parse.cc"
        break;

    case YYSYMBOL_search_expr: /* search_expr  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15942 "parse.cc"
        break;

    case YYSYMBOL_return_body: /* return_body  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15948 "parse.cc"
        break;

    case YYSYMBOL_return_file: /* return_file  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15954 "parse.cc"
        break;

    case YYSYMBOL_inspected: /* inspected  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15960 "parse.cc"
        break;

    case YYSYMBOL_numeref: /* numeref  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15966 "parse.cc"
        break;

    case YYSYMBOL_nume: /* nume  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 15976 "parse.cc"
        break;

    case YYSYMBOL_first_leading: /* first_leading  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15982 "parse.cc"
        break;

    case YYSYMBOL_alphaval: /* alphaval  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 15988 "parse.cc"
        break;

    case YYSYMBOL_befter: /* befter  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 15994 "parse.cc"
        break;

    case YYSYMBOL_init_by: /* init_by  */
#line 993 "parse.y"
         { fprintf(yyo, "%s <- %s", data_category_str(((*yyvaluep).replacement).category),
                                    name_of(((*yyvaluep).replacement).replacement->field)); }
#line 16001 "parse.cc"
        break;

    case YYSYMBOL_init_data: /* init_data  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16007 "parse.cc"
        break;

    case YYSYMBOL_call_body: /* call_body  */
#line 990 "parse.y"
         { fprintf(yyo, "{%s, " HOST_SIZE_T_PRINT_UNSIGNED " parameters}",
                        name_of(((*yyvaluep).ffi_impl).ffi_name->field), !((*yyvaluep).ffi_impl).using_params? 0 :
                        (fmt_size_t)((*yyvaluep).ffi_impl).using_params->elems.size()); }
#line 16015 "parse.cc"
        break;

    case YYSYMBOL_ffi_name: /* ffi_name  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16021 "parse.cc"
        break;

    case YYSYMBOL_scalar_arg: /* scalar_arg  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16027 "parse.cc"
        break;

    case YYSYMBOL_str_input: /* str_input  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16033 "parse.cc"
        break;

    case YYSYMBOL_str_size: /* str_size  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16039 "parse.cc"
        break;

    case YYSYMBOL_unstring_src: /* unstring_src  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16045 "parse.cc"
        break;

    case YYSYMBOL_uns_delimiter: /* uns_delimiter  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16051 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_call: /* intrinsic_call  */
#line 951 "parse.y"
         { fprintf(yyo, "%s %s", refer_type_str(((*yyvaluep).refer)), ((*yyvaluep).refer)? ((*yyvaluep).refer)->name() : "<none>"); }
#line 16057 "parse.cc"
        break;

    case YYSYMBOL_function_udf: /* function_udf  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 16067 "parse.cc"
        break;

    case YYSYMBOL_intrinsic: /* intrinsic  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 16077 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_locale: /* intrinsic_locale  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 16087 "parse.cc"
        break;

    case YYSYMBOL_lopper_case: /* lopper_case  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16093 "parse.cc"
        break;

    case YYSYMBOL_trim_trailing: /* trim_trailing  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 16103 "parse.cc"
        break;

    case YYSYMBOL_intrinsic0: /* intrinsic0  */
#line 953 "parse.y"
         { fprintf(yyo, "%s %s '%s' (%s)",
                        ((*yyvaluep).field)? cbl_field_type_str(((*yyvaluep).field)->type) : "<%empty>",
                        ((*yyvaluep).field)? name_of(((*yyvaluep).field)) : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->data.initial? ((*yyvaluep).field)->data.initial : "<nil>" : "",
                        ((*yyvaluep).field)? ((*yyvaluep).field)->value_str() : "" ); }
#line 16113 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_I: /* intrinsic_I  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16119 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_I2: /* intrinsic_I2  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16125 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_N: /* intrinsic_N  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16131 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_N2: /* intrinsic_N2  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16137 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_X: /* intrinsic_X  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16143 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_X2: /* intrinsic_X2  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16149 "parse.cc"
        break;

    case YYSYMBOL_intrinsic_v: /* intrinsic_v  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16155 "parse.cc"
        break;

    case YYSYMBOL_first_last: /* first_last  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16161 "parse.cc"
        break;

    case YYSYMBOL_initial: /* initial  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16167 "parse.cc"
        break;

    case YYSYMBOL_globally: /* globally  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16173 "parse.cc"
        break;

    case YYSYMBOL_mistake: /* mistake  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16179 "parse.cc"
        break;

    case YYSYMBOL_star_cbl_opt: /* star_cbl_opt  */
#line 979 "parse.y"
         { fprintf(yyo, "{%d}", ((*yyvaluep).number) ); }
#line 16185 "parse.cc"
        break;

      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]));
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


/* Context of a parse error.  */
typedef struct
{
  yy_state_t *yyssp;
  yysymbol_kind_t yytoken;
  YYLTYPE *yylloc;
} yypcontext_t;

/* Put in YYARG at most YYARGN of the expected tokens given the
   current YYCTX, and return the number of tokens stored in YYARG.  If
   YYARG is null, return the number of expected tokens (guaranteed to
   be less than YYNTOKENS).  Return YYENOMEM on memory exhaustion.
   Return 0 if there are more than YYARGN expected tokens, yet fill
   YYARG up to YYARGN. */
static int
yypcontext_expected_tokens (const yypcontext_t *yyctx,
                            yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  int yyn = yypact[+*yyctx->yyssp];
  if (!yypact_value_is_default (yyn))
    {
      /* Start YYX at -YYN if negative to avoid negative indexes in
         YYCHECK.  In other words, skip the first -YYN actions for
         this state because they are default actions.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;
      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yyx;
      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
        if (yycheck[yyx + yyn] == yyx && yyx != YYSYMBOL_YYerror
            && !yytable_value_is_error (yytable[yyx + yyn]))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = YY_CAST (yysymbol_kind_t, yyx);
          }
    }
  if (yyarg && yycount == 0 && 0 < yyargn)
    yyarg[0] = YYSYMBOL_YYEMPTY;
  return yycount;
}




#ifndef yystrlen
# if defined __GLIBC__ && defined _STRING_H
#  define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
# else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
# endif
#endif

#ifndef yystpcpy
# if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#  define yystpcpy stpcpy
# else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
# endif
#endif

#ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;
      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
#endif


static int
yy_syntax_error_arguments (const yypcontext_t *yyctx,
                           yysymbol_kind_t yyarg[], int yyargn)
{
  /* Actual size of YYARG. */
  int yycount = 0;
  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yyctx->yytoken != YYSYMBOL_YYEMPTY)
    {
      int yyn;
      if (yyarg)
        yyarg[yycount] = yyctx->yytoken;
      ++yycount;
      yyn = yypcontext_expected_tokens (yyctx,
                                        yyarg ? yyarg + 1 : yyarg, yyargn - 1);
      if (yyn == YYENOMEM)
        return YYENOMEM;
      else
        yycount += yyn;
    }
  return yycount;
}

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return -1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return YYENOMEM if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                const yypcontext_t *yyctx)
{
  enum { YYARGS_MAX = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  yysymbol_kind_t yyarg[YYARGS_MAX];
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* Actual size of YYARG. */
  int yycount = yy_syntax_error_arguments (yyctx, yyarg, YYARGS_MAX);
  if (yycount == YYENOMEM)
    return YYENOMEM;

  switch (yycount)
    {
#define YYCASE_(N, S)                       \
      case N:                               \
        yyformat = S;                       \
        break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
    }

  /* Compute error message size.  Don't count the "%s"s, but reserve
     room for the terminator.  */
  yysize = yystrlen (yyformat) - 2 * yycount + 1;
  {
    int yyi;
    for (yyi = 0; yyi < yycount; ++yyi)
      {
        YYPTRDIFF_T yysize1
          = yysize + yytnamerr (YY_NULLPTR, yytname[yyarg[yyi]]);
        if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
          yysize = yysize1;
        else
          return YYENOMEM;
      }
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return -1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yytname[yyarg[yyi++]]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/* Lookahead token kind.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;




/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];

  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* top: programs  */
#line 1438 "parse.y"
                {
                  if( ! goodnight_gracie() ) {
                    YYABORT;
                  }
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16880 "parse.cc"
    break;

  case 3: /* top: programs end_program  */
#line 1445 "parse.y"
                {
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16888 "parse.cc"
    break;

  case 6: /* $@1: %empty  */
#line 1453 "parse.y"
                {
                  if( ! data_division_ready() ) {
		    mode_syntax_only(procedure_div_e);
		  }
                  current_division = procedure_div_e;
                }
#line 16899 "parse.cc"
    break;

  case 7: /* program: id_div options_para env_div data_div $@1 procedure_div  */
#line 1460 "parse.y"
                {
                  if( yydebug ) labels_dump();
                }
#line 16907 "parse.cc"
    break;

  case 15: /* cobol_words1: ">>COBOL-WORDS" EQUATE NAME WITH NAME  */
#line 1477 "parse.y"
                                                                 {
		  if( ! cdf_tokens.equate((yylsp[-2]), (yyvsp[-2].string), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16915 "parse.cc"
    break;

  case 16: /* cobol_words1: ">>COBOL-WORDS" UNDEFINE NAME  */
#line 1480 "parse.y"
                                                   {
		  if( ! cdf_tokens.undefine((yylsp[0]), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16923 "parse.cc"
    break;

  case 17: /* cobol_words1: ">>COBOL-WORDS" SUBSTITUTE NAME BY NAME  */
#line 1483 "parse.y"
                                                                   {
		  if( ! cdf_tokens.substitute((yylsp[-2]), (yyvsp[-2].string), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16931 "parse.cc"
    break;

  case 18: /* cobol_words1: ">>COBOL-WORDS" RESERVE NAME  */
#line 1486 "parse.y"
                                               {
		  if( ! cdf_tokens.reserve((yylsp[0]), (yyvsp[0].string)) ) { YYERROR; }
		}
#line 16939 "parse.cc"
    break;

  case 19: /* program_id: "PROGRAM-ID" dot namestr program_as program_attrs dot  */
#line 1492 "parse.y"
                {
                  internal_ebcdic_lock();
                  current_division = identification_div_e;
                  parser_division( identification_div_e, NULL, 0, NULL );
                  location_set((yylsp[-5]));
                  int main_error=0;
                  const char *name = string_of((yyvsp[-3].literal));
                  parser_enter_program( name, false, &main_error );
                  if( main_error ) {
                    error_msg((yylsp[-3]), "PROGRAM-ID 'main' is invalid with %<-main%> option");
                    YYERROR;
                  }

                  if( symbols_begin() == symbols_end() ) {
                    symbol_table_init();
                  }
                  if( !current.new_program((yylsp[-3]), LblProgram, name,
		                           (yyvsp[-2].literal).data,
                                           (yyvsp[-1].comminit).common, (yyvsp[-1].comminit).initial) ) {
                    auto L = symbol_program(current_program_index(), name);
                    assert(L);
                    error_msg((yylsp[-3]), "PROGRAM-ID %s already defined on line %d",
                             name, L->line);
                    YYERROR;
                  }
                  if( nparse_error > 0 ) YYABORT;
                }
#line 16971 "parse.cc"
    break;

  case 22: /* program_as: %empty  */
#line 1523 "parse.y"
                           { static const literal_t empty {}; (yyval.literal) = empty; }
#line 16977 "parse.cc"
    break;

  case 23: /* program_as: AS LITERAL  */
#line 1524 "parse.y"
                           { (yyval.literal) = (yyvsp[0].literal); }
#line 16983 "parse.cc"
    break;

  case 24: /* function_id: FUNCTION NAME program_as program_attrs '.'  */
#line 1528 "parse.y"
                {
                  internal_ebcdic_lock();
                  current_division = identification_div_e;
                  parser_division( identification_div_e, NULL, 0, NULL );
                  location_set((yylsp[-4]));

                  int main_error = 0;
                  parser_enter_program( (yyvsp[-3].string), true, &main_error );
                  if( main_error ) {
                    error_msg((yylsp[-3]), "FUNCTION-ID %<main%> is invalid "
                              "with %<-main%> option");
                    YYERROR;
                  }
                  if( symbols_begin() == symbols_end() ) {
                    symbol_table_init();
                  }
                  if( !current.new_program((yylsp[-3]), LblFunction, (yyvsp[-3].string),
		                      (yyvsp[-2].literal).data,
                                      (yyvsp[-1].comminit).common, (yyvsp[-1].comminit).initial) ) {
                    auto L = symbol_program(current_program_index(), (yyvsp[-3].string));
                    assert(L);
                    error_msg((yylsp[-3]), "FUNCTION %s already defined on line %d",
                              (yyvsp[-3].string), L->line);
                    YYERROR;
                  }
                  if( keyword_tok((yyvsp[-3].string), true) ) {
		    error_msg((yylsp[-3]), "FUNCTION %s is an intrinsic function",
			      (yyvsp[-3].string));
                    YYERROR;
                  }
                  current.udf_add(current_program_index());
                  if( nparse_error > 0 ) YYABORT;
                }
#line 17021 "parse.cc"
    break;

  case 25: /* function_id: FUNCTION NAME program_as is PROTOTYPE '.'  */
#line 1562 "parse.y"
                {
                  cbl_unimplemented("FUNCTION PROTOTYPE");
                }
#line 17029 "parse.cc"
    break;

  case 35: /* opt_clause: opt_decimal  */
#line 1579 "parse.y"
                            {
		  cbl_unimplemented("type FLOAT-DECIMAL");
		}
#line 17037 "parse.cc"
    break;

  case 38: /* opt_arith: ARITHMETIC is opt_arith_type  */
#line 1586 "parse.y"
                                             {
		  if( ! current.option((yyvsp[0].opt_arith)) ) {
		    error_msg((yylsp[0]), "unable to set ARITHMETIC option");
		  }
		}
#line 17047 "parse.cc"
    break;

  case 39: /* opt_arith_type: NATIVE  */
#line 1592 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::native_e; }
#line 17053 "parse.cc"
    break;

  case 40: /* opt_arith_type: STANDARD  */
#line 1593 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::standard_e; }
#line 17059 "parse.cc"
    break;

  case 41: /* opt_arith_type: "STANDARD-BINARY"  */
#line 1594 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::standard_binary_e; }
#line 17065 "parse.cc"
    break;

  case 42: /* opt_arith_type: "STANDARD-DECIMAL"  */
#line 1595 "parse.y"
                                  { (yyval.opt_arith) = cbl_options_t::standard_decimal_e; }
#line 17071 "parse.cc"
    break;

  case 43: /* opt_round: DEFAULT ROUNDED mode is rounded_type  */
#line 1597 "parse.y"
                                                           {
                  current_rounded_mode((yyvsp[0].opt_round));
                }
#line 17079 "parse.cc"
    break;

  case 44: /* opt_entry: ENTRY_CONVENTION is COBOL  */
#line 1601 "parse.y"
                                          {
		  yywarn("ENTRY-CONVENTION IS COBOL, check");
		}
#line 17087 "parse.cc"
    break;

  case 45: /* opt_binary: "FLOAT-BINARY" default_kw is "HIGH-ORDER-LEFT"  */
#line 1606 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-LEFT was ignored");
		  if( ! current.option_binary(cbl_options_t::high_order_left_e) ) {
		    error_msg((yylsp[-1]), "unable to set %<HIGH_ORDER_LEFT%>");
		  }
		}
#line 17098 "parse.cc"
    break;

  case 46: /* opt_binary: "FLOAT-BINARY" default_kw is "HIGH-ORDER-RIGHT"  */
#line 1613 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-RIGHT was ignored");
		  if( ! current.option_binary(cbl_options_t::high_order_right_e) ) {
		    error_msg((yylsp[0]), "unable to set HIGH-ORDER-RIGHT");
		  }
		}
#line 17109 "parse.cc"
    break;

  case 49: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "HIGH-ORDER-LEFT"  */
#line 1624 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-LEFT was ignored");
		  if( ! current.option_decimal(cbl_options_t::high_order_left_e) ) {
		    error_msg((yylsp[0]), "unable to set HIGH-ORDER-LEFT");
		  }
		}
#line 17120 "parse.cc"
    break;

  case 50: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "HIGH-ORDER-RIGHT"  */
#line 1631 "parse.y"
                {
		  cbl_unimplementedw("HIGH-ORDER-RIGHT was ignored");
		  if( ! current.option_decimal(cbl_options_t::high_order_right_e) ) {
		    error_msg((yylsp[0]), "unable to set HIGH-ORDER-RIGHT");
		  }
		}
#line 17131 "parse.cc"
    break;

  case 51: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "BINARY-ENCODING"  */
#line 1638 "parse.y"
                {
		  cbl_unimplementedw("BINARY-ENCODING was ignored");
		  if( ! current.option(cbl_options_t::binary_encoding_e) ) {
		    error_msg((yylsp[0]), "unable to set BINARY-ENCODING option");
		  }
		}
#line 17142 "parse.cc"
    break;

  case 52: /* opt_decimal: "FLOAT-DECIMAL" default_kw is "DECIMAL-ENCODING"  */
#line 1645 "parse.y"
                {
		  cbl_unimplementedw("DECIMAL-ENCODING was ignored");
		  if( ! current.option(cbl_options_t::decimal_encoding_e) ) {
		    error_msg((yylsp[0]), "unable to set DECIMAL-ENCODING option");
		  }
		}
#line 17153 "parse.cc"
    break;

  case 53: /* opt_intermediate: INTERMEDIATE ROUNDING is round_between  */
#line 1653 "parse.y"
                                                              {
		  current.intermediate_round((yyvsp[0].opt_round));
		}
#line 17161 "parse.cc"
    break;

  case 54: /* opt_init: INITIALIZE opt_init_sects opt_section to opt_init_value  */
#line 1659 "parse.y"
                {
		  if( (yyvsp[-3].opt_init_sects).local ) {
		    current.initial_value(local_sect_e, (yyvsp[0].number));
		  }
		  if( (yyvsp[-3].opt_init_sects).working ) {
		    current.initial_value(working_sect_e, (yyvsp[0].number));
		  }
		}
#line 17174 "parse.cc"
    break;

  case 57: /* opt_init_sects: ALL  */
#line 1671 "parse.y"
                    { (yyval.opt_init_sects).local = (yyval.opt_init_sects).working = true; }
#line 17180 "parse.cc"
    break;

  case 58: /* opt_init_sects: opt_init_sect  */
#line 1672 "parse.y"
                              {
		  (yyval.opt_init_sects).local = (yyval.opt_init_sects).working = false;
		  switch((yyvsp[0].opt_init_sect)) {
		    case local_sect_e:
		      (yyval.opt_init_sects).local = true; break;
		    case working_sect_e:
		      (yyval.opt_init_sects).working = true; break;
		    default: gcc_unreachable();
		  }
		}
#line 17195 "parse.cc"
    break;

  case 59: /* opt_init_sects: opt_init_sects opt_init_sect  */
#line 1682 "parse.y"
                                             {
		  (yyval.opt_init_sects) = (yyvsp[-1].opt_init_sects);
		  switch((yyvsp[0].opt_init_sect)) {
		    case local_sect_e:
		      if( (yyval.opt_init_sects).local ) {
			error_msg((yylsp[0]), "LOCAL-STORAGE repeated");
		      }
		      (yyval.opt_init_sects).local = true; break;
		    case working_sect_e:
		      if( (yyval.opt_init_sects).working ) {
			error_msg((yylsp[0]), "WORKING-STORAGE repeated");
		      }
		      (yyval.opt_init_sects).working = true; break;
		    default: gcc_unreachable();
		  }
		}
#line 17216 "parse.cc"
    break;

  case 60: /* opt_init_sect: "LOCAL-STORAGE"  */
#line 1699 "parse.y"
                                { (yyval.opt_init_sect) = local_sect_e; }
#line 17222 "parse.cc"
    break;

  case 61: /* opt_init_sect: SCREEN  */
#line 1700 "parse.y"
                       { cbl_unimplemented("SCREEN SECTION"); }
#line 17228 "parse.cc"
    break;

  case 62: /* opt_init_sect: WORKING_STORAGE  */
#line 1701 "parse.y"
                                { (yyval.opt_init_sect) = working_sect_e; }
#line 17234 "parse.cc"
    break;

  case 63: /* opt_init_value: BINARY ZERO  */
#line 1703 "parse.y"
                            { (yyval.number) = constant_index(NULLS); }
#line 17240 "parse.cc"
    break;

  case 64: /* opt_init_value: "HIGH-VALUES"  */
#line 1704 "parse.y"
                            { (yyval.number) = constant_index(HIGH_VALUES); }
#line 17246 "parse.cc"
    break;

  case 65: /* opt_init_value: LITERAL  */
#line 1706 "parse.y"
                {
		  if( (yyvsp[0].literal).prefix[0] != 'X' ) {
		    error_msg((yylsp[0]), "hexadecimal literal required");
		  }
		  if( (yyvsp[0].literal).len != 1 ) {
		    error_msg((yylsp[0]), "1-byte hexadecimal literal required");
		  }
      char ach[16];
      sprintf(ach, "%d", (int)((yyvsp[0].literal).data[0]));
		  //auto f = new_literal($1.data);
		  auto f = new_literal(ach);
		  f = field_add((yylsp[0]), f);
		  (yyval.number) = field_index(f);
		}
#line 17265 "parse.cc"
    break;

  case 66: /* opt_init_value: "LOW-VALUES"  */
#line 1720 "parse.y"
                            { (yyval.number) = constant_index(LOW_VALUES); }
#line 17271 "parse.cc"
    break;

  case 67: /* opt_init_value: SPACES  */
#line 1721 "parse.y"
                            { (yyval.number) = constant_index(SPACES); }
#line 17277 "parse.cc"
    break;

  case 68: /* namestr: ctx_name  */
#line 1724 "parse.y"
                         {
                  (yyval.literal) = literal_of((yyvsp[0].string));
                  if( ! string_of((yyval.literal)) ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyval.literal).data);
                    YYERROR;
                  }
                }
#line 17289 "parse.cc"
    break;

  case 69: /* namestr: LITERAL  */
#line 1731 "parse.y"
                        {
                  if( (yyval.literal).prefix[0] != '\0' ) {
                    error_msg((yylsp[0]), "literal cannot use %s prefix in this context",
                              (yyval.literal).prefix);
                    YYERROR;
                  }
		  if( !is_cobol_charset((yyval.literal).data) ) {
		    error_msg((yylsp[0]), "literal '%s' must be a COBOL or C identifier",
			      (yyval.literal).data);
                  }
                }
#line 17305 "parse.cc"
    break;

  case 70: /* program_attrs: %empty  */
#line 1744 "parse.y"
                        { (yyval.comminit).common = (yyval.comminit).initial = (yyval.comminit).recursive = false; }
#line 17311 "parse.cc"
    break;

  case 71: /* program_attrs: is comminits program_kw  */
#line 1745 "parse.y"
                                        { (yyval.comminit) = (yyvsp[-1].comminit); }
#line 17317 "parse.cc"
    break;

  case 73: /* comminits: comminits comminit  */
#line 1748 "parse.y"
                                   {
                  if( ((yyvsp[-1].comminit).initial && (yyvsp[0].comminit).recursive) ||
                      ((yyvsp[0].comminit).initial && (yyvsp[-1].comminit).recursive) ) {
		    auto loc = (yyvsp[-1].comminit).initial? (yylsp[-1]) : (yylsp[0]);
                    error_msg(loc, "INITIAL cannot be used with RECURSIVE");
                  }
                  (yyval.comminit) = (yyvsp[-1].comminit);
                  if( (yyvsp[0].comminit).common ) {
                    if( (yyvsp[-1].comminit).common ) {
                      error_msg((yylsp[0]), "COMMON repeated");
                    }
                    (yyval.comminit).common = (yyvsp[0].comminit).common;
                  }
                  if( (yyvsp[0].comminit).initial ) {
                    if( (yyvsp[-1].comminit).initial ) {
                      error_msg((yylsp[0]), "INITIAL repeated");
                    }
                    (yyval.comminit).initial = (yyvsp[0].comminit).initial;
                  }
                  if( (yyvsp[0].comminit).recursive ) {
                    if( (yyvsp[-1].comminit).recursive ) {
                      error_msg((yylsp[0]), "RECURSIVE repeated");
                    }
                    (yyval.comminit).recursive = (yyvsp[0].comminit).recursive;
                  }
                }
#line 17348 "parse.cc"
    break;

  case 74: /* comminit: COMMON  */
#line 1775 "parse.y"
                           {
                  if( program_level() == 0 ) { // PROGRAM-ID being parsed not added yet.
                    error_msg((yylsp[0]), "COMMON may be used only in a contained program");
                  }
                  (yyval.comminit).common = true;
                  (yyval.comminit).initial = (yyval.comminit).recursive = false;
                }
#line 17360 "parse.cc"
    break;

  case 75: /* comminit: "INITIAL"  */
#line 1782 "parse.y"
                           { (yyval.comminit).initial = true;  (yyval.comminit).common = (yyval.comminit).recursive = false;}
#line 17366 "parse.cc"
    break;

  case 76: /* comminit: RECURSIVE  */
#line 1783 "parse.y"
                           {
                  (yyval.comminit).recursive = true;  (yyval.comminit).common = (yyval.comminit).initial = false;
                }
#line 17374 "parse.cc"
    break;

  case 77: /* env_div: %empty  */
#line 1789 "parse.y"
                                    { current_division = environment_div_e; }
#line 17380 "parse.cc"
    break;

  case 78: /* env_div: "ENVIRONMENT DIVISION" '.'  */
#line 1790 "parse.y"
                                    { current_division = environment_div_e; }
#line 17386 "parse.cc"
    break;

  case 79: /* $@2: %empty  */
#line 1791 "parse.y"
                                    {
                  current_division = environment_div_e;
                }
#line 17394 "parse.cc"
    break;

  case 85: /* env_section: "INPUT-OUTPUT SECTION" '.' selects  */
#line 1802 "parse.y"
                                              { /* IBM requires FILE CONTROL.  */ }
#line 17400 "parse.cc"
    break;

  case 97: /* io_control_clause: SAME record area for_kw filenames  */
#line 1823 "parse.y"
                {
                  symbol_file_same_record_area( (yyvsp[0].files)->files );
                }
#line 17408 "parse.cc"
    break;

  case 98: /* io_control_clause: SAME smerge area for_kw filenames  */
#line 1827 "parse.y"
                {
                  symbol_file_same_record_area( (yyvsp[0].files)->files );
                }
#line 17416 "parse.cc"
    break;

  case 99: /* io_control_clause: APPLY COMMIT on field_list  */
#line 1831 "parse.y"
                {
                  cbl_unimplementedw("I-O-CONTROL APPLY COMMIT");
                }
#line 17424 "parse.cc"
    break;

  case 106: /* select: SELECT optional NAME select_clauses '.'  */
#line 1847 "parse.y"
                {
                  assert((yyvsp[-1].select_clauses).file);
                  cbl_file_t *file = (yyvsp[-1].select_clauses).file;

                  file->optional = (yyvsp[-3].boolean);
                  file->line = (yylsp[-2]).first_line;
                  if( !namcpy((yylsp[-1]), file->name, (yyvsp[-2].string)) ) YYERROR;

                  if( ! ((yyvsp[-1].select_clauses).clauses & assign_clause_e) ) {
                    error_msg((yylsp[-2]), "ASSIGN clause missing for %s", file->name);
                  }

                  // key check
                  switch(file->org) {
                  case file_indexed_e:
                    // indexed file cannot have relative key
                    if( ((yyvsp[-1].select_clauses).clauses & relative_key_clause_e) != 0) {
                      assert(file->keys);
                      auto ikey = file->nkey - 1;
                      assert(file->keys[ikey].fields);
                      auto f = cbl_field_of(symbol_at(file->keys[ikey].fields[0]));
                      error_msg((yylsp[-2]), "INDEXED file %s cannot have RELATIVE key %s",
				file->name, f->name);
                      break; // because next message would be redundant
                    }
                    if( ((yyvsp[-1].select_clauses).clauses & record_key_clause_e) == 0 ) {
                      error_msg((yylsp[-2]), "INDEXED file %s has no RECORD KEY",
				file->name);
                    }
                    break;
                  case file_disorganized_e:
                    file->org = file_sequential_e;
                    __attribute__((fallthrough));
                  default:
                    if( ((yyvsp[-1].select_clauses).clauses & record_key_clause_e) != 0 ) {
                      assert(file->keys);
                      auto ikey = file->nkey - 1;
                      assert(file->keys[ikey].fields);
                      auto f = cbl_field_of(symbol_at(file->keys[ikey].fields[0]));
                      error_msg((yylsp[-2]), "%s file %s cannot have RECORD key %s",
				file_org_str(file->org), file->name, f->name);
                    }
                    break;
                  }

                  // access check
                  switch(file->access) {
                  case file_access_rnd_e:
                  case file_access_dyn_e:
                      if( is_sequential(file) ) {
                          error_msg((yylsp[-2]), "%s file %s cannot have ACCESS %s",
				    file_org_str(file->org), file->name,
				    file_access_str(file->access));
                      }
                      break;
                  default:
                    break;
                  }

                  // install file, and set record area's name
                  if( (file = file_add((yylsp[-2]), file)) == NULL ) YYERROR;
                  auto ifile = symbol_index(symbol_elem_of(file));
                  // update keys
                  for( auto p = file->keys;
                       p && p < file->keys + file->nkey; p++ )
                  {
                    if( p->name[0] == '\0' ) continue;
                    auto f = symbol_field(PROGRAM, 0, p->name);
                    cbl_field_of(f)->parent = ifile;
                    size_t isym = field_index(cbl_field_of(f));
                    update_symbol_map(symbol_at(isym));
                  }
                }
#line 17502 "parse.cc"
    break;

  case 107: /* select: SELECT optional NAME '.'  */
#line 1921 "parse.y"
                {
                  cbl_file_t file = protofile;

                  file.optional = (yyvsp[-2].boolean);
                  file.line = (yylsp[-1]).first_line;
                  if( !namcpy((yylsp[-1]), file.name, (yyvsp[-1].string)) ) YYERROR;

                  if( file_add((yylsp[-1]), &file) == NULL ) YYERROR;
                }
#line 17516 "parse.cc"
    break;

  case 108: /* selected_name: external scalar  */
#line 1931 "parse.y"
                                { (yyval.refer) = (yyvsp[0].refer); }
#line 17522 "parse.cc"
    break;

  case 109: /* selected_name: external LITERAL  */
#line 1933 "parse.y"
                {
                  const char *name = string_of((yyvsp[0].literal));
                  if( ! name ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  uint32_t len = (yyvsp[0].literal).len;
                  cbl_field_t field {
                               0, FldLiteralA, FldInvalid, quoted_e | constant_e,
                               0, 0, 0, nonarray, 0, "", 0, cbl_field_t::linkage_t(),
				 {len,len,0,0, (yyvsp[0].literal).data}, NULL };
                  field.attr |= literal_attr((yyvsp[0].literal).prefix);
                  (yyval.refer) = new cbl_refer_t( field_add((yylsp[0]), &field) );
                }
#line 17541 "parse.cc"
    break;

  case 112: /* select_clauses: select_clause  */
#line 1952 "parse.y"
                              { (yyval.select_clauses).clauses = (yyvsp[0].select_clause).clause; (yyval.select_clauses).file = (yyvsp[0].select_clause).file; }
#line 17547 "parse.cc"
    break;

  case 113: /* select_clauses: select_clauses select_clause  */
#line 1954 "parse.y"
                {
                  (yyval.select_clauses) = (yyvsp[-1].select_clauses);
                  // The default organization is sequential.
                  if( ((yyval.select_clauses).clauses & organization_clause_e) == 0 ) {
                    (yyval.select_clauses).file->org = file_sequential_e;
                  }
                  const bool exists = ((yyval.select_clauses).clauses & (yyvsp[0].select_clause).clause);
                  (yyval.select_clauses).clauses |= (yyvsp[0].select_clause).clause;

                  switch((yyvsp[0].select_clause).clause) {
                  case alt_key_clause_e:
                    assert( (yyvsp[0].select_clause).file->nkey == 1 );
                    if( (yyval.select_clauses).file->nkey++ == 0 ) {
                      // If no key yet exists, create room for it and the
                      // present alternate.
                      assert((yyval.select_clauses).file->keys == nullptr);
                      (yyval.select_clauses).file->keys = new cbl_file_key_t[++(yyval.select_clauses).file->nkey];
                    }
                    {
                      auto keys = new cbl_file_key_t[(yyval.select_clauses).file->nkey];
                      auto alt = std::copy((yyval.select_clauses).file->keys,
                                           (yyval.select_clauses).file->keys +
                                           (yyval.select_clauses).file->nkey - 1,
                                           keys);
                      // Assign the alternate key to the last element,
                      // and update the pointer.
                      *alt = (yyvsp[0].select_clause).file->keys[0];
                      (yyval.select_clauses).file->keys_update(keys);
                    }
                    break;
                  case assign_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->filename = (yyvsp[0].select_clause).file->filename;
                    break;
                  case collating_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    break;
                  case lock_mode_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->lock = (yyvsp[0].select_clause).file->lock;
                    break;
                  case organization_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->org = (yyvsp[0].select_clause).file->org;
                    break;
                  case padding_clause_e:
                  case reserve_clause_e:
                  case sharing_clause_e:
                  case record_delim_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    break;
                  case access_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->access = (yyvsp[0].select_clause).file->access;
                    break;
                  case relative_key_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    if( (yyval.select_clauses).clauses & record_key_clause_e ) {
                      error_msg((yylsp[0]), "FILE %s is INDEXED, has no RELATIVE key",
                               (yyval.select_clauses).file->name);
                      YYERROR;
                    }
                    // fall thru
                  case record_key_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    if( ((yyval.select_clauses).clauses & relative_key_clause_e) &&
                         (yyvsp[0].select_clause).clause == record_key_clause_e ) {
                      error_msg((yylsp[0]), "FILE %s is RELATIVE, has no RECORD key",
                               (yyval.select_clauses).file->name);
                      YYERROR;
                    }
                    if( (yyval.select_clauses).file->nkey == 0 ) {
                      assert( 1 == (yyvsp[0].select_clause).file->nkey );
                      (yyval.select_clauses).file->nkey = (yyvsp[0].select_clause).file->nkey;
                      (yyval.select_clauses).file->keys = new cbl_file_key_t[1];
                    } 
                    (yyval.select_clauses).file->keys[0] = (yyvsp[0].select_clause).file->keys[0];
                    break;
                  /* case password_clause_e: */
                  case file_status_clause_e:
                    if( exists ) {
                      error_msg((yylsp[0]), "clause is repeated");
                      YYERROR;
                    }
                    (yyval.select_clauses).file->user_status = (yyvsp[0].select_clause).file->user_status;
                    (yyval.select_clauses).file->vsam_status = (yyvsp[0].select_clause).file->vsam_status;
                    break;
                  }
                  if( (yyval.select_clauses).file->lock.locked() ) {
                    if( (yyval.select_clauses).file->org == file_sequential_e &&
                        (yyval.select_clauses).file->lock.multiple ) {
                      error_msg((yylsp[0]), "SEQUENTIAL file cannot lock MULTIPLE records");
                    }
                  }

                  delete (yyvsp[0].select_clause).file;
                }
#line 17673 "parse.cc"
    break;

  case 127: /* access_clause: ACCESS mode is access_mode  */
#line 2093 "parse.y"
                {
                  (yyval.select_clause).clause = access_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->access = static_cast<cbl_file_access_t>((yyvsp[0].number));
                }
#line 17683 "parse.cc"
    break;

  case 128: /* access_mode: RANDOM  */
#line 2099 "parse.y"
                            { (yyval.number) = file_access_rnd_e; }
#line 17689 "parse.cc"
    break;

  case 129: /* access_mode: DYNAMIC  */
#line 2100 "parse.y"
                            { (yyval.number) = file_access_dyn_e; }
#line 17695 "parse.cc"
    break;

  case 130: /* access_mode: SEQUENTIAL  */
#line 2101 "parse.y"
                            { (yyval.number) = file_access_seq_e; }
#line 17701 "parse.cc"
    break;

  case 131: /* alt_key_clause: ALTERNATE record key is name key_source unique_key  */
#line 2105 "parse.y"
                {
                  (yyval.select_clause).clause = alt_key_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->nkey = 1;
                  if( (yyvsp[-1].fields) == NULL ) {
                    (yyval.select_clause).file->keys = new cbl_file_key_t(field_index((yyvsp[-2].field)),
                                                       (yyvsp[0].boolean));
                  } else {
                    (yyvsp[-2].field)->type  = FldLiteralA;
                    (yyvsp[-2].field)->data.initial = (yyvsp[-2].field)->name;
                    (yyvsp[-2].field)->attr |= record_key_e;
                    auto& name = *(yyvsp[-2].field);
                    (yyval.select_clause).file->keys = new cbl_file_key_t(name.name,
                                                       (yyvsp[-1].fields)->fields,
                                                       (yyvsp[0].boolean));
                  }
                }
#line 17723 "parse.cc"
    break;

  case 132: /* key_source: %empty  */
#line 2123 "parse.y"
                       { (yyval.fields) = NULL; }
#line 17729 "parse.cc"
    break;

  case 133: /* key_source: SOURCE is key_sources  */
#line 2124 "parse.y"
                                              { (yyval.fields) = (yyvsp[0].fields); }
#line 17735 "parse.cc"
    break;

  case 134: /* key_sources: name  */
#line 2126 "parse.y"
                     { (yyval.fields) = new field_list_t((yyvsp[0].field)); }
#line 17741 "parse.cc"
    break;

  case 135: /* key_sources: key_sources name  */
#line 2127 "parse.y"
                                 { (yyval.fields) = (yyvsp[-1].fields); (yyval.fields)->fields.push_back((yyvsp[0].field)); }
#line 17747 "parse.cc"
    break;

  case 136: /* unique_key: %empty  */
#line 2129 "parse.y"
                                { (yyval.boolean) = true; }
#line 17753 "parse.cc"
    break;

  case 137: /* unique_key: with DUPLICATES  */
#line 2130 "parse.y"
                                { (yyval.boolean) = false; }
#line 17759 "parse.cc"
    break;

  case 138: /* assign_clause: ASSIGN to selected_name  */
#line 2133 "parse.y"
                                                   {
                  (yyval.select_clause).clause = assign_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->filename = field_index((yyvsp[0].refer)->field);
                }
#line 17769 "parse.cc"
    break;

  case 139: /* assign_clause: ASSIGN to device_name USING name  */
#line 2138 "parse.y"
                                                 {
                  (yyval.select_clause).clause = assign_clause_e;
		  cbl_unimplemented("ASSIGN TO DEVICE");
		  YYERROR;
                }
#line 17779 "parse.cc"
    break;

  case 140: /* assign_clause: ASSIGN to device_name  */
#line 2143 "parse.y"
                                      {
                  (yyval.select_clause).clause = assign_clause_e;
		  cbl_unimplemented("ASSIGN TO DEVICE");
		  YYERROR;
                }
#line 17789 "parse.cc"
    break;

  case 141: /* assign_clause: ASSIGN USING name  */
#line 2148 "parse.y"
                                  {
                  (yyval.select_clause).clause = assign_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->filename = field_index((yyvsp[0].field));
                }
#line 17799 "parse.cc"
    break;

  case 142: /* collate_clause: collate_claus1  */
#line 2155 "parse.y"
                               {
                  (yyval.select_clause).clause = collating_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17808 "parse.cc"
    break;

  case 146: /* status_clause: file STATUS is name  */
#line 2166 "parse.y"
                {
                  (yyval.select_clause).clause = file_status_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->user_status = field_index((yyvsp[0].field));
                }
#line 17818 "parse.cc"
    break;

  case 147: /* status_clause: file STATUS is name name  */
#line 2172 "parse.y"
                {
                  (yyval.select_clause).clause = file_status_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->user_status = field_index((yyvsp[-1].field));
                  (yyval.select_clause).file->vsam_status = field_index((yyvsp[0].field));
                }
#line 17829 "parse.cc"
    break;

  case 148: /* lock_mode_clause: LOCK mode is lock_mode lock_how  */
#line 2182 "parse.y"
                {
                  (yyval.select_clause).clause = lock_mode_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->lock.multiple = (yyvsp[0].number) > 0;
                  if( ! (yyval.select_clause).file->lock.mode_set((yyvsp[-1].number)) ) {
		    error_msg((yylsp[-1]), "logic error: %s is not a file lock mode",
		              keyword_str((yyvsp[-1].number)) );
		  }
                }
#line 17843 "parse.cc"
    break;

  case 149: /* lock_how: %empty  */
#line 2191 "parse.y"
                       { (yyval.number) = 0; }
#line 17849 "parse.cc"
    break;

  case 150: /* lock_how: with LOCK_ON multiple records  */
#line 2192 "parse.y"
                                              { (yyval.number) = (yyvsp[-1].number); }
#line 17855 "parse.cc"
    break;

  case 151: /* lock_mode: MANUAL  */
#line 2194 "parse.y"
                          { (yyval.number) = MANUAL; }
#line 17861 "parse.cc"
    break;

  case 152: /* lock_mode: RECORD  */
#line 2195 "parse.y"
                          { (yyval.number) = RECORD; }
#line 17867 "parse.cc"
    break;

  case 153: /* lock_mode: AUTOMATIC  */
#line 2196 "parse.y"
                          { (yyval.number) = AUTOMATIC; }
#line 17873 "parse.cc"
    break;

  case 154: /* multiple: %empty  */
#line 2198 "parse.y"
                          { (yyval.number) = 0; }
#line 17879 "parse.cc"
    break;

  case 155: /* multiple: MULTIPLE  */
#line 2199 "parse.y"
                          { (yyval.number) = MULTIPLE; }
#line 17885 "parse.cc"
    break;

  case 158: /* org_clause: org_clause1  */
#line 2206 "parse.y"
                {
                  (yyval.select_clause).clause = organization_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->org = static_cast<cbl_file_org_t>((yyvsp[0].number));
                }
#line 17895 "parse.cc"
    break;

  case 159: /* org_is: %empty  */
#line 2212 "parse.y"
                                       { (yyval.number) = 0; }
#line 17901 "parse.cc"
    break;

  case 160: /* org_is: ORGANIZATION is  */
#line 2213 "parse.y"
                                       { (yyval.number) = 0; }
#line 17907 "parse.cc"
    break;

  case 161: /* org_is: ORGANIZATION is RECORD  */
#line 2214 "parse.y"
                                       { (yyval.number) = RECORD; }
#line 17913 "parse.cc"
    break;

  case 162: /* org_is: RECORD  */
#line 2215 "parse.y"
                                       { (yyval.number) = RECORD; }
#line 17919 "parse.cc"
    break;

  case 163: /* org_clause1: org_is SEQUENTIAL  */
#line 2218 "parse.y"
                                       {
                  (yyval.number) = (yyvsp[-1].number) == RECORD? file_line_sequential_e : file_sequential_e;
                }
#line 17927 "parse.cc"
    break;

  case 164: /* org_clause1: org_is LINE SEQUENTIAL  */
#line 2222 "parse.y"
                {
                  if( (yyvsp[-2].number) ) error_msg((yylsp[-1]), "syntax error: invalid %<RECORD%>");
                  (yyval.number) = file_line_sequential_e;
                }
#line 17936 "parse.cc"
    break;

  case 165: /* org_clause1: org_is RELATIVE  */
#line 2226 "parse.y"
                                     {
                  if( (yyvsp[-1].number) ) error_msg((yylsp[0]), "syntax error: invalid %<RECORD%>");
                  (yyval.number) = file_relative_e;
                }
#line 17945 "parse.cc"
    break;

  case 166: /* org_clause1: org_is INDEXED  */
#line 2230 "parse.y"
                                       { 
                  if( (yyvsp[-1].number) ) error_msg((yylsp[0]), "syntax error: invalid %<RECORD%>");
                  (yyval.number) = file_indexed_e;
                }
#line 17954 "parse.cc"
    break;

  case 167: /* padding_clause: PADDING character is padding_char  */
#line 2241 "parse.y"
                {
                  (yyval.select_clause).clause = padding_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17963 "parse.cc"
    break;

  case 173: /* record_delim_clause: RECORD DELIMITER is "STANDARD ALPHABET"  */
#line 2255 "parse.y"
                {
                  (yyval.select_clause).clause = record_delim_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 17972 "parse.cc"
    break;

  case 174: /* record_key_clause: RECORD key is name key_source  */
#line 2262 "parse.y"
                {
                  (yyval.select_clause).clause = record_key_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->nkey = 1;
                  if( (yyvsp[0].fields) == NULL ) {
                    (yyval.select_clause).file->keys = new cbl_file_key_t(field_index((yyvsp[-1].field)));
                  } else { // "special" not-literal literal: a key name
                    (yyvsp[-1].field)->type = FldLiteralA;
                    (yyvsp[-1].field)->data.initial = (yyvsp[-1].field)->name;
                    (yyvsp[-1].field)->attr |= record_key_e;
                    (yyval.select_clause).file->keys = new cbl_file_key_t((yyvsp[-1].field)->name,
                                                      (yyvsp[0].fields)->fields, true);
                  }
                }
#line 17991 "parse.cc"
    break;

  case 175: /* relative_key_clause: KEY is name  */
#line 2279 "parse.y"
                { // lexer returns KEY for RELATIVE ... NAME
                  (yyval.select_clause).clause = relative_key_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                  (yyval.select_clause).file->nkey = 1;
                  (yyval.select_clause).file->keys = new cbl_file_key_t(field_index((yyvsp[0].field)));
                }
#line 18002 "parse.cc"
    break;

  case 176: /* reserve_clause: RESERVE "numeric literal" reserve_area  */
#line 2288 "parse.y"
                {
                  (yyval.select_clause).clause = reserve_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 18011 "parse.cc"
    break;

  case 180: /* sharing_clause: SHARING with sharing_who  */
#line 2299 "parse.y"
                {
                  (yyval.select_clause).clause = sharing_clause_e;
                  (yyval.select_clause).file = new cbl_file_t(protofile);
                }
#line 18020 "parse.cc"
    break;

  case 193: /* config_paragraph: "OBJECT COMPUTER" '.' NAME collating_sequence '.'  */
#line 2323 "parse.y"
                {
                  if( (yyvsp[-1].string) ) {
                    if( !current.collating_sequence((yyvsp[-1].string)) ) {
                      error_msg((yylsp[-1]), "collating sequence already defined as '%s'",
                                current.collating_sequence());
                      YYERROR;
                    }
                  }
                }
#line 18034 "parse.cc"
    break;

  case 198: /* repo_member: repo_class  */
#line 2340 "parse.y"
                { cbl_unimplemented("CLASS"); }
#line 18040 "parse.cc"
    break;

  case 199: /* repo_member: repo_interface  */
#line 2342 "parse.y"
                { cbl_unimplemented("INTERFACE"); }
#line 18046 "parse.cc"
    break;

  case 202: /* repo_member: repo_property  */
#line 2346 "parse.y"
                { cbl_unimplemented("PROPERTY"); }
#line 18052 "parse.cc"
    break;

  case 204: /* repo_as: %empty  */
#line 2351 "parse.y"
                            { (yyval.literal) = literal_t(); }
#line 18058 "parse.cc"
    break;

  case 205: /* repo_as: AS LITERAL  */
#line 2352 "parse.y"
                            { (yyval.literal) = (yyvsp[0].literal); }
#line 18064 "parse.cc"
    break;

  case 209: /* repo_func: FUNCTION repo_func_names INTRINSIC  */
#line 2361 "parse.y"
                                                             {
                  for( const auto& nameloc : *(yyvsp[-1].namelocs) ) {
                    if( 0 == intrinsic_token_of(nameloc.name) ) {
                      error_msg(nameloc.loc,
                                "no such intrinsic function: %qs",
                                nameloc.name);
                      continue;
                    }
                    current.repository_add(nameloc.name);
                  }
                }
#line 18080 "parse.cc"
    break;

  case 210: /* repo_func: FUNCTION ALL INTRINSIC  */
#line 2373 "parse.y"
                {
                  current.repository_add_all();
                }
#line 18088 "parse.cc"
    break;

  case 211: /* repo_func: FUNCTION repo_func_names  */
#line 2376 "parse.y"
                                                   {
		  // We allow multiple names because GnuCOBOL does.  ISO says 1.
                  for( const auto& nameloc : *(yyvsp[0].namelocs) ) {
                    if( 0 != intrinsic_token_of(nameloc.name) ) {
                      error_msg(nameloc.loc,
                                "intrinsic function %qs requires INTRINSIC",
                                nameloc.name);
                      continue;
                    }
                    auto token = current.udf_in(nameloc.name);
                    if( !token ) {
                      error_msg(nameloc.loc, 
                                "%s is not defined here as a user-defined function",
                                nameloc.name);
                      continue;
                    }
                    auto e = symbol_function(0, nameloc.name);
                    assert(e);
                    current.repository_add(symbol_index(e)); // add UDF to repository
                  }
                }
#line 18114 "parse.cc"
    break;

  case 212: /* repo_func_names: repo_func_name  */
#line 2399 "parse.y"
                                     {
                  (yyval.namelocs) = new cbl_namelocs_t(1, *(yyvsp[0].nameloc));
                  delete (yyvsp[0].nameloc);
                }
#line 18123 "parse.cc"
    break;

  case 213: /* repo_func_names: repo_func_names repo_func_name  */
#line 2403 "parse.y"
                                                     {
                  (yyval.namelocs) = (yyvsp[-1].namelocs);
                  (yyval.namelocs)->push_back(*(yyvsp[0].nameloc));
                  delete (yyvsp[0].nameloc);
                }
#line 18133 "parse.cc"
    break;

  case 214: /* repo_func_name: NAME repo_as  */
#line 2409 "parse.y"
                             {
                  if( ! (yyvsp[0].literal).empty() ) {
                    cbl_unimplemented_at((yylsp[0]), "%qs", (yyvsp[0].literal).data);
                  }
                  (yyval.nameloc) = new cbl_nameloc_t((yylsp[-1]), (yyvsp[-1].string));
                }
#line 18144 "parse.cc"
    break;

  case 215: /* repo_program: "Program" NAME repo_as  */
#line 2418 "parse.y"
                {
                  size_t parent = 0;
                  auto program = symbol_label( PROGRAM, LblProgram, 0, (yyvsp[-1].string) );
                  if( ! program ) {
                    if( (yyvsp[0].literal).empty() ) {
                      error_msg((yylsp[0]), "'%s' does not name an earlier program", (yyvsp[-1].string));
                      YYERROR;
                    }
                    program = symbol_label( PROGRAM, LblProgram, 0,
                                            "", (yyvsp[0].literal).data );
                  }
                  if( ! program ) {
                    error_msg((yylsp[0]), "'%s' does not name an earlier program",
                             (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  assert(program);
                  parent = symbol_index(symbol_elem_of(program));
                  // Literal field whose parent is the the aliased program.
                  cbl_field_t prog = {};
		  prog.type = FldLiteralA;
		  prog.attr = quoted_e;
		  prog.parent = parent;
		  prog.data.initial = (yyvsp[0].literal).data;
                  namcpy((yylsp[-1]), prog.name, (yyvsp[-1].string));
                  if( ! prog.data.initial ) {
                    assert(program);
                    prog.data.initial = program->name;
                  }
                  const auto e = symbol_field_add(PROGRAM, &prog);
                  symbol_field_location(symbol_index(e), (yylsp[-1]));
                }
#line 18181 "parse.cc"
    break;

  case 218: /* with_debug: with DEBUGGING MODE  */
#line 2456 "parse.y"
                                    {
                  if( ! set_debug(true) ) {
                    error_msg((yylsp[-1]), "DEBUGGING MODE valid only in fixed format");
                  }
                }
#line 18191 "parse.cc"
    break;

  case 219: /* collating_sequence: %empty  */
#line 2463 "parse.y"
                           { (yyval.string) = NULL; }
#line 18197 "parse.cc"
    break;

  case 220: /* collating_sequence: "Program" COLLATING SEQUENCE is NAME  */
#line 2464 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 18203 "parse.cc"
    break;

  case 221: /* collating_sequence: "Program" SEQUENCE is NAME  */
#line 2465 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 18209 "parse.cc"
    break;

  case 222: /* collating_sequence: COLLATING SEQUENCE is NAME  */
#line 2466 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 18215 "parse.cc"
    break;

  case 223: /* collating_sequence: SEQUENCE is NAME  */
#line 2467 "parse.y"
                                                            { (yyval.string) = (yyvsp[0].string); }
#line 18221 "parse.cc"
    break;

  case 228: /* special_name: ALPHABET NAME is alphabet_name  */
#line 2478 "parse.y"
                {
                  if( !(yyvsp[0].alphasym) ) YYERROR;
                  assert((yyvsp[0].alphasym)); // already in symbol table
                  if( !namcpy((yylsp[-2]), (yyvsp[0].alphasym)->name, (yyvsp[-2].string)) ) YYERROR;
                  if( yydebug ) (yyvsp[0].alphasym)->dump();
                }
#line 18232 "parse.cc"
    break;

  case 229: /* special_name: CLASS NAME is domains  */
#line 2485 "parse.y"
                {
                  struct cbl_field_t field = { 0,
                    FldClass, FldInvalid, 0, 0, 0, 0, nonarray, (yylsp[-2]).first_line, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[-2]), field.name, (yyvsp[-2].string)) ) YYERROR;

                  struct cbl_domain_t *domain =
                    new cbl_domain_t[ domains.size() + 1 ] ;

                  std::copy(domains.begin(), domains.end(), domain);

                  field.data.false_value_as((yyvsp[0].false_domain));
                  field.data.domain_as(domain);
                  domains.clear();

                  if( field_add((yylsp[-2]), &field) == NULL ) {
                    dbgmsg("failed class");
                    YYERROR;
                  }
                }
#line 18258 "parse.cc"
    break;

  case 230: /* special_name: CURRENCY sign is LITERAL with picture_sym  */
#line 2507 "parse.y"
                {
                // The COBOL is "CURRENCY sign SYMBOL PICTURE symbol"
                // In our processing, we flip the order, and refer to
                // symbol_currency_add (symbol, sign-string). 'symbol' is the
                // character in the PICTURE string, and 'sign' is the substitution
                // that gets made in memory.
                  if( ! string_of((yyvsp[-2].literal)) ) {
                    error_msg((yylsp[-2]), "'%s' has embedded NUL", (yyvsp[-2].literal).data);
                    YYERROR;
                  }
                symbol_currency_add( (yyvsp[0].string), (yyvsp[-2].literal).data );
                }
#line 18275 "parse.cc"
    break;

  case 231: /* special_name: DECIMAL_POINT is COMMA  */
#line 2520 "parse.y"
                {
                  symbol_decimal_point_set(',');
                }
#line 18283 "parse.cc"
    break;

  case 232: /* special_name: LOCALE NAME is locale_spec  */
#line 2524 "parse.y"
                {
                  current.locale((yyvsp[-2].string), (yyvsp[0].string));
                  cbl_unimplemented("LOCALE syntax");
                }
#line 18292 "parse.cc"
    break;

  case 234: /* special_name: SYMBOLIC characters symbolic is_alphabet  */
#line 2531 "parse.y"
                {
                  cbl_unimplemented("SYMBOLIC syntax");
                }
#line 18300 "parse.cc"
    break;

  case 235: /* locale_spec: NAME  */
#line 2535 "parse.y"
                        { (yyval.string) = (yyvsp[0].string); }
#line 18306 "parse.cc"
    break;

  case 236: /* locale_spec: LITERAL  */
#line 2536 "parse.y"
                        { (yyval.string) = string_of((yyvsp[0].literal)); }
#line 18312 "parse.cc"
    break;

  case 241: /* dev_mnemonic: device_name is NAME  */
#line 2547 "parse.y"
                {
                  cbl_special_name_t special = { (yyvsp[-2].special_type).token, (yyvsp[-2].special_type).id };
                  if( !namcpy((yylsp[0]), special.name, (yyvsp[0].string)) ) YYERROR;

                  const char *filename;

                  switch( special.id ) {
                  case STDIN_e: case SYSIN_e: case SYSIPT_e:
                    filename = "/dev/stdin";
                    break;
                  case STDOUT_e: case SYSOUT_e:
                  case SYSLIST_e: case SYSLST_e: case CONSOLE_e:
                    filename ="/dev/stdout";
                    break;
                  case STDERR_e: case SYSPUNCH_e: case SYSPCH_e: case SYSERR_e:
                    filename ="/dev/stderr";
                    break;
                  default:
                    filename ="/dev/null";
                    break;
                  }

                  special.filename = symbol_index(symbol_literalA(0, filename));

                  symbol_special_add(PROGRAM, &special);
                }
#line 18343 "parse.cc"
    break;

  case 242: /* dev_mnemonic: NAME is NAME  */
#line 2574 "parse.y"
                {
		  auto p = cmd_or_env_special_of((yyvsp[-2].string));
		  if( !p ) {
		    error_msg((yylsp[-2]), "%s is not a device name", (yyvsp[-2].string));
		    YYERROR;
		  }

                  cbl_special_name_t special = { 0, *p };
                  namcpy((yylsp[0]), special.name, (yyvsp[0].string));

                  symbol_special_add(PROGRAM, &special);
		}
#line 18360 "parse.cc"
    break;

  case 243: /* device_name: SYSIN  */
#line 2588 "parse.y"
                                { (yyval.special_type).token = SYSIN; (yyval.special_type).id = SYSIN_e; }
#line 18366 "parse.cc"
    break;

  case 244: /* device_name: SYSIPT  */
#line 2589 "parse.y"
                                { (yyval.special_type).token = SYSIPT; (yyval.special_type).id = SYSIPT_e; }
#line 18372 "parse.cc"
    break;

  case 245: /* device_name: SYSOUT  */
#line 2590 "parse.y"
                                { (yyval.special_type).token = SYSOUT; (yyval.special_type).id = SYSOUT_e; }
#line 18378 "parse.cc"
    break;

  case 246: /* device_name: SYSLIST  */
#line 2591 "parse.y"
                                { (yyval.special_type).token = SYSLIST; (yyval.special_type).id = SYSLIST_e; }
#line 18384 "parse.cc"
    break;

  case 247: /* device_name: SYSLST  */
#line 2592 "parse.y"
                                { (yyval.special_type).token = SYSLST; (yyval.special_type).id = SYSLST_e; }
#line 18390 "parse.cc"
    break;

  case 248: /* device_name: SYSPUNCH  */
#line 2593 "parse.y"
                                { (yyval.special_type).token = SYSPUNCH; (yyval.special_type).id = SYSPUNCH_e; }
#line 18396 "parse.cc"
    break;

  case 249: /* device_name: SYSPCH  */
#line 2594 "parse.y"
                                { (yyval.special_type).token = SYSPCH; (yyval.special_type).id = SYSPCH_e; }
#line 18402 "parse.cc"
    break;

  case 250: /* device_name: CONSOLE  */
#line 2595 "parse.y"
                                { (yyval.special_type).token = CONSOLE; (yyval.special_type).id = CONSOLE_e; }
#line 18408 "parse.cc"
    break;

  case 251: /* device_name: C01  */
#line 2596 "parse.y"
                                { (yyval.special_type).token = C01; (yyval.special_type).id = C01_e; }
#line 18414 "parse.cc"
    break;

  case 252: /* device_name: C02  */
#line 2597 "parse.y"
                                { (yyval.special_type).token = C02; (yyval.special_type).id = C02_e; }
#line 18420 "parse.cc"
    break;

  case 253: /* device_name: C03  */
#line 2598 "parse.y"
                                { (yyval.special_type).token = C03; (yyval.special_type).id = C03_e; }
#line 18426 "parse.cc"
    break;

  case 254: /* device_name: C04  */
#line 2599 "parse.y"
                                { (yyval.special_type).token = C04; (yyval.special_type).id = C04_e; }
#line 18432 "parse.cc"
    break;

  case 255: /* device_name: C05  */
#line 2600 "parse.y"
                                { (yyval.special_type).token = C05; (yyval.special_type).id = C05_e; }
#line 18438 "parse.cc"
    break;

  case 256: /* device_name: C06  */
#line 2601 "parse.y"
                                { (yyval.special_type).token = C06; (yyval.special_type).id = C06_e; }
#line 18444 "parse.cc"
    break;

  case 257: /* device_name: C07  */
#line 2602 "parse.y"
                                { (yyval.special_type).token = C07; (yyval.special_type).id = C07_e; }
#line 18450 "parse.cc"
    break;

  case 258: /* device_name: C08  */
#line 2603 "parse.y"
                                { (yyval.special_type).token = C08; (yyval.special_type).id = C08_e; }
#line 18456 "parse.cc"
    break;

  case 259: /* device_name: C09  */
#line 2604 "parse.y"
                                { (yyval.special_type).token = C09; (yyval.special_type).id = C09_e; }
#line 18462 "parse.cc"
    break;

  case 260: /* device_name: C10  */
#line 2605 "parse.y"
                                { (yyval.special_type).token = C10; (yyval.special_type).id = C10_e; }
#line 18468 "parse.cc"
    break;

  case 261: /* device_name: C11  */
#line 2606 "parse.y"
                                { (yyval.special_type).token = C11; (yyval.special_type).id = C11_e; }
#line 18474 "parse.cc"
    break;

  case 262: /* device_name: C12  */
#line 2607 "parse.y"
                                { (yyval.special_type).token = C12; (yyval.special_type).id = C12_e; }
#line 18480 "parse.cc"
    break;

  case 263: /* device_name: CSP  */
#line 2608 "parse.y"
                                { (yyval.special_type).token = CSP; (yyval.special_type).id = CSP_e; }
#line 18486 "parse.cc"
    break;

  case 264: /* device_name: S01  */
#line 2609 "parse.y"
                                { (yyval.special_type).token = S01; (yyval.special_type).id = S01_e; }
#line 18492 "parse.cc"
    break;

  case 265: /* device_name: S02  */
#line 2610 "parse.y"
                                { (yyval.special_type).token = S02; (yyval.special_type).id = S02_e; }
#line 18498 "parse.cc"
    break;

  case 266: /* device_name: S03  */
#line 2611 "parse.y"
                                { (yyval.special_type).token = S03; (yyval.special_type).id = S03_e; }
#line 18504 "parse.cc"
    break;

  case 267: /* device_name: S04  */
#line 2612 "parse.y"
                                { (yyval.special_type).token = S04; (yyval.special_type).id = S04_e; }
#line 18510 "parse.cc"
    break;

  case 268: /* device_name: S05  */
#line 2613 "parse.y"
                                { (yyval.special_type).token = S05; (yyval.special_type).id = S05_e; }
#line 18516 "parse.cc"
    break;

  case 269: /* device_name: "AFP 5A"  */
#line 2614 "parse.y"
                                { (yyval.special_type).token = AFP_5A; (yyval.special_type).id = AFP_5A_e; }
#line 18522 "parse.cc"
    break;

  case 270: /* device_name: STDIN  */
#line 2615 "parse.y"
                                { (yyval.special_type).token = STDIN; (yyval.special_type).id = STDIN_e; }
#line 18528 "parse.cc"
    break;

  case 271: /* device_name: STDOUT  */
#line 2616 "parse.y"
                                { (yyval.special_type).token = STDOUT; (yyval.special_type).id = STDOUT_e; }
#line 18534 "parse.cc"
    break;

  case 272: /* device_name: STDERR  */
#line 2617 "parse.y"
                                { (yyval.special_type).token = STDERR; (yyval.special_type).id = STDERR_e; }
#line 18540 "parse.cc"
    break;

  case 273: /* alphabet_name: "STANDARD ALPHABET"  */
#line 2624 "parse.y"
                                   { (yyval.alphasym) = alphabet_add((yylsp[0]), ASCII_e); }
#line 18546 "parse.cc"
    break;

  case 274: /* alphabet_name: NATIVE  */
#line 2625 "parse.y"
                                   { (yyval.alphasym) = alphabet_add((yylsp[0]), EBCDIC_e); }
#line 18552 "parse.cc"
    break;

  case 275: /* alphabet_name: EBCDIC  */
#line 2626 "parse.y"
                                   { (yyval.alphasym) = alphabet_add((yylsp[0]), EBCDIC_e); }
#line 18558 "parse.cc"
    break;

  case 276: /* alphabet_name: alphabet_seqs  */
#line 2628 "parse.y"
                {
                  (yyval.alphasym) = cbl_alphabet_of(symbol_alphabet_add(PROGRAM, (yyvsp[0].alphasym)));
                }
#line 18566 "parse.cc"
    break;

  case 277: /* alphabet_name: error  */
#line 2632 "parse.y"
                {
                  error_msg((yylsp[0]), "code-name-1 may be STANDARD-1, STANDARD-2, "
                            "NATIVE, OR EBCDIC");
                  (yyval.alphasym) = NULL;
                }
#line 18576 "parse.cc"
    break;

  case 278: /* alphabet_seqs: alphabet_seq  */
#line 2645 "parse.y"
                {
                  (yyval.alphasym) = new cbl_alphabet_t((yylsp[0]), custom_encoding_e);

                  if( !(yyvsp[0].colseq).low || (yyvsp[0].colseq).also ) {
                    error_msg((yylsp[0]), "syntax error at ALSO");
                    YYERROR;
                  }
                  (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).low);
                  size_t len = (yyvsp[0].colseq).low == nul_string()?
                    1 : strlen((const char*)(yyvsp[0].colseq).low);
                  assert(len > 0);
                  (yyval.alphasym)->add_interval((yylsp[0]), (yyvsp[0].colseq).low[--len], (yyvsp[0].colseq).high[0]);
                  (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).high);
                }
#line 18595 "parse.cc"
    break;

  case 279: /* alphabet_seqs: alphabet_seqs alphabet_seq  */
#line 2660 "parse.y"
                {
                  // ALSO x'00' is valid, but in that case the low pointer is NULL
                  if( !(yyvsp[0].colseq).low ) {
                    (yyval.alphasym)->also((yylsp[0]), (yyvsp[0].colseq).also);
                  } else {
                    (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).low);
                    size_t len = (yyvsp[0].colseq).low == nul_string()? 1 : strlen((const char*)(yyvsp[0].colseq).low);
                    assert(len > 0);
                    (yyval.alphasym)->add_interval((yylsp[0]), (yyvsp[0].colseq).low[--len], (yyvsp[0].colseq).high[0]);
                    (yyval.alphasym)->add_sequence((yylsp[0]), (yyvsp[0].colseq).high);
                  }
                }
#line 18612 "parse.cc"
    break;

  case 280: /* alphabet_seq: alphabet_lit  */
#line 2674 "parse.y"
                {
                  (yyval.colseq).also = 0;
                  if( (yyvsp[0].literal).len == 1 && (yyvsp[0].literal).data[0] == '\0' ) {
                    (yyval.colseq).high = (yyval.colseq).low = nul_string();
                  } else {
                    size_t size = 1 + (yyvsp[0].literal).len;
                    (yyval.colseq).low = new unsigned char[size];
                    memcpy((yyval.colseq).low, (yyvsp[0].literal).data, size);
                    (yyval.colseq).high = (yyval.colseq).low + size - 1;
                    assert((yyval.colseq).high[0] == '\0');
                  }
                }
#line 18629 "parse.cc"
    break;

  case 281: /* alphabet_seq: alphabet_lit THRU alphabet_lit  */
#line 2687 "parse.y"
                {
                  (yyval.colseq).also = 0;
                  size_t size = 1 + (yyvsp[-2].literal).len;
                  if( (yyvsp[-2].literal).len == 1 && (yyvsp[-2].literal).data[0] == '\0' ) {
                    (yyval.colseq).low = nul_string();
                  } else {
                    (yyval.colseq).low = new unsigned char[size];
                    memcpy((yyval.colseq).low, (yyvsp[-2].literal).data, size);
                  }
                  assert((yyvsp[0].literal).len > 0);
                  assert((yyvsp[0].literal).data[0] != '\0');
                  size = 1 + (yyvsp[0].literal).len;
                  (yyval.colseq).high = new unsigned char[size];
                  memcpy((yyval.colseq).high, (yyvsp[0].literal).data, size);
                }
#line 18649 "parse.cc"
    break;

  case 282: /* alphabet_seq: ALSO alphabet_etc  */
#line 2702 "parse.y"
                                  { (yyval.colseq) = {}; (yyval.colseq).also = (yyvsp[0].number); }
#line 18655 "parse.cc"
    break;

  case 283: /* alphabet_etc: alphabet_lit  */
#line 2705 "parse.y"
                {
                  if( (yyvsp[0].literal).len > 1 ) {
                    error_msg((yylsp[0]), "%qs can be only a single letter", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  (yyval.number) = (unsigned char)(yyvsp[0].literal).data[0];
                }
#line 18667 "parse.cc"
    break;

  case 284: /* alphabet_etc: spaces_etc  */
#line 2712 "parse.y"
                           {
                  // For figurative constants, pass the symbol table index,
                  // marked with the high bit.
                  static const auto bits = sizeof((yyval.number)) * 8 - 1;
                  unsigned int high_bit = 1L << bits;
                  static_assert(sizeof((yyval.number)) == sizeof(high_bit),
                                "adjust high_bit to match size of nonterminal target");
                  memcpy(&(yyval.number), &high_bit, sizeof((yyval.number)));
                  (yyval.number) |= constant_index((yyvsp[0].number));
                }
#line 18682 "parse.cc"
    break;

  case 285: /* alphabet_lit: LITERAL  */
#line 2723 "parse.y"
                        { (yyval.literal) = (yyvsp[0].literal); assert((yyval.literal).len > 0); }
#line 18688 "parse.cc"
    break;

  case 286: /* alphabet_lit: "numeric literal"  */
#line 2724 "parse.y"
                        {
                  assert( (yyvsp[0].numstr).radix == decimal_e);
                  (yyval.literal) = literal_of((yyvsp[0].numstr).string);
                }
#line 18697 "parse.cc"
    break;

  case 287: /* upsi: UPSI is NAME  */
#line 2731 "parse.y"
                {
                  assert((yyvsp[-2].string));
                  size_t parent = symbol_index(symbol_field(0,0,"UPSI-0"));
                  cbl_field_t *field = field_alloc((yylsp[0]), FldSwitch, parent, (yyvsp[0].string));
                  if( !field ) YYERROR;
                  field->attr = constant_e;
                  field->data.initial = (yyvsp[-2].string);
                }
#line 18710 "parse.cc"
    break;

  case 288: /* upsi: UPSI is NAME upsi_entry  */
#line 2740 "parse.y"
                {
                  assert((yyvsp[-3].string));
                  size_t parent = symbol_index(symbol_field(0,0,"UPSI-0"));
                  cbl_field_t *field = field_alloc((yylsp[-1]), FldSwitch, parent, (yyvsp[-1].string));
                  if( !field ) YYERROR;
                  field->attr = constant_e;
                  field->data.initial = (yyvsp[-3].string);

                  assert('0' <= (yyvsp[-3].string)[0] && (yyvsp[-3].string)[0] < '8');
                  const uint32_t bitn = (yyvsp[-3].string)[0] - '0', value = (1 << bitn);

                  if( (yyvsp[0].switches).on ) {
                    cbl_field_t *on = field_alloc((yylsp[-1]), FldSwitch, parent, (yyvsp[0].switches).on);
                    if( !on ) YYERROR;
                    on->data = new cbl_upsi_mask_t(true, value);
                  }
                  if( (yyvsp[0].switches).off ) {
                    cbl_field_t *off = field_alloc((yylsp[-1]), FldSwitch, parent, (yyvsp[0].switches).off);
                    if( !off ) YYERROR;
                    off->data = new cbl_upsi_mask_t(false, value);
                  }
                }
#line 18737 "parse.cc"
    break;

  case 289: /* upsi: UPSI upsi_entry  */
#line 2763 "parse.y"
                {
                  size_t parent = symbol_index(symbol_field(0,0,"UPSI-0"));
                  assert('0' <= (yyvsp[-1].string)[0] && (yyvsp[-1].string)[0] < '8');
                  const uint32_t bitn = (yyvsp[-1].string)[0] - '0', value = (1 << bitn);

                  if( (yyvsp[0].switches).on ) {
                    cbl_field_t *on = field_alloc((yyvsp[0].switches).loc, FldSwitch, parent, (yyvsp[0].switches).on);
                    if( !on ) YYERROR;
                    on->data = new cbl_upsi_mask_t(true, value);
                  }
                  if( (yyvsp[0].switches).off ) {
                    cbl_field_t *off = field_alloc((yyvsp[0].switches).loc, FldSwitch, parent, (yyvsp[0].switches).off);
                    if( !off ) YYERROR;
                    off->data = new cbl_upsi_mask_t(false, value);
                  }
                }
#line 18758 "parse.cc"
    break;

  case 290: /* upsi_entry: ON status is NAME  */
#line 2781 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[0]);
                  (yyval.switches).on  = (yyvsp[0].string);
                  (yyval.switches).off = NULL;
                }
#line 18768 "parse.cc"
    break;

  case 291: /* upsi_entry: OFF status is NAME  */
#line 2787 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[0]);
                  (yyval.switches).on  = NULL;
                  (yyval.switches).off = (yyvsp[0].string);
                }
#line 18778 "parse.cc"
    break;

  case 292: /* upsi_entry: OFF status is NAME ON status is NAME  */
#line 2793 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[-4]);
                  (yyval.switches).on  = (yyvsp[0].string);
                  (yyval.switches).off = (yyvsp[-4].string);
                }
#line 18788 "parse.cc"
    break;

  case 293: /* upsi_entry: ON status is NAME OFF status is NAME  */
#line 2799 "parse.y"
                {
                  (yyval.switches).loc = (yylsp[-4]);
                  (yyval.switches).on =  (yyvsp[-4].string);
                  (yyval.switches).off = (yyvsp[0].string);
                }
#line 18798 "parse.cc"
    break;

  case 294: /* picture_sym: %empty  */
#line 2806 "parse.y"
                                      { (yyval.string) = NULL; }
#line 18804 "parse.cc"
    break;

  case 295: /* picture_sym: PICTURE SYMBOL LITERAL  */
#line 2807 "parse.y"
                                            {
                  if( ! string_of((yyvsp[0].literal)) ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  (yyval.string) = string_of((yyvsp[0].literal));
                }
#line 18816 "parse.cc"
    break;

  case 297: /* domains: domains domain  */
#line 2823 "parse.y"
                               { (yyval.false_domain) = (yyvsp[-1].false_domain)? (yyvsp[-1].false_domain) : (yyvsp[0].false_domain); }
#line 18822 "parse.cc"
    break;

  case 298: /* domain: all LITERAL  */
#line 2827 "parse.y"
                {
                  if( ! string_of((yyvsp[0].literal)) ) {
		    gcc_location_set((yylsp[0]));
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  (yyval.false_domain) = NULL;
                  cbl_domain_t domain((yylsp[0]), (yyvsp[-1].boolean), (yyvsp[0].literal).len, (yyvsp[0].literal).data);
                  domains.push_back(domain);
                }
#line 18836 "parse.cc"
    break;

  case 299: /* domain: all LITERAL THRU all LITERAL  */
#line 2837 "parse.y"
                {
                  if( ! string_of((yyvsp[-3].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[-3].literal).data);
                  }
                  if( ! string_of((yyvsp[0].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  (yyval.false_domain) = NULL;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), (yyvsp[-3].literal).len, (yyvsp[-3].literal).data),
                                     last((yylsp[0]), (yyvsp[-1].boolean), (yyvsp[0].literal).len, (yyvsp[0].literal).data);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18853 "parse.cc"
    break;

  case 300: /* domain: all "numeric literal"  */
#line 2850 "parse.y"
                {
                  (yyval.false_domain) = NULL;
                  cbl_domain_t dom((yylsp[0]), (yyvsp[-1].boolean), strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                  domains.push_back(dom);
                }
#line 18863 "parse.cc"
    break;

  case 301: /* domain: all "numeric literal" THRU all "numeric literal"  */
#line 2856 "parse.y"
                {
                  (yyval.false_domain) = NULL;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), strlen((yyvsp[-3].numstr).string), (yyvsp[-3].numstr).string, true),
		                     last((yylsp[0]), (yyvsp[-1].boolean), strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18874 "parse.cc"
    break;

  case 302: /* domain: all reserved_value  */
#line 2862 "parse.y"
                                   {
                  (yyval.false_domain) = NULL;
                  if( (yyvsp[0].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[0].number)))->data.initial;
                  struct cbl_domain_t domain( (yylsp[0]), (yyvsp[-1].boolean), strlen(value), value );
                  domains.push_back(domain);
                }
#line 18886 "parse.cc"
    break;

  case 303: /* domain: all reserved_value THRU all LITERAL  */
#line 2869 "parse.y"
                                                                        {
                  if( ! string_of((yyvsp[0].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  (yyval.false_domain) = NULL;
                  if( (yyvsp[-3].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[-3].number)))->data.initial;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), strlen(value), value),
                                     last((yylsp[0]), (yyvsp[-1].boolean), (yyvsp[0].literal).len, (yyvsp[0].literal).data);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18902 "parse.cc"
    break;

  case 304: /* domain: all reserved_value THRU all "numeric literal"  */
#line 2880 "parse.y"
                                                                       {
                  (yyval.false_domain) = NULL;
                  if( (yyvsp[-3].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[-3].number)))->data.initial;
                  cbl_domain_elem_t first((yylsp[-3]), (yyvsp[-4].boolean), strlen(value), value, true),
                                     last((yylsp[0]), (yyvsp[-1].boolean), strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                  domains.push_back(cbl_domain_t(first, last));
                }
#line 18915 "parse.cc"
    break;

  case 305: /* domain: when_set_to "False" is LITERAL  */
#line 2889 "parse.y"
                {
                  if( ! string_of((yyvsp[0].literal)) ) {
                    yywarn("'%s' has embedded NUL", (yyvsp[0].literal).data);
                  }
                  const char *dom = (yyvsp[0].literal).data;
                  (yyval.false_domain) = new cbl_domain_t((yylsp[0]), false, (yyvsp[0].literal).len, dom);
                }
#line 18927 "parse.cc"
    break;

  case 306: /* domain: when_set_to "False" is reserved_value  */
#line 2897 "parse.y"
                {
                  if( (yyvsp[0].number) == NULLS ) YYERROR;
                  auto value = constant_of(constant_index((yyvsp[0].number)))->data.initial;
                  (yyval.false_domain) = new cbl_domain_t((yylsp[0]), false, strlen(value), value );
                }
#line 18937 "parse.cc"
    break;

  case 307: /* domain: when_set_to "False" is "numeric literal"  */
#line 2903 "parse.y"
                {
		  (yyval.false_domain) = new cbl_domain_t((yylsp[0]), false, strlen((yyvsp[0].numstr).string), (yyvsp[0].numstr).string, true);
                }
#line 18945 "parse.cc"
    break;

  case 318: /* $@3: %empty  */
#line 2919 "parse.y"
                         { current_division = data_div_e; }
#line 18951 "parse.cc"
    break;

  case 319: /* data_div: "DATA DIVISION" $@3 data_sections  */
#line 2920 "parse.y"
                {
                  current_data_section = not_data_datasect_e;
                  parser_division( data_div_e, NULL, 0, NULL );
                }
#line 18960 "parse.cc"
    break;

  case 323: /* $@4: %empty  */
#line 2931 "parse.y"
                              {
                  current_data_section_set((yylsp[-1]), file_datasect_e);
                }
#line 18968 "parse.cc"
    break;

  case 325: /* $@5: %empty  */
#line 2934 "parse.y"
                                         {
                  current_data_section_set((yylsp[-1]), working_storage_datasect_e);
                }
#line 18976 "parse.cc"
    break;

  case 327: /* $@6: %empty  */
#line 2937 "parse.y"
                                       {
                  current_data_section_set((yylsp[-1]), local_storage_datasect_e);
                }
#line 18984 "parse.cc"
    break;

  case 329: /* $@7: %empty  */
#line 2940 "parse.y"
                                 {
                  current_data_section_set((yylsp[-1]), linkage_datasect_e);
                }
#line 18992 "parse.cc"
    break;

  case 331: /* data_section: SCREEN SECTION '.'  */
#line 2943 "parse.y"
                                   {
		  cbl_unimplemented("SCREEN SECTION");
		}
#line 19000 "parse.cc"
    break;

  case 334: /* $@8: %empty  */
#line 2951 "parse.y"
                                       { field_done(); }
#line 19006 "parse.cc"
    break;

  case 336: /* $@9: %empty  */
#line 2952 "parse.y"
                                       { field_done(); }
#line 19012 "parse.cc"
    break;

  case 338: /* fd_name: FD NAME  */
#line 2955 "parse.y"
                        { (yyval.string) = (yyvsp[0].string); file_section_fd_set(fd_e, (yyvsp[0].string), (yylsp[0])); }
#line 19018 "parse.cc"
    break;

  case 339: /* fd_name: SD NAME  */
#line 2956 "parse.y"
                        { (yyval.string) = (yyvsp[0].string); file_section_fd_set(sd_e, (yyvsp[0].string), (yylsp[0])); }
#line 19024 "parse.cc"
    break;

  case 342: /* fd_clause: record_desc  */
#line 2963 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->varying_size.min = (yyvsp[0].min_max).min;
                  f->varying_size.max = (yyvsp[0].min_max).max;
                  auto& cap = cbl_field_of(symbol_at(f->default_record))->data.capacity;
                  cap = std::max(cap, uint32_t(f->varying_size.max));
                  // If min != max now, we know varying is explicitly defined.
                  f->varying_size.explicitly = f->varies();
                  if( f->varying_size.max != 0 ) {
                    if( !(f->varying_size.min <= f->varying_size.max) ) {
                      error_msg((yylsp[0]), "%zu must be less than or equal to %zu",
                                f->varying_size.min, f->varying_size.max);
                      YYERROR;
                    }
                  }
                }
#line 19045 "parse.cc"
    break;

  case 346: /* fd_clause: RECORDING mode is NAME  */
#line 2983 "parse.y"
                {
                  switch( (yyvsp[0].string)[0] ) {
                  case 'F':
                  case 'V':
                  case 'U':
                  case 'S':
                    break;
                  default:
                    error_msg((yylsp[0]), "invalid RECORDING MODE '%s'", (yyvsp[0].string));
                    YYERROR;
                  }
                  cbl_unimplementedw("RECORDING MODE was ignored, not defined by ISO 2023");
                }
#line 19063 "parse.cc"
    break;

  case 349: /* fd_clause: is GLOBAL  */
#line 2999 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->attr |= global_e;
                }
#line 19072 "parse.cc"
    break;

  case 350: /* fd_clause: is EXTERNAL  */
#line 3004 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->attr |= external_e;
                }
#line 19081 "parse.cc"
    break;

  case 351: /* fd_clause: is EXTERNAL as LITERAL  */
#line 3009 "parse.y"
                {
                  auto f = cbl_file_of(symbol_at(file_section_fd));
                  f->attr |= external_e;
                  cbl_unimplemented("AS LITERAL");
                }
#line 19091 "parse.cc"
    break;

  case 352: /* fd_clause: fd_linage  */
#line 3014 "parse.y"
                          { cbl_unimplemented("LINAGE"); }
#line 19097 "parse.cc"
    break;

  case 353: /* fd_clause: fd_report  */
#line 3015 "parse.y"
                          {
                  cbl_unimplemented("REPORT WRITER");
                  YYERROR;
                }
#line 19106 "parse.cc"
    break;

  case 355: /* rec_contains: "numeric literal"  */
#line 3023 "parse.y"
                            {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[0]), "size %s cannot be negative", (yyvsp[0].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = (yyval.min_max).max = n; // fixed length
                }
#line 19120 "parse.cc"
    break;

  case 356: /* rec_contains: "numeric literal" TO "numeric literal"  */
#line 3032 "parse.y"
                                           {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-2].numstr).string, (yyvsp[-2].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-2]), "size %s cannot be negative", (yyvsp[-2].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;

                  rn = numstr2i((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                  n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[0]), "size %s cannot be negative", (yyvsp[0].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).max = n;
                  if( !((yyval.min_max).min < (yyval.min_max).max) ) {
                    error_msg((yylsp[0]), "FROM (%zu) must be less than TO (%zu)",
                              (yyval.min_max).min, (yyval.min_max).max);
                    YYERROR;
                  }
                }
#line 19147 "parse.cc"
    break;

  case 373: /* record_desc: RECORD is record_vary depending  */
#line 3086 "parse.y"
                                                           { (yyval.min_max) = (yyvsp[-1].min_max); }
#line 19153 "parse.cc"
    break;

  case 374: /* record_desc: RECORD contains rec_contains characters  */
#line 3087 "parse.y"
                                                           { (yyval.min_max) = (yyvsp[-1].min_max); }
#line 19159 "parse.cc"
    break;

  case 375: /* record_vary: VARYING in_size from_to  */
#line 3090 "parse.y"
                                        { (yyval.min_max) = (yyvsp[0].min_max); }
#line 19165 "parse.cc"
    break;

  case 376: /* record_vary: VARYING from_to  */
#line 3091 "parse.y"
                                        { (yyval.min_max) = (yyvsp[0].min_max); }
#line 19171 "parse.cc"
    break;

  case 377: /* record_vary: VARYING in_size  */
#line 3092 "parse.y"
                                { (yyval.min_max).min = 0; (yyval.min_max).max = 0; }
#line 19177 "parse.cc"
    break;

  case 378: /* record_vary: VARYING  */
#line 3093 "parse.y"
                                { (yyval.min_max).min = 0; (yyval.min_max).max = 0; }
#line 19183 "parse.cc"
    break;

  case 382: /* from_to: FROM "numeric literal" TO "numeric literal" characters  */
#line 3101 "parse.y"
                                                           {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-3].numstr).string, (yyvsp[-3].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-3]), "size %s cannot be negative", (yyvsp[-3].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-3]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).max = n;
                }
#line 19204 "parse.cc"
    break;

  case 383: /* from_to: "numeric literal" TO "numeric literal" characters  */
#line 3117 "parse.y"
                                                      {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-3].numstr).string, (yyvsp[-3].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-3]), "size %s cannot be negative", (yyvsp[-3].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).max = n;
                }
#line 19225 "parse.cc"
    break;

  case 384: /* from_to: TO "numeric literal" characters  */
#line 3134 "parse.y"
                                          {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = 0;
                  (yyval.min_max).max = n;
                }
#line 19240 "parse.cc"
    break;

  case 385: /* from_to: FROM "numeric literal" characters  */
#line 3145 "parse.y"
                                            {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  (yyval.min_max).max = size_t(-1);
                }
#line 19255 "parse.cc"
    break;

  case 386: /* from_to: "numeric literal" characters  */
#line 3155 "parse.y"
                                       {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  ssize_t n = real_to_integer (&rn);
                  if( n < 0 ) {
                    error_msg((yylsp[-1]), "size %s cannot be negative", (yyvsp[-1].numstr).string);
                    YYERROR;
                  }
                  (yyval.min_max).min = n;
                  (yyval.min_max).max = size_t(-1);
                }
#line 19270 "parse.cc"
    break;

  case 387: /* from_to: CHARACTERS  */
#line 3166 "parse.y"
                           { (yyval.min_max).min = 0; (yyval.min_max).max = size_t(-1); }
#line 19276 "parse.cc"
    break;

  case 389: /* depending: DEPENDING on NAME  */
#line 3171 "parse.y"
                {
                  assert(file_section_fd > 0);
                  symbol_elem_t *e = symbol_at(file_section_fd);
                  assert(e);
                  auto file = cbl_file_of(e);
                  size_t odo;

                  if( (e = symbol_field(PROGRAM, 0, (yyvsp[0].string))) != NULL ) {
                    assert(e->type == SymField);
                    odo = symbol_index(e);
                  } else {
		    e = symbol_field_forward_add(PROGRAM, 0, (yyvsp[0].string), (yylsp[0]).first_line);
                    if( !e ) YYERROR;
		    symbol_field_location( symbol_index(e), (yylsp[0]) );
                    odo = field_index(cbl_field_of(e));
                  }

                  file->record_length = odo;
                  assert( file->record_length > 0 );
                }
#line 19301 "parse.cc"
    break;

  case 405: /* field: data_descr '.'  */
#line 3219 "parse.y"
                {
                  if( in_file_section() && (yyvsp[-1].field)->level == 1 ) {
                    if( !file_section_parent_set((yyvsp[-1].field)) ) {
                      YYERROR;
                    }
                  }
                  field_done();

                  const auto& field(*(yyvsp[-1].field));

                  // Format data.initial per picture
                  if( 0 == pristine_values.count(field.data.initial) ) {
                    if( field.data.digits > 0 && !field.is_zero() ) {
                      char *initial;
                      int rdigits = field.data.rdigits < 0?
                                    1 : field.data.rdigits + 1;

                      if( field.has_attr(scaled_e) ) {
                        if( field.data.rdigits > 0 ) {
                          rdigits = field.data.digits + field.data.rdigits;
                        } else {
                          rdigits = 0;
                        }
                      }
                      initial = string_of(field.data.value_of());
                      if( !initial ) {
                        error_msg((yylsp[-1]), "could not convert value to string");
                        YYERROR;
                      }
                      char decimal = symbol_decimal_point();
                      std::replace(initial, initial + strlen(initial), '.', decimal);
                      free(const_cast<char*>((yyvsp[-1].field)->data.initial));
                      (yyvsp[-1].field)->data.initial = initial;
                      if( yydebug ) {
                        const char *value_str = string_of(field.data.value_of());
                        dbgmsg("%s::data.initial is (%%%d.%d) %s ==> '%s'",
			       field.name,
			       field.data.digits,
			       rdigits,
			       value_str? value_str : "",
			       field.data.initial);
                      }
                    }
                  }
                }
#line 19351 "parse.cc"
    break;

  case 410: /* occurs_clause: OCCURS name indexed  */
#line 3271 "parse.y"
                {
		  if( ! (is_constant((yyvsp[-1].field)) && (yyvsp[-1].field)->type == FldLiteralN) ) {
		    error_msg((yylsp[-1]), "%s is not CONSTANT", (yyvsp[-1].field)->name);
		    YYERROR;
		  }
                  cbl_occurs_t *occurs = &current_field()->occurs;
                  occurs->bounds.lower =
                  occurs->bounds.upper = (yyvsp[-1].field)->as_integer();
		}
#line 19365 "parse.cc"
    break;

  case 411: /* cardinal_lb: cardinal times  */
#line 3281 "parse.y"
                               {
                  current_field()->occurs.bounds.lower = (yyvsp[-1].number);
                  current_field()->occurs.bounds.upper = (yyvsp[-1].number);
                }
#line 19374 "parse.cc"
    break;

  case 412: /* cardinal: "numeric literal"  */
#line 3288 "parse.y"
                {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                  (yyval.number) = real_to_integer (&rn);
                }
#line 19383 "parse.cc"
    break;

  case 413: /* depending_on: cardinal TO bound DEPENDING on name  */
#line 3295 "parse.y"
                {
                  cbl_occurs_t *occurs = &current_field()->occurs;
                  occurs->bounds.lower = (size_t)(yyvsp[-5].number);
                  occurs->bounds.upper = (size_t)(yyvsp[-3].number);
                  occurs->depending_on = field_index((yyvsp[0].field));
                }
#line 19394 "parse.cc"
    break;

  case 414: /* depending_on: bound DEPENDING on name  */
#line 3302 "parse.y"
                {
                  cbl_occurs_t *occurs = &current_field()->occurs;
                  occurs->bounds.lower = 1;
                  occurs->bounds.upper = (size_t)(yyvsp[-3].number);
                  occurs->depending_on = field_index((yyvsp[0].field));
                }
#line 19405 "parse.cc"
    break;

  case 416: /* bound: UNBOUNDED times  */
#line 3310 "parse.y"
                                 { (yyval.number) = -1; }
#line 19411 "parse.cc"
    break;

  case 420: /* ordering: ASCENDING  */
#line 3319 "parse.y"
                {
                  current_field()->occurs.key_alloc(true);
                }
#line 19419 "parse.cc"
    break;

  case 421: /* ordering: DESCENDING  */
#line 3323 "parse.y"
                {
                  current_field()->occurs.key_alloc(false);
                }
#line 19427 "parse.cc"
    break;

  case 424: /* key_field1: name  */
#line 3331 "parse.y"
                {
                  current_field()->occurs.key_field_add((yyvsp[0].field));
                }
#line 19435 "parse.cc"
    break;

  case 429: /* index_field1: ctx_name  */
#line 3343 "parse.y"
                {
		  static const cbl_field_data_t data { 0, 8 }; // capacity 8
                  cbl_field_t field = {};
		  field.type = FldIndex;
		  field.parent = field_index(current_field());
		  field.data = data;
                  if( !namcpy((yylsp[0]), field.name, (yyvsp[0].string)) ) YYERROR;

                  auto symbol = symbol_field(PROGRAM, field.parent, (yyvsp[0].string));
                  if( symbol ) {
                    auto f( cbl_field_of(symbol) );
                    error_msg((yylsp[0]),  "'%s' already defined on line %d",
                              f->name, f->line );
                    YYERROR;
                  }

                  auto index = field_add((yylsp[0]), &field);
                  if( !index ) {
                    YYERROR;
                  }

                  current_field()->occurs.index_add(index);
                }
#line 19463 "parse.cc"
    break;

  case 430: /* level_name: LEVEL ctx_name  */
#line 3369 "parse.y"
                {
                  switch((yyvsp[-1].number)) {
                  case 66:
                  case 77:
                  case 88:
                    break;
                  default:
		    if( 1 <= (yyvsp[-1].number) && (yyvsp[-1].number) <= 49 ) break;
                    error_msg((yylsp[-1]), "LEVEL %d not supported", (yyvsp[-1].number));
                    YYERROR;
                  }
                  struct cbl_field_t field = { 0,
                    FldInvalid, FldInvalid, 0, 0, 0, capacity_cast((yyvsp[-1].number)),
		    nonarray, (yylsp[0]).first_line, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[0]), field.name, (yyvsp[0].string)) ) YYERROR;

                  (yyval.field) = field_add((yyloc), &field);
                  if( !(yyval.field) ) {
                    YYERROR;
                  }
                  current_field((yyval.field)); // make available for data_clauses
                }
#line 19492 "parse.cc"
    break;

  case 431: /* level_name: LEVEL  */
#line 3394 "parse.y"
                {
                  switch((yyvsp[0].number)) {
                  case 66:
                  case 77:
                  case 88:
                    break;
                  default:
		    if( 1 <= (yyvsp[0].number) && (yyvsp[0].number) <= 49 ) break;
                    error_msg((yylsp[0]), "LEVEL %d not supported", (yyvsp[0].number));
                    YYERROR;
                  }
                  struct cbl_field_t field = { 0,
                    FldInvalid, FldInvalid, 0, 0, 0, capacity_cast((yyvsp[0].number)),
		    nonarray, (yylsp[0]).first_line, "",
                    0, {}, {}, NULL };

                  (yyval.field) = field_add((yylsp[0]), &field);
                  if( !(yyval.field) ) {
                    YYERROR;
                  }
                  current_field((yyval.field)); // make available for data_clauses
                }
#line 19519 "parse.cc"
    break;

  case 432: /* data_descr: data_descr1  */
#line 3419 "parse.y"
                {
                  (yyval.field) = current_field((yyvsp[0].field)); // make available for occurs, etc.
                }
#line 19527 "parse.cc"
    break;

  case 433: /* data_descr: error  */
#line 3422 "parse.y"
                      { static cbl_field_t none = {}; (yyval.field) = &none; }
#line 19533 "parse.cc"
    break;

  case 435: /* const_value: "BYTE-LENGTH" of name  */
#line 3426 "parse.y"
                                    { set_real_from_capacity((yylsp[0]), (yyvsp[0].field), &(yyval.float128)); }
#line 19539 "parse.cc"
    break;

  case 436: /* const_value: LENGTH of name  */
#line 3427 "parse.y"
                                    { set_real_from_capacity((yylsp[0]), (yyvsp[0].field), &(yyval.float128)); }
#line 19545 "parse.cc"
    break;

  case 437: /* const_value: "LENGTH-OF" of name  */
#line 3428 "parse.y"
                                    { set_real_from_capacity((yylsp[0]), (yyvsp[0].field), &(yyval.float128)); }
#line 19551 "parse.cc"
    break;

  case 438: /* const_value: "LENGTH-OF" of binary_type  */
#line 3429 "parse.y"
                                                 {
		                real_from_integer(&(yyval.float128), VOIDmode, (yyvsp[0].number), SIGNED); }
#line 19558 "parse.cc"
    break;

  case 439: /* value78: literalism  */
#line 3434 "parse.y"
                {
                  cbl_field_data_t data = {};
		    data.capacity = capacity_cast(strlen((yyvsp[0].literal).data));
		    data.initial = (yyvsp[0].literal).data;
                  (yyval.field_data) = new cbl_field_data_t(data);
                }
#line 19569 "parse.cc"
    break;

  case 440: /* value78: const_value  */
#line 3441 "parse.y"
                {
                  cbl_field_data_t data = {};
		  data = build_real (float128_type_node, (yyvsp[0].float128));
                  (yyval.field_data) = new cbl_field_data_t(data);
                }
#line 19579 "parse.cc"
    break;

  case 441: /* value78: reserved_value  */
#line 3447 "parse.y"
                {
		  const auto field = constant_of(constant_index((yyvsp[0].number)));
                  (yyval.field_data) = new cbl_field_data_t(field->data);
                }
#line 19588 "parse.cc"
    break;

  case 442: /* value78: true_false  */
#line 3453 "parse.y"
                {
                  cbl_unimplemented("Boolean constant");
                  YYERROR;
                }
#line 19597 "parse.cc"
    break;

  case 443: /* data_descr1: level_name  */
#line 3460 "parse.y"
                {
                  assert((yyvsp[0].field) == current_field());
                  if( (yyvsp[0].field)->usage == FldIndex ) {
                    field_type_update((yyvsp[0].field), (yyvsp[0].field)->usage, (yylsp[0]), true);
                  }
                }
#line 19608 "parse.cc"
    break;

  case 444: /* data_descr1: level_name CONSTANT is_global as const_value  */
#line 3468 "parse.y"
                {
                  cbl_field_t& field = *(yyvsp[-4].field);
                  if( field.level != 1 ) {
                    error_msg((yylsp[-4]), "%s must be an 01-level data item", field.name);
                    YYERROR;
                  }

                  field.attr |= constant_e;
                  if( (yyvsp[-2].boolean) ) field.attr |= global_e;
                  field.type = FldLiteralN;
		  field.data = build_real (float128_type_node, (yyvsp[0].float128));
                  field.data.initial = string_of((yyvsp[0].float128));

                  if( !cdf_value(field.name, cdfval_t((yyvsp[0].float128))) ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", field.name);
                  }
                }
#line 19630 "parse.cc"
    break;

  case 445: /* data_descr1: level_name CONSTANT is_global as reserved_value  */
#line 3487 "parse.y"
                {
                  cbl_field_t& field = *(yyvsp[-4].field);
                  if( field.level != 1 ) {
                    error_msg((yylsp[-4]), "%s must be an 01-level data item", field.name);
                    YYERROR;
                  }
                  field.attr |= constant_e;
                  if( (yyvsp[-2].boolean) ) field.attr |= global_e;
                  field.type = FldLiteralA;
		  auto fig = constant_of(constant_index((yyvsp[0].number)));
                  field.data = fig->data;
                }
#line 19647 "parse.cc"
    break;

  case 446: /* data_descr1: level_name CONSTANT is_global as literalism  */
#line 3501 "parse.y"
                {
                  cbl_field_t& field = *(yyvsp[-4].field);
                  field.attr |= constant_e;
                  if( (yyvsp[-2].boolean) ) field.attr |= global_e;
                  field.type = FldLiteralA;
                  field.data.capacity = (yyvsp[0].literal).len;
                  field.data.initial  = (yyvsp[0].literal).data;
                  field.attr |= literal_attr((yyvsp[0].literal).prefix);
                  if( field.level != 1 ) {
                    error_msg((yylsp[0]), "%s must be an 01-level data item", field.name);
                    YYERROR;
                  }
                  if( !cdf_value(field.name, (yyvsp[0].literal).data) ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", field.name);
                  }
                  value_encoding_check((yylsp[0]), (yyvsp[-4].field));
                }
#line 19669 "parse.cc"
    break;

  case 447: /* data_descr1: level_name CONSTANT is_global FROM NAME  */
#line 3519 "parse.y"
                {
                  assert((yyvsp[-4].field) == current_field());
                  const cdfval_t *cdfval = cdf_value((yyvsp[0].string));
                  if( !cdfval ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", (yyvsp[0].string));
                    YYERROR;
                  }
                  cbl_field_t& field = *(yyvsp[-4].field);
                  field.attr |= ((yyvsp[-2].boolean) | constant_e);
                  field.data.capacity = cdfval->string ? strlen(cdfval->string)
                                                  : sizeof(field.data.value_of());
                  field.data.initial  = cdfval->string;
                  field.data = cdfval->number;
                  if( !cdf_value(field.name, *cdfval) ) {
                    error_msg((yylsp[-4]), "%s was defined by CDF", field.name);
                  }
                }
#line 19691 "parse.cc"
    break;

  case 448: /* data_descr1: "78" NAME VALUE is value78  */
#line 3538 "parse.y"
                {
                  if( ! (dialect_mf() || dialect_gnu()) ) {
                    dialect_error((yylsp[-4]), "level 78", "mf or gnu");
                    YYERROR;
                  }
                  struct cbl_field_t field = { 0, FldLiteralA, FldInvalid,
                                               constant_e, 0, 0, 78, nonarray,
                                               (yylsp[-3]).first_line, "", 0, {}, *(yyvsp[0].field_data), NULL };
                  if( !namcpy((yylsp[-3]), field.name, (yyvsp[-3].string)) ) YYERROR;
                  if( field.data.initial ) {
                    field.attr |= quoted_e;
                    if( !cdf_value(field.name, field.data.initial) ) {
                      yywarn("%s was defined by CDF", field.name);
                    }
                  } else {
                    field.type = FldLiteralN;
                    field.data.initial = string_of(field.data.value_of());
                    if( !cdf_value(field.name, field.as_integer()) ) {
                      yywarn("%s was defined by CDF", field.name);
                    }
                  }
                  if( ((yyval.field) = field_add((yylsp[-3]), &field)) == NULL ) {
                    error_msg((yylsp[-3]), "failed level 78");
                    YYERROR;
                  }
                }
#line 19722 "parse.cc"
    break;

  case 449: /* data_descr1: "88" NAME NULLPTR  */
#line 3566 "parse.y"
                {
                  struct cbl_field_t field = { 0,
                    FldClass, FldInvalid, 0, 0, 0, 88, nonarray, (yylsp[-1]).first_line, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[-1]), field.name, (yyvsp[-1].string)) ) YYERROR;

                  auto fig = constant_of(constant_index(NULLS))->data.initial;
                  struct cbl_domain_t *domain = new cbl_domain_t[2];

                  domain[0] = cbl_domain_t((yylsp[-1]), false, strlen(fig), fig);

                  field.data.domain_as(domain);

                  if( ((yyval.field) = field_add((yylsp[-1]), &field)) == NULL ) {
                    error_msg((yylsp[-1]), "failed level 88");
                    YYERROR;
                  }
                  auto parent = cbl_field_of(symbol_at((yyval.field)->parent));
                  if( parent->type != FldPointer ) {
                    error_msg((yylsp[-1]), "LEVEL 88 %s VALUE NULLS invalid for "
                             "%s %s, which is not a POINTER",
			    (yyval.field)->name, parent->level_str(), parent->name);
                  }
                }
#line 19752 "parse.cc"
    break;

  case 450: /* data_descr1: "88" NAME VALUE domains  */
#line 3592 "parse.y"
                {
                  struct cbl_field_t field = { 0,
                    FldClass, FldInvalid, 0, 0, 0, 88, nonarray, (yylsp[-2]).first_line, "",
                    0, cbl_field_t::linkage_t(),
		    {}, NULL };
                  if( !namcpy((yylsp[-2]), field.name, (yyvsp[-2].string)) ) YYERROR;

                  struct cbl_domain_t *domain =
                    new cbl_domain_t[ domains.size() + 1];

                  std::copy(domains.begin(), domains.end(), domain);

                  field.data.domain_as(domain);
                  field.data.false_value_as((yyvsp[0].false_domain));
                  domains.clear();

                  if( ((yyval.field) = field_add((yylsp[-2]), &field)) == NULL ) {
                    error_msg((yylsp[-2]), "failed level 88");
                    YYERROR;
                  }
                }
#line 19778 "parse.cc"
    break;

  case 451: /* data_descr1: name66 RENAMES name  */
#line 3615 "parse.y"
                {
		  symbol_field_alias_end();
                  if( is_literal((yyvsp[0].field)) ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s'", name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  if( !immediately_follows((yyvsp[0].field)) ) {
                    error_msg((yylsp[0]), "%s must immediately follow %s to RENAME it",
                             (yyvsp[-2].string), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  if( (yyvsp[0].field)->occurs.ntimes() ) {
                    error_msg((yylsp[0]), "cannot RENAME table %s %s",
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  auto table = occurs_in((yyvsp[0].field));
                  if( table ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s' OF %s",
                             name_of((yyvsp[0].field)), table->name);
                    YYERROR;
                  }
                  if( ! (yyvsp[0].field)->rename_level_ok() ) {
                    error_msg((yylsp[0]), "cannot RENAME %s %s",
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  symbol_elem_t *orig = symbol_at(field_index((yyvsp[0].field)));
                  (yyval.field) = cbl_field_of(symbol_field_alias(orig, (yyvsp[-2].string)));
		  symbol_field_location(field_index((yyval.field)), (yylsp[-2]));
                }
#line 19814 "parse.cc"
    break;

  case 452: /* data_descr1: name66 RENAMES name THRU name  */
#line 3648 "parse.y"
                {
		  symbol_field_alias_end();
                  if( !immediately_follows((yyvsp[-2].field)) ) {
                    error_msg((yylsp[-2]), "RENAMES: %s must immediately follow %s",
                             (yyvsp[-4].string), name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  if( is_literal((yyvsp[-2].field)) ) {
                    error_msg((yylsp[-2]), "cannot RENAME '%s'", name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  if( is_literal((yyvsp[0].field)) ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s'", name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  auto table = occurs_in((yyvsp[-2].field));
                  if( table ) {
                    error_msg((yylsp[-2]), "cannot RENAME '%s' OF %s",
                             name_of((yyvsp[-2].field)), table->name);
                    YYERROR;
                  }
                  table = occurs_in((yyvsp[0].field));
                  if( table ) {
                    error_msg((yylsp[0]), "cannot RENAME '%s' OF %s",
                             name_of((yyvsp[0].field)), table->name);
                    YYERROR;
                  }
                  if( ! (yyvsp[-2].field)->rename_level_ok() ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  if( (yyvsp[-2].field)->has_subordinate((yyvsp[0].field)) ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s THRU %s %s "
                             "because %s is subordinate to %s",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)),
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)),
                             name_of((yyvsp[0].field)), name_of((yyvsp[-2].field)));
                    YYERROR;
                  }
                  auto not_ok = rename_not_ok((yyvsp[-2].field), (yyvsp[0].field));
                  if( not_ok ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s THRU %s %s "
                             "because %s %s cannot be renamed",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)),
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)),
			      not_ok->level_str(), name_of(not_ok));
                    YYERROR;
                  }
                  if( field_index((yyvsp[0].field)) <= field_index((yyvsp[-2].field)) ) {
                    error_msg((yylsp[-2]), "cannot RENAME %s %s THRU %s %s "
                             "because they are in the wrong order",
			      (yyvsp[-2].field)->level_str(), name_of((yyvsp[-2].field)),
			      (yyvsp[0].field)->level_str(), name_of((yyvsp[0].field)));
                    YYERROR;
                  }
                  symbol_elem_t *orig = symbol_at(field_index((yyvsp[-2].field)));
                  symbol_elem_t *last = symbol_at(field_index((yyvsp[0].field)));
                  (yyval.field) = cbl_field_of(symbol_field_alias2(orig, last, (yyvsp[-4].string)));
		  symbol_field_location(field_index((yyval.field)), (yylsp[-4]));
                }
#line 19880 "parse.cc"
    break;

  case 453: /* data_descr1: level_name data_clauses  */
#line 3711 "parse.y"
                {
                  gcc_assert((yyvsp[-1].field) == current_field());
                  if( (yyvsp[0].number) == value_clause_e ) { // only VALUE, no PIC
                    // Error unless VALUE is a figurative constant or (quoted) string.
                    if( (yyvsp[-1].field)->type != FldPointer &&
                        ! (yyvsp[-1].field)->has_attr(quoted_e) &&
                        normal_value_e == cbl_figconst_of((yyvsp[-1].field)->data.initial) )
                    {
                      error_msg((yylsp[-1]), "%s numeric VALUE %s requires PICTURE",
                               (yyvsp[-1].field)->name, (yyvsp[-1].field)->data.initial);
                    }
                    if( null_value_e == cbl_figconst_of((yyvsp[-1].field)->data.initial) ) {
                      // don't change the type
                      assert(FldPointer == (yyvsp[-1].field)->type);
                    } else {
                      // alphanumeric VALUE by itself implies alphanumeric type
                      assert(FldPointer != (yyvsp[-1].field)->type);
                      (yyvsp[-1].field)->type = FldAlphanumeric;
                      if( (yyvsp[-1].field)->data.initial ) {
                        (yyvsp[-1].field)->data.capacity = strlen((yyvsp[-1].field)->data.initial);
                      }
                    }
                  }

                  // Verify BLANK WHEN ZERO
                  if( (yyvsp[-1].field)->has_attr(blank_zero_e) ) {
                    switch((yyvsp[-1].field)->type) {
                    case FldNumericEdited:
                      if( (yyvsp[-1].field)->has_attr(signable_e) ) {
                        error_msg((yylsp[0]),  "%s has 'S' in PICTURE, cannot be BLANK WHEN ZERO",
                                  (yyvsp[-1].field)->name );
                      }
                      break;
                    default:
                      error_msg((yylsp[0]),  "%s must be "
                                "NUMERIC DISPLAY or NUMERIC-EDITED, not %s",
                                (yyvsp[-1].field)->name, cbl_field_type_str((yyvsp[-1].field)->type) );
                    }
                    (yyvsp[-1].field)->data.picture = original_picture();
                  }

                  // SIGN clause valid only with "S" in picture
                  if( (yyvsp[-1].field)->type == FldNumericDisplay && !is_signable((yyvsp[-1].field)) ) {
                    static const uint64_t sign_attrs = leading_e | separate_e;
                    static_assert(sizeof(sign_attrs) == sizeof((yyvsp[-1].field)->attr),
                                  "size matters");

                    // remove inapplicable inherited sign attributes
                    uint64_t group_sign = group_attr((yyvsp[-1].field)) & sign_attrs;
                    (yyvsp[-1].field)->attr &= ~group_sign;

                    if( (yyvsp[-1].field)->attr & sign_attrs ) {
                      dbgmsg("%s:%d: %s", __func__, __LINE__, field_str((yyvsp[-1].field)));
                      error_msg((yylsp[-1]), "%s must be signed for SIGN IS",
                                (yyvsp[-1].field)->name );
                      YYERROR;
                    }
                  }

                  // Increase numeric display capacity by 1 for SIGN SEPARATE.
                  if( (yyvsp[-1].field)->type == FldNumericDisplay &&
                      is_signable((yyvsp[-1].field)) &&
                      (yyvsp[-1].field)->has_attr(separate_e) ){
                    (yyvsp[-1].field)->data.capacity++;
                  }

                  // Set Packed-Decimal capacity
                  if( (yyvsp[-1].field)->type == FldPacked ) {
                    (yyvsp[-1].field)->data.capacity = type_capacity((yyvsp[-1].field)->type,
                                                          (yyvsp[-1].field)->data.digits);
                  if( (yyvsp[-1].field)->attr & separate_e )
                    {
                    // This is a gentle kludge required by the the belated
                    // introduction of COMP-6, which is like COMP-3 but with no
                    // sign nybble.  The code in type_capacity assumes a sign
                    // nybble.
                    (yyvsp[-1].field)->data.capacity = ((yyvsp[-1].field)->data.digits+1)/2;
                    }
                  }

                  // Check COMP-5 capacity
		  // No capacity means no PICTURE, valid only for a (potential) group
                  if( (yyvsp[-1].field)->type == FldNumericBin5 && (yyvsp[-1].field)->data.capacity == 0 ) {
                    if(  has_clause ((yyvsp[0].number), usage_clause_e) &&
                        !has_clause ((yyvsp[0].number), picture_clause_e) ) {
			// invalidate until a child is born
		      (yyvsp[-1].field)->type = FldInvalid;
                    }
                  }

                  // Ensure signed initial VALUE is for signed numeric type
                  if( is_numeric((yyvsp[-1].field)) &&
		      (yyvsp[-1].field)->data.initial &&
		      (yyvsp[-1].field)->type != FldFloat )
		  {
                    switch( (yyvsp[-1].field)->data.initial[0] ) {
                    case '-':
                      if( !(yyvsp[-1].field)->has_attr(signable_e) ) {
                        error_msg((yylsp[-1]), "%s is unsigned but has signed VALUE '%s'",
                                 (yyvsp[-1].field)->name, (yyvsp[-1].field)->data.initial);
                      }
                    }
                  }

                  // Verify VALUE
                  (yyvsp[-1].field)->report_invalid_initial_value((yylsp[0]));

                  // verify REDEFINES
                  const auto parent = parent_of((yyvsp[-1].field));
                  if( parent && (yyvsp[-1].field)->level == parent->level ) {
                    valid_redefine((yylsp[-1]), (yyvsp[-1].field), parent); // calls yyerror
                  }
                }
#line 19998 "parse.cc"
    break;

  case 454: /* literalism: LITERAL  */
#line 3826 "parse.y"
                        { (yyval.literal) = (yyvsp[0].literal); }
#line 20004 "parse.cc"
    break;

  case 455: /* literalism: literalism '&' LITERAL  */
#line 3828 "parse.y"
                {
                  (yyval.literal) = (yyvsp[-2].literal);
                  literal_t& output((yyval.literal));

                  output.len += (yyvsp[0].literal).len;
                  output.data = reinterpret_cast<char*>(xrealloc(output.data,
                                                                 output.len + 1));
                  memcpy( output.data + (yyvsp[-2].literal).len, (yyvsp[0].literal).data, (yyvsp[0].literal).len );
                  output.data[output.len] = '\0';

                  if( (yyvsp[0].literal).prefix[0] ) { strcpy(output.prefix, (yyvsp[0].literal).prefix); }
                  if( ! (yyvsp[-2].literal).compatible_prefix((yyvsp[0].literal)) ) {
                    yywarn("dissimilar literals, '%s' prevails",
                          output.prefix);
                  }
                }
#line 20025 "parse.cc"
    break;

  case 456: /* name66: "66" NAME  */
#line 3847 "parse.y"
                {
                  build_symbol_map();
		  if( ! symbol_field_alias_begin() ) {
		     error_msg((yylsp[0]), "no Level 01 record exists "
		              "for %s to redefine", (yyvsp[0].string));
		  }
                  (yyval.string) = (yyvsp[0].string);
                }
#line 20038 "parse.cc"
    break;

  case 457: /* data_clauses: data_clause  */
#line 3858 "parse.y"
                {
                  if( (yyvsp[0].number) == redefines_clause_e ) {
                    auto parent = parent_of(current_field());
                    if( !parent ) {
                      error_msg((yylsp[0]), "%s invalid REDEFINES",
                               current_field()->name);
                      YYERROR;
                    }
                    if( parent->occurs.ntimes() > 0 ) {
                      error_msg((yylsp[0]), "%s cannot REDEFINE table %s",
                               current_field()->name,
                               parent->name);
                      YYERROR;
                    }
                  }
                }
#line 20059 "parse.cc"
    break;

  case 458: /* data_clauses: data_clauses data_clause  */
#line 3874 "parse.y"
                                         {
                  const char *clause = "data";
                  switch((yyvsp[0].number)) {
                  case occurs_clause_e:     clause = "OCCURS";    break;
                  case picture_clause_e:    clause = "PIC";       break;
                  case usage_clause_e:      clause = "USAGE";     break;
                  case value_clause_e:      clause = "VALUE";     break;
                  case global_clause_e:     clause = "GLOBAL";    break;
                  case external_clause_e:   clause = "EXTERNAL";  break;
                  case justified_clause_e:  clause = "JUSTIFIED"; break;
                  case redefines_clause_e:  clause = "REDEFINES"; break;
                  case blank_zero_clause_e: clause = "BLANK WHEN ZERO"; break;
                  case synched_clause_e:    clause = "SYNCHRONIZED"; break;
                  case sign_clause_e:       clause = "SIGN";      break;
                  case based_clause_e:      clause = "BASED";     break;
                  case same_clause_e:       clause = "SAME AS";   break;
                  case volatile_clause_e:   clause = "VOLATILE";  break;
                  case type_clause_e:       clause = "TYPE";      break;
                  case typedef_clause_e:    clause = "TYPEDEF";   break;
                  }
                  if( ((yyval.number) & (yyvsp[0].number)) == (yyvsp[0].number) ) {
                    error_msg((yylsp[0]), "%s clause repeated", clause);
                    YYERROR;
                  }

                  if( (yyvsp[0].number) == redefines_clause_e ) {
                    error_msg((yylsp[0]), "REDEFINES must appear "
                             "immediately after LEVEL and NAME");
                    YYERROR;
                  }
                  cbl_field_t *field = current_field();
                  const int globex = (global_e | external_e);
                  if( (((yyval.number) | (yyvsp[0].number)) & globex) == globex ) {
                    error_msg((yylsp[0]), "GLOBAL and EXTERNAL specified");
                    YYERROR;
                  }

                  (yyval.number) |= (yyvsp[0].number);

                  // If any implied TYPE bits are on in addition to
                  // type_clause_e, they're in conflict.
                  static const uint64_t type_implies =
                    // ALIGNED clause not implemented
                    blank_zero_clause_e | justified_clause_e | picture_clause_e
                    | sign_clause_e | synched_clause_e | usage_clause_e;

                  if( type_clause_e < ((yyval.number) & (type_clause_e | type_implies)) ) {
                    if( (yyvsp[0].number) == type_clause_e ) {
                      error_msg((yylsp[0]), "TYPE TO incompatible with ALIGNED, "
                              "BLANK WHEN ZERO, JUSTIFIED, PICTURE, SIGN, "
                              "SYNCHRONIZED, and USAGE");
                    } else {
                      error_msg((yylsp[0]), "%s incompatible with TYPE TO", clause);
                    }
                    YYERROR;
                  }

                  if( ((yyval.number) & same_clause_e) == same_clause_e ) {
                    if( 0 < ((yyval.number) & ~same_clause_e) ) {
                      error_msg((yylsp[0]), "%s %s SAME AS "
			      "precludes other DATA DIVISION clauses",
			      field->level_str(), field->name);
                      YYERROR;
                    }
                  }

                  if( is_numeric(field->type) && field->type != FldNumericDisplay ) {
                    if( (yyval.number) & sign_clause_e ) {
                      error_msg((yylsp[0]), "%s is binary NUMERIC type, "
                               "incompatible with SIGN IS", field->name);
                    }
                  }

                  if( gcobol_feature_embiggen() ) {
                    if( field->is_binary_integer() && field->data.capacity == 4) {
                      auto redefined = symbol_redefines(field);
                      if( redefined && redefined->type == FldPointer ) {
                        if( yydebug ) {
                          yywarn("expanding %s size from %u bytes to %wd "
				 "because it redefines %s with %<USAGE POINTER%>",
                                field->name, field->size(),
                                int_size_in_bytes(ptr_type_node),
                                redefined->name);
                        }
                        field->embiggen();
                      }
                    }
                  }

                  switch( field->type ) {
                  case FldFloat:
                    if( ((yyval.number) & picture_clause_e) == picture_clause_e ) {
		      error_msg((yylsp[0]), "%s: FLOAT types do not allow PICTURE",
			       field->name);
                    }
                    break;
                  default:
                    break;
                  }

		  if( ! field->is_justifiable() ) {
		    error_msg((yylsp[0]), "%s: %s is incompatible with JUSTIFIED",
			     field->name, 3 + cbl_field_type_str(field->type));
		  }
                }
#line 20169 "parse.cc"
    break;

  case 459: /* data_clause: any_length  */
#line 3981 "parse.y"
                                  { (yyval.number) = any_length_e; }
#line 20175 "parse.cc"
    break;

  case 460: /* data_clause: based_clause  */
#line 3982 "parse.y"
                                  { (yyval.number) = based_clause_e; }
#line 20181 "parse.cc"
    break;

  case 461: /* data_clause: blank_zero_clause  */
#line 3983 "parse.y"
                                  { (yyval.number) = blank_zero_clause_e; }
#line 20187 "parse.cc"
    break;

  case 462: /* data_clause: external_clause  */
#line 3984 "parse.y"
                                  { (yyval.number) = external_clause_e; }
#line 20193 "parse.cc"
    break;

  case 463: /* data_clause: global_clause  */
#line 3985 "parse.y"
                                  { (yyval.number) = global_clause_e; }
#line 20199 "parse.cc"
    break;

  case 464: /* data_clause: justified_clause  */
#line 3986 "parse.y"
                                  { (yyval.number) = justified_clause_e; }
#line 20205 "parse.cc"
    break;

  case 465: /* data_clause: occurs_clause  */
#line 3987 "parse.y"
                                  { (yyval.number) = occurs_clause_e;
                  cbl_field_t *field = current_field();
                  switch( field->level ) {
                  case 1:
		    if( dialect_mf() ) break;
		    __attribute__((fallthrough));
                  case 77:
                  case 88:
		    error_msg((yyloc), "%s %s: invalid LEVEL for OCCURS",
			      field->level_str(), field->name );
                    break;
                  default:
                    assert( field->parent > 0 );
                  }
                }
#line 20225 "parse.cc"
    break;

  case 466: /* data_clause: picture_clause  */
#line 4002 "parse.y"
                                  { (yyval.number) = picture_clause_e; }
#line 20231 "parse.cc"
    break;

  case 467: /* data_clause: redefines_clause  */
#line 4003 "parse.y"
                                  { (yyval.number) = redefines_clause_e; }
#line 20237 "parse.cc"
    break;

  case 468: /* data_clause: same_clause  */
#line 4004 "parse.y"
                                  { (yyval.number) = same_clause_e; }
#line 20243 "parse.cc"
    break;

  case 469: /* data_clause: sign_clause  */
#line 4005 "parse.y"
                                  { (yyval.number) = sign_clause_e; }
#line 20249 "parse.cc"
    break;

  case 470: /* data_clause: synched_clause  */
#line 4006 "parse.y"
                                  { (yyval.number) = synched_clause_e; }
#line 20255 "parse.cc"
    break;

  case 471: /* data_clause: type_clause  */
#line 4007 "parse.y"
                                  { (yyval.number) = type_clause_e; }
#line 20261 "parse.cc"
    break;

  case 472: /* data_clause: typedef_clause  */
#line 4008 "parse.y"
                                  { (yyval.number) = typedef_clause_e; }
#line 20267 "parse.cc"
    break;

  case 473: /* data_clause: usage_clause  */
#line 4009 "parse.y"
                                  { (yyval.number) = usage_clause_e; }
#line 20273 "parse.cc"
    break;

  case 474: /* data_clause: value_clause  */
#line 4010 "parse.y"
                                  { (yyval.number) = value_clause_e;
                  cbl_field_t *field = current_field();

                  if( field->type != FldAlphanumeric &&
                      field->data.initial && field->data.initial[0] )
                  {
                    // Embedded NULs are valid only in FldAlphanumeric, and are
                    // already handled.
                    if( strlen(field->data.initial) < field->data.capacity ) {
                      auto p = blank_pad_initial( field->data.initial,
                                                  strlen(field->data.initial),
                                                  field->data.capacity );
                      if( !p ) YYERROR;
                      field->data.initial = p;
                    }
                  }
		  const cbl_field_t *parent;
		  if( (parent = parent_has_value(field)) != NULL ) {
		    error_msg((yylsp[0]), "VALUE invalid because group %s has VALUE clause",
		              parent->name);
		  }
                }
#line 20300 "parse.cc"
    break;

  case 475: /* data_clause: volatile_clause  */
#line 4032 "parse.y"
                                     { (yyval.number) = volatile_clause_e; }
#line 20306 "parse.cc"
    break;

  case 476: /* picture_clause: PIC signed nps nines nps  */
#line 4036 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( !field_type_update(field, FldNumericDisplay, (yyloc)) ) {
                    YYERROR;
                  }
                  ERROR_IF_CAPACITY((yylsp[-4]), field);
                  field->attr |= (yyvsp[-3].number);
                  field->data.capacity = type_capacity(field->type, (yyvsp[-1].number));
                  field->data.digits = (yyvsp[-1].number);
                  if( long(field->data.digits) != (yyvsp[-1].number) ) {
                    error_msg((yylsp[-3]), "indicated size would be %d bytes, "
                             "maximum data item size is %u",
                             (yyvsp[-1].number), UINT32_MAX);
                  }

                  if( (yyvsp[-2].number) && (yyvsp[0].number) ) { // leading and trailing P's
                    error_msg((yylsp[-3]), "PIC cannot have both leading and trailing P");
                    YYERROR;
                  }
                  if( (yyvsp[-2].number) || (yyvsp[0].number) ) {
                    field->attr |= scaled_e;
                    field->data.rdigits = (yyvsp[-2].number)? (yyvsp[-2].number) : -(yyvsp[0].number);
                  }
                  if( ! field->reasonable_capacity() ) {
                    error_msg((yylsp[-3]), "%s limited to capacity of %d (would need %u)",
			     field->name, MAX_FIXED_POINT_DIGITS, field->data.capacity);
                  }
                }
#line 20339 "parse.cc"
    break;

  case 477: /* picture_clause: PIC signed NINEV nine  */
#line 4066 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->data.digits = (yyvsp[-1].number) + (yyvsp[0].number);

                  if( field->is_binary_integer() ) {
                    field->data.capacity = type_capacity(field->type,
                                                         field->data.digits);
                  } else {
                    if( !field_type_update(field, FldNumericDisplay, (yyloc)) ) {
                      YYERROR;
                    }
                    ERROR_IF_CAPACITY((yylsp[-3]), field);
                    field->attr |= (yyvsp[-2].number);
                    field->data.capacity = field->data.digits;
                    field->data.rdigits = (yyvsp[0].number);
                  }
                  if( ! field->reasonable_capacity() ) {
                    error_msg((yylsp[-2]), "%s limited to capacity of %d (would need %u)",
			     field->name, MAX_FIXED_POINT_DIGITS, field->data.capacity);
                  }
                }
#line 20365 "parse.cc"
    break;

  case 478: /* picture_clause: PIC signed NINEDOT nine  */
#line 4088 "parse.y"
                {
                  uint32_t size = (yyvsp[-1].number) + (yyvsp[0].number);

                  cbl_field_t *field = current_field();
                  if( !field_type_update(field, FldNumericEdited, (yyloc)) ) {
                    YYERROR;
                  }
                  ERROR_IF_CAPACITY((yylsp[-3]), field);
                  field->attr |= (yyvsp[-2].number);
                  field->data.digits = size;
                  field->data.capacity = ++size;
                  field->data.rdigits = (yyvsp[0].number);

                  if( ! field->reasonable_capacity() ) {
                    error_msg((yylsp[-2]), "%s limited to capacity of %d (would need %u)",
			     field->name, MAX_FIXED_POINT_DIGITS, field->data.capacity);
                  }
                }
#line 20388 "parse.cc"
    break;

  case 479: /* picture_clause: PIC alphanum_pic  */
#line 4108 "parse.y"
                {
                  cbl_field_t *field = current_field();

		  if( field->type == FldNumericBin5 &&
		      field->data.capacity == 0xFF  &&
		      (dialect_gnu() || dialect_mf()) )
		  { // PIC X COMP-X or COMP-9
		    if( ! field->has_attr(all_x_e) ) {
		      error_msg((yylsp[0]), "COMP PICTURE requires all X%'s or all 9%'s");
                      YYERROR;
		    }
		  } else {
                    if( !field_type_update(field, FldAlphanumeric, (yyloc)) ) {
		      dbgmsg("alnum_pic: %s", field_str(field));
                      YYERROR;
                    }
		  }
                  assert(0 < (yyvsp[0].number));
                  if( field->data.initial != NULL ) {
                    if( 0 < field->data.capacity &&
                            field->data.capacity < uint32_t((yyvsp[0].number)) ) {
                      auto p = blank_pad_initial( field->data.initial,
                                                  field->data.capacity, (yyvsp[0].number) );
                      if( !p ) YYERROR;
                      field->data.initial = p;
                    }
                  }

                  field->data.capacity = (yyvsp[0].number);
                  field->data.picture = NULL;

                  if( false ) dbgmsg("PIC alphanum_pic[size]:%d: %s",
                                      field->line, field_str(field));
                }
#line 20427 "parse.cc"
    break;

  case 480: /* picture_clause: PIC numed  */
#line 4144 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( !field_type_update(field, FldNumericEdited, (yyloc)) ) {
                    YYERROR;
                  }
                  ERROR_IF_CAPACITY((yylsp[-1]), field);
                  if( !is_numeric_edited((yyvsp[0].string)) ) {
                    error_msg((yylsp[0]), "%s", numed_message);
                    YYERROR;
                  }
                  field->data.picture = (yyvsp[0].string);
                  field->data.capacity =  length_of_picture((yyvsp[0].string));
                  field->data.digits   =  digits_of_picture((yyvsp[0].string), false);
                  field->data.rdigits  = rdigits_of_picture((yyvsp[0].string));
                  if( is_picture_scaled((yyvsp[0].string)) ) field->attr |= scaled_e;
                }
#line 20448 "parse.cc"
    break;

  case 481: /* picture_clause: PIC ALPHED  */
#line 4162 "parse.y"
                {
                  bool is_alpha_edited( const char picture[] );

                  cbl_field_t *field = current_field();
                  ERROR_IF_CAPACITY((yylsp[-1]), field);
                  field->data.capacity = length_of_picture((yyvsp[0].string));
                  field->data.picture = (yyvsp[0].string);

                  // In case the lexer guesses wrong.
                  cbl_field_type_t type = is_numeric_edited((yyvsp[0].string))?
                                          FldNumericEdited : FldAlphaEdited;
                  if( !field_type_update(field, type, (yyloc)) ) {
                    YYERROR;
                  }

                  switch( type ) {
                  case FldNumericEdited:
                    field->data.digits   =  digits_of_picture((yyvsp[0].string), false);
                    field->data.rdigits  = rdigits_of_picture((yyvsp[0].string));
                    if( is_picture_scaled((yyvsp[0].string)) ) field->attr |= scaled_e;
                    break;
                  case FldAlphaEdited:
                    if( !is_alpha_edited(field->data.picture) ) {
                      error_msg((yylsp[0]), "invalid picture for Alphanumeric-edited");
                      YYERROR;
                    }
                    break;
                  default:
                    gcc_unreachable();
                  }
                }
#line 20484 "parse.cc"
    break;

  case 483: /* ones: ONES  */
#line 4196 "parse.y"
                {
		  cbl_unimplemented("Boolean type not implemented");
		}
#line 20492 "parse.cc"
    break;

  case 484: /* alphanum_pic: alphanum_part  */
#line 4201 "parse.y"
                              {
                  current_field()->set_attr((yyvsp[0].pic_part).attr);
                  (yyval.number) = (yyvsp[0].pic_part).nbyte;
                }
#line 20501 "parse.cc"
    break;

  case 485: /* alphanum_pic: alphanum_pic alphanum_part  */
#line 4206 "parse.y"
                {
		  auto field = current_field();
		  dbgmsg("%s has %s against %s",
			 field->name, field_attr_str(field),
			 cbl_field_attr_str((yyvsp[0].pic_part).attr));

		  if( ! field->has_attr((yyvsp[0].pic_part).attr) ) {
                    field->clear_attr(all_ax_e); // clears 2 bits
                  }
                  (yyval.number) += (yyvsp[0].pic_part).nbyte;

		  dbgmsg("%s attrs: %s", field->name, field_attr_str(field));
                }
#line 20519 "parse.cc"
    break;

  case 486: /* alphanum_part: ALNUM count  */
#line 4221 "parse.y"
                {
                  (yyval.pic_part).attr = uniform_picture((yyvsp[-1].string));
                  (yyval.pic_part).nbyte = strlen((yyvsp[-1].string));
		  auto count((yyvsp[0].number));
                  if( count > 0 ) {
                    --count;
                    (yyval.pic_part).nbyte += count; // AX9(3) has count 5
                  }
		  if( count < 0 ) {
		    error_msg((yylsp[0]), "PICTURE count %<(%d)%> is negative", count );
		    YYERROR;
		  }
                }
#line 20537 "parse.cc"
    break;

  case 487: /* signed: %empty  */
#line 4236 "parse.y"
                                 { (yyval.number) = 0; }
#line 20543 "parse.cc"
    break;

  case 488: /* signed: 'S'  */
#line 4237 "parse.y"
                                 { (yyval.number) = signable_e; }
#line 20549 "parse.cc"
    break;

  case 489: /* nps: %empty  */
#line 4240 "parse.y"
                                 { (yyval.number) = 0; }
#line 20555 "parse.cc"
    break;

  case 490: /* nps: PIC_P  */
#line 4241 "parse.y"
                                 { (yyval.number) = (yyvsp[0].number); }
#line 20561 "parse.cc"
    break;

  case 491: /* nine: %empty  */
#line 4244 "parse.y"
                                 { (yyval.number) = 0; }
#line 20567 "parse.cc"
    break;

  case 492: /* nine: nines  */
#line 4246 "parse.y"
                {
                  (yyval.number) = (yyvsp[0].number);
		  if( (yyval.number) == 0 ) {
		    error_msg((yylsp[0]), "%<(0)%> invalid in PICTURE (ISO 2023 13.18.40.3)");
		  }
                }
#line 20578 "parse.cc"
    break;

  case 494: /* nines: nines NINES  */
#line 4254 "parse.y"
                            { (yyval.number) = (yyvsp[-1].number) + (yyvsp[0].number); }
#line 20584 "parse.cc"
    break;

  case 495: /* count: %empty  */
#line 4257 "parse.y"
                                 { (yyval.number) = 0; }
#line 20590 "parse.cc"
    break;

  case 496: /* count: '(' "numeric literal" ')'  */
#line 4259 "parse.y"
                {
                  REAL_VALUE_TYPE rn = numstr2i((yyvsp[-1].numstr).string, (yyvsp[-1].numstr).radix);
                  (yyval.number) = real_to_integer (&rn);
		  if( (yyval.number) == 0 ) {
		    error_msg((yylsp[-1]), "%<0%> invalid in PICTURE (ISO 2023 13.18.40.3)");
		  }
                }
#line 20602 "parse.cc"
    break;

  case 497: /* count: '(' NAME ')'  */
#line 4267 "parse.y"
                {
		  auto value = cdf_value((yyvsp[-1].string));
		  if( ! (value && value->is_numeric()) ) {
		    error_msg((yylsp[-1]), "PICTURE %qs requires a CONSTANT value", (yyvsp[-1].string) );
		    YYERROR;
		  }
		  int nmsg = 0;
		  auto e = symbol_field(PROGRAM, 0, (yyvsp[-1].string));
		  if( e ) { // verify not floating point with nonzero fraction
		    auto field = cbl_field_of(e);
		    assert(is_literal(field));
		    REAL_VALUE_TYPE vi;
		    real_from_integer (&vi, VOIDmode, field->as_integer(), SIGNED);
		    if( !real_identical (TREE_REAL_CST_PTR (field->data.value_of()),
				         &vi) ) {
		      nmsg++;
		      error_msg((yylsp[-1]), "invalid PICTURE count %<(%s)%>",
				field->data.initial );
		    }
		  }
		  (yyval.number) = value->as_number();
		  if( (yyval.number) <= 0 && !nmsg) {
		    error_msg((yylsp[-1]), "invalid PICTURE count %<(%s)%>", (yyvsp[-1].string) );
		  }
                }
#line 20632 "parse.cc"
    break;

  case 501: /* usage_clause: usage_clause1  */
#line 4300 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  cbl_field_type_t type = static_cast<cbl_field_type_t>((yyvsp[0].number));
                  if( ! field_type_update(field, type, (yyloc), true) ) {
                    YYERROR;
                  }
                }
#line 20644 "parse.cc"
    break;

  case 502: /* usage_clause1: usage BIT  */
#line 4309 "parse.y"
                {
		  cbl_unimplemented("Boolean type not implemented");
		}
#line 20652 "parse.cc"
    break;

  case 503: /* usage_clause1: usage BINARY_INTEGER is_signed  */
#line 4313 "parse.y"
                {
		  // action for BINARY_INTEGER is repeated for COMPUTATIONAL, below. 
		  // If it changes, consolidate in a function. 
                  bool infer = true;
                  cbl_field_t *field = current_field();

		  if( ! (yyvsp[0].boolean) ) {
		    (yyvsp[-1].computational).signable = false;
		  }

                  // Some binary types have defined capacity;
                  switch((yyvsp[-1].computational).type) {
                  // COMPUTATIONAL and COMP-5 rely on PICTURE.
                  case FldNumericBinary:
                    field->attr |= big_endian_e;
                    __attribute__((fallthrough));
                  case FldNumericBin5:
		    // If no capacity yet, then no picture, infer $comp.capacity.
		    // If field has capacity, ensure USAGE is compatible.
		    if( field->data.capacity > 0 ) { // PICTURE before USAGE
		      infer = false;
		      switch( field->type ) {
		      case FldAlphanumeric:   // PIC X COMP-5 or COMP-X
			assert( field->data.digits == 0 );
			assert( field->data.rdigits == 0 );
		        if( (dialect_mf() || dialect_gnu()) ) {
                          field->type = (yyvsp[-1].computational).type;
			  field->clear_attr(signable_e);
		        } else {
			  error_msg((yylsp[-1]), "numeric USAGE invalid "
				           "with Alpnanumeric PICTURE");
			  dialect_error((yylsp[-2]), "Alpnanumeric COMP-5 or COMP-X", "mf or gnu");
			  YYERROR;
		        }
                        break;
		      case FldNumericDisplay: // PIC 9 COMP-5 or COMP-X
		        if( (yyvsp[-1].computational).capacity == 0xFF ) { // comp-x is a bit like comp-5
			  assert( field->data.digits == field->data.capacity );
		          if( ! (dialect_mf() || dialect_gnu()) ) {
				  dialect_error((yylsp[-2]), "COMP-X", "mf or gnu");
		          }
			}
                        field->type = (yyvsp[-1].computational).type;
                        field->data.capacity = type_capacity(field->type,
                                                             field->data.digits);
		        break;
		      default: break;
                      }
		    }
                    break;
		  case FldPacked: // comp-6 is unsigned comp-3
		    assert(! (yyvsp[-1].computational).signable);  // else PACKED_DECIMAL from scanner
		    field->attr |= separate_e;
		    if( ! dialect_mf() ) {
		      dialect_error((yylsp[-2]), "COMP-6", "mf");
		    }
                    if( field->type == FldNumericDisplay ) {// PICTURE before USAGE
                      infer = false;
                      assert(field->data.capacity > 0);
                      field->type = (yyvsp[-1].computational).type;
                      field->data.capacity = type_capacity(field->type,
                                                           field->data.digits);
                    }
		    break;
                  default:
                    break;
                  }

                  if( infer ) {
                    if( (yyvsp[-1].computational).capacity > 0 ) {
                      if( field->data.capacity > 0 ) {
                        error_msg((yylsp[-1]), "%s is BINARY type, incompatible with PICTURE",
                               field->name);
                        YYERROR;
                      }
                      field->data.capacity = (yyvsp[-1].computational).capacity;
                      field->type = (yyvsp[-1].computational).type;
                      if( (yyvsp[-1].computational).signable ) {
                        field->attr = (field->attr | signable_e);
                      }
                    }
                  }
                  (yyval.number) = (yyvsp[-1].computational).type;
                }
#line 20741 "parse.cc"
    break;

  case 504: /* usage_clause1: usage COMPUTATIONAL native  */
#line 4398 "parse.y"
                { 
		  // logic below duplicates BINARY_INTEGER, above.
		  // If it changes, consolidate in a function. 
                  bool infer = true;
                  cbl_field_t *field = current_field();

                  // Some binary types have defined capacity;
                  switch((yyvsp[-1].computational).type) {
                  // COMPUTATIONAL and COMP-5 rely on PICTURE.
                  case FldNumericBinary:
                    field->attr |= big_endian_e;
                    __attribute__((fallthrough));
                  case FldNumericBin5:
		    // If no capacity yet, then no picture, infer $comp.capacity.
		    // If field has capacity, ensure USAGE is compatible.
		    if( field->data.capacity > 0 ) { // PICTURE before USAGE
		      infer = false;
		      switch( field->type ) {
		      case FldAlphanumeric:   // PIC X COMP-5 or COMP-X
			assert( field->data.digits == 0 );
			assert( field->data.rdigits == 0 );
		        if( (dialect_mf() || dialect_gnu()) ) {
                          field->type = (yyvsp[-1].computational).type;
			  field->clear_attr(signable_e);
		        } else {
			  error_msg((yylsp[-1]), "numeric USAGE invalid "
				           "with Alpnanumeric PICTURE");
			  dialect_error((yylsp[-2]), "Alpnanumeric COMP-5 or COMP-X", "mf or gnu");
			  YYERROR;
		        }
                        break;
		      case FldNumericDisplay: // PIC 9 COMP-5 or COMP-X
		        if( (yyvsp[-1].computational).capacity == 0xFF ) { // comp-x is a bit like comp-5
			  assert( field->data.digits == field->data.capacity );
		          if( ! (dialect_mf() || dialect_gnu()) ) {
				  dialect_error((yylsp[-2]), "COMP-X", "mf or gnu");
		          }
			}
                        field->type = (yyvsp[-1].computational).type;
                        field->data.capacity = type_capacity(field->type,
                                                             field->data.digits);
		        break;
		      default: break;
                      }
		    }
                    break;
		  case FldPacked: // comp-6 is unsigned comp-3
		    assert(! (yyvsp[-1].computational).signable);  // else PACKED_DECIMAL from scanner
		    field->attr |= separate_e;
		    if( ! dialect_mf() ) {
		      dialect_error((yylsp[-2]), "COMP-6", "mf");
		    }
                    if( field->type == FldNumericDisplay ) {// PICTURE before USAGE
                      infer = false;
                      assert(field->data.capacity > 0);
                      field->type = (yyvsp[-1].computational).type;
                      field->data.capacity = type_capacity(field->type,
                                                           field->data.digits);
                    }
		    break;
                  default:
                    break;
                  }

                  if( infer ) {
                    if( (yyvsp[-1].computational).capacity > 0 ) {
                      if( field->data.capacity > 0 ) {
                        error_msg((yylsp[-1]), "%s is BINARY type, incompatible with PICTURE",
                               field->name);
                        YYERROR;
                      }
                      field->data.capacity = (yyvsp[-1].computational).capacity;
                      field->type = (yyvsp[-1].computational).type;
                      if( (yyvsp[-1].computational).signable ) {
                        field->attr = (field->attr | signable_e);
                      }
                    }
                  }
                  (yyval.number) = (yyvsp[-1].computational).type;
                }
#line 20826 "parse.cc"
    break;

  case 505: /* usage_clause1: usage DISPLAY native  */
#line 4478 "parse.y"
                                             { (yyval.number) = FldDisplay; }
#line 20832 "parse.cc"
    break;

  case 506: /* usage_clause1: usage PACKED_DECIMAL native  */
#line 4479 "parse.y"
                                             { (yyval.number) = FldPacked; }
#line 20838 "parse.cc"
    break;

  case 507: /* usage_clause1: usage PACKED_DECIMAL with NO SIGN  */
#line 4481 "parse.y"
                {
                  cbl_field_t *field = current_field();
		  if( field->data.capacity > 0 &&
		      field->type != FldNumericDisplay) {
		    error_msg((yylsp[-3]), "%s PICTURE is incompatible with USAGE PACKED DECIMAL",
			     field->name);
		    YYERROR;
		  }
		  field->clear_attr(separate_e);
		  field->clear_attr(signable_e);
                  if( field->type == FldNumericDisplay ) {// PICTURE before USAGE
                    assert(field->data.capacity > 0);
                    field->data.capacity = type_capacity(FldPacked,
                                                         field->data.digits);
                  }
		  (yyval.number) = field->type = FldPacked;
		}
#line 20860 "parse.cc"
    break;

  case 508: /* usage_clause1: usage INDEX  */
#line 4498 "parse.y"
                                             {
                  (yyval.number) = symbol_field_index_set( current_field() )->type;
                }
#line 20868 "parse.cc"
    break;

  case 509: /* usage_clause1: usage POINTER  */
#line 4503 "parse.y"
                {
                  (yyval.number) = FldPointer;
                  auto field = current_field();
                  auto redefined = symbol_redefines(field);

		  if( (yyvsp[0].field_attr) ) {
		    field->set_attr((yyvsp[0].field_attr));
		  }
                  if( gcobol_feature_embiggen() && redefined &&
                      is_numeric(redefined->type) && redefined->size() == 4) {
                    // For now, we allow POINTER to expand a 32-bit item to 64 bits.
                    field->data.capacity = int_size_in_bytes(ptr_type_node);
                    dbgmsg("%s: expanding #" HOST_SIZE_T_PRINT_UNSIGNED
                          " %s capacity %u => %u", __func__,
                          (fmt_size_t)field_index(redefined), redefined->name,
                          redefined->data.capacity, field->data.capacity);

                    redefined->embiggen();

                    if( redefined->data.initial ) {
                      auto s = xasprintf( "%s    ", redefined->data.initial);
                      std::replace(s, s + strlen(s), '!', char(0x20));
                      redefined->data.initial = s;
                    }
                  }
                }
#line 20899 "parse.cc"
    break;

  case 510: /* usage_clause1: usage POINTER TO error  */
#line 4530 "parse.y"
                {
                  cbl_unimplemented("POINTER TO");
                  (yyval.number) = FldPointer;
                }
#line 20908 "parse.cc"
    break;

  case 511: /* value_clause: VALUE all LITERAL  */
#line 4536 "parse.y"
                                       {
                  cbl_field_t *field = current_field();
                  field->data.initial  = (yyvsp[0].literal).data;
                  field->attr |= literal_attr((yyvsp[0].literal).prefix);
                  // The __gg__initialize_data routine needs to know that VALUE is a
                  // quoted literal. This is critical for NumericEdited variables
                  field->attr |= quoted_e;

                  if( field->data.capacity == 0 ) {
                    field->data.capacity = (yyvsp[0].literal).len;
                  } else {
                    if( (yyvsp[-1].boolean) ) {
                      field_value_all(field);
                    } else {
                      if( (yyvsp[0].literal).len < field->data.capacity ) {
                        auto p = blank_pad_initial( (yyvsp[0].literal).data, (yyvsp[0].literal).len,
                                                    field->data.capacity );
                        if( !p ) YYERROR;
                        field->data.initial = p;
                      }
                    }
                  }
                  value_encoding_check((yylsp[0]), field);
                }
#line 20937 "parse.cc"
    break;

  case 512: /* value_clause: VALUE all cce_expr  */
#line 4560 "parse.y"
                                          {
                  cbl_field_t *field = current_field();
                  auto orig_str = original_number();
		  REAL_VALUE_TYPE orig_val;
		  real_from_string3 (&orig_val, orig_str,
				     TYPE_MODE (float128_type_node));
                  char *initial = NULL;

                  if( real_identical (&orig_val, &(yyvsp[0].float128)) ) {
                    initial = orig_str;
                    pristine_values.insert(initial);
                  } else {
                    initial = string_of((yyvsp[0].float128));
                    gcc_assert(initial);
                  }

                  char decimal = symbol_decimal_point();
                  std::replace(initial, initial + strlen(initial), '.', decimal);

                  field->data.initial = initial;
                  field->data = build_real (float128_type_node, (yyvsp[0].float128));

                  if( (yyvsp[-1].boolean) ) field_value_all(field);
                }
#line 20966 "parse.cc"
    break;

  case 513: /* value_clause: VALUE all reserved_value  */
#line 4585 "parse.y"
                {
                  if( (yyvsp[0].number) != NULLS ) {
                    auto fig = constant_of(constant_index((yyvsp[0].number)));
                    current_field()->data.initial = fig->data.initial;
                  }
                }
#line 20977 "parse.cc"
    break;

  case 514: /* value_clause: NULLPTR  */
#line 4592 "parse.y"
                {
                    auto fig = constant_of(constant_index(NULLS));
                    current_field()->data.initial = fig->data.initial;
                }
#line 20986 "parse.cc"
    break;

  case 515: /* value_clause: VALUE error  */
#line 4597 "parse.y"
                {
                  error_msg((yylsp[0]), "no valid VALUE supplied");
                }
#line 20994 "parse.cc"
    break;

  case 516: /* global_clause: is GLOBAL  */
#line 4603 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->attr |= (field->attr | global_e);
                }
#line 21003 "parse.cc"
    break;

  case 517: /* external_clause: is EXTERNAL  */
#line 4609 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->attr |= (field->attr | external_e);
                }
#line 21012 "parse.cc"
    break;

  case 518: /* justified_clause: is JUSTIFIED  */
#line 4616 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  field->attr |= rjust_e;
                }
#line 21021 "parse.cc"
    break;

  case 519: /* redefines_clause: REDEFINES NAME  */
#line 4623 "parse.y"
                {
                  struct symbol_elem_t *e = symbol_field(PROGRAM, 0, (yyvsp[0].string));
                  if( !e ) {
                    error_msg((yylsp[0]), "REDEFINES target not defined");
                    YYERROR;
                  }
                  cbl_field_t *field = current_field();
                  cbl_field_t *orig = cbl_field_of(e);
		  if( orig->has_attr(filler_e) ) {
                    error_msg((yylsp[0]), "%s may not REDEFINE %s",
                            field->name, orig->name);
		  }
                  cbl_field_t *super = symbol_redefines(orig);
                  if( super ) {
                    error_msg((yylsp[0]), "%s may not REDEFINE %s, "
                            "which redefines %s",
                            field->name, orig->name, super->name);
                  }
                  if( field->level != orig->level ) {
                    error_msg((yylsp[0]), "cannot redefine %s %s as %s %s "
                             "because they have different levels",
			    orig->level_str(), name_of(orig),
			    field->level_str(), name_of(field));
                  }
		  // ISO 13.18.44.3
		  auto parent( symbol_index(e) );
		  auto p = std::find_if( symbol_elem_of(orig) + 1,
					 symbol_elem_of(field),
					 [parent, level = field->level]( const auto& elem ) {
					   if( elem.type == SymField ) {
					     auto f = cbl_field_of(&elem);
					     return
					       f->level  == level &&
					       f->parent != parent;
					   }
					   return false;
					 } );
		  if( p != symbol_elem_of(field) ) {
		    auto mid( cbl_field_of(p) );
                    error_msg((yylsp[0]), "cannot redefine %s %s as %s %s "
			    "because %s %s intervenes",
			    orig->level_str(), name_of(orig),
			    field->level_str(), name_of(field),
			    mid->level_str(), name_of(mid));
                  }

                  if( valid_redefine((yylsp[0]), field, orig) ) {
                    /*
                     * Defer "inheriting" the parent's description until the
                     * redefine is complete.
                     */
                    current_field()->parent = symbol_index(e);
                  }
                }
#line 21080 "parse.cc"
    break;

  case 520: /* any_length: ANY LENGTH  */
#line 4680 "parse.y"
                { cbl_field_t *field = current_field();
                  if( field->attr & any_length_e ) {
                    error_msg((yylsp[-1]), "ANY LENGTH already set");
                  }
                  if( ! (field->level == 1 &&
                         current_data_section == linkage_datasect_e &&
                         (1 < current.program_level() ||
			      current.program()->is_function())) ) {
                    error_msg((yylsp[-1]), "ANY LENGTH valid only for 01 "
                            "in LINKAGE SECTION of a function or contained program");
                    YYERROR;
                  }
                  field->attr |= any_length_e;
                }
#line 21099 "parse.cc"
    break;

  case 521: /* based_clause: BASED  */
#line 4697 "parse.y"
                { cbl_field_t *field = current_field();
                  if( field->attr & based_e ) {
                    error_msg((yylsp[0]), "BASED already set");
                  }
                  field->attr |= based_e;
                }
#line 21110 "parse.cc"
    break;

  case 522: /* blank_zero_clause: blank_when_zero  */
#line 4706 "parse.y"
                { cbl_field_t *field = current_field();
                  // the BLANK WHEN ZERO clause defines the item as numeric-edited.
                  if( !field_type_update(field, FldNumericEdited, (yylsp[0])) ) {
                    YYERROR;
                  }
                  field->attr |= blank_zero_e;
                }
#line 21122 "parse.cc"
    break;

  case 528: /* same_clause: SAME AS name  */
#line 4725 "parse.y"
                {
                  cbl_field_t *field = current_field(), *other = (yyvsp[0].field);
                  if( other->occurs.ntimes() > 0 ) {
                    error_msg((yylsp[0]), "SAME AS %s: cannot have OCCURS",
                             other->name); // 13.18.49.2,P5
                    YYERROR;
                  }
                  if( field->level == 77 and !is_elementary(other->type) ) {
		    // ISO 2023 13.18.49.2,P8
                    error_msg((yylsp[0]), "%s %s SAME AS %s: must be elementary",
			    field->level_str(), field->name, other->name);
                    YYERROR;
                  }

                  if( (other->attr & (sign_clause_e | usage_clause_e)) > 0 ) {
                    error_msg((yylsp[0]), "%s: source of SAME AS cannot have "
                               "SIGN or USAGE clause", other->name);
                    YYERROR;
                  }
                  if( other->usage == FldGroup ) {
                    error_msg((yylsp[0]), "%s: source of SAME AS cannot have "
                               "GROUP-USAGE clause", other->name);
                    YYERROR;
                  }
                  if( other->has_attr(constant_e ) ) {
                    error_msg((yylsp[0]), "%s: source of SAME AS cannot "
                               "be constant", other->name);
                    YYERROR;
                  }
                  if( field->parent == field_index(other) ) {
                    error_msg((yylsp[0]), "%s: SAME AS uses "
                             "its own parent %s", field->name, other->name);
                    YYERROR;
                  }

                  const auto e = symbol_field_same_as( field, other );
                  symbol_field_location( symbol_index(e), (yylsp[0]) );
                }
#line 21165 "parse.cc"
    break;

  case 529: /* sign_clause: sign_is sign_leading sign_separate  */
#line 4766 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( (yyvsp[-1].boolean) ) {
                    field->attr |= leading_e;
                  } else {
                    field->attr &= ~uint64_t(leading_e); // turn off in case inherited
                    field->attr |= signable_e;
                  }
                  if( (yyvsp[0].boolean) ) field->attr |= separate_e;
                }
#line 21180 "parse.cc"
    break;

  case 532: /* sign_leading: LEADING  */
#line 4780 "parse.y"
                         { (yyval.boolean) = true; }
#line 21186 "parse.cc"
    break;

  case 533: /* sign_leading: TRAILING  */
#line 4781 "parse.y"
                         { (yyval.boolean) = false; }
#line 21192 "parse.cc"
    break;

  case 534: /* sign_separate: %empty  */
#line 4783 "parse.y"
                                    { (yyval.boolean) = false; }
#line 21198 "parse.cc"
    break;

  case 535: /* sign_separate: SEPARATE CHARACTER  */
#line 4784 "parse.y"
                                    { (yyval.boolean) = true; }
#line 21204 "parse.cc"
    break;

  case 536: /* sign_separate: SEPARATE  */
#line 4785 "parse.y"
                                    { (yyval.boolean) = true; }
#line 21210 "parse.cc"
    break;

  case 537: /* type_clause: TYPE to typename  */
#line 4806 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  if( (yyvsp[0].field) ) {
                    const auto e = symbol_field_same_as(field, (yyvsp[0].field));
		    symbol_field_location( symbol_index(e), (yylsp[0]) );
                  }
                }
#line 21222 "parse.cc"
    break;

  case 538: /* type_clause: USAGE is typename  */
#line 4814 "parse.y"
                {
                  if( ! dialect_mf() ) {
                    dialect_error((yylsp[0]), "USAGE TYPENAME", "mf");
                    YYERROR;
                  }
                  cbl_field_t *field = current_field();
                  if( (yyvsp[0].field) ) {
                    const auto e = symbol_field_same_as(field, (yyvsp[0].field));
		    symbol_field_location( symbol_index(e), (yylsp[0]) );
                  }
                }
#line 21238 "parse.cc"
    break;

  case 539: /* typedef_clause: is TYPEDEF strong  */
#line 4828 "parse.y"
                {
                  cbl_field_t *field = current_field();
                  switch( field->level ) {
                  case 1: case 77: break;
                  default:
                    error_msg((yylsp[-1]), "%s %s IS TYPEDEF must be level 01",
			    field->level_str(), field->name);
                  }
                  field->attr |= typedef_e;
                  if( (yyvsp[0].boolean) ) field->attr |= strongdef_e;
                  if( ! current.typedef_add(field) ) {
                    auto prior = current.has_typedef(field);
                    assert(prior);
                    error_msg((yylsp[-1]), "%s %s IS TYPEDEF is not unique "
                             "(see %s, line %d)",
			    field->level_str(), field->name,
			    prior->name, prior->line);
                  }
                }
#line 21262 "parse.cc"
    break;

  case 540: /* volatile_clause: VOLATILE  */
#line 4851 "parse.y"
                {
                  if( dialect_ibm() ) {
                    yywarn("VOLATILE has no effect");
                  } else {
                    dialect_error((yylsp[0]), "VOLATILE", "ibm");
                  }
                }
#line 21274 "parse.cc"
    break;

  case 541: /* procedure_div: %empty  */
#line 4860 "parse.y"
                       {
		  if( !procedure_division_ready((yyloc), NULL, NULL) ) YYABORT;
                }
#line 21282 "parse.cc"
    break;

  case 542: /* $@10: %empty  */
#line 4863 "parse.y"
                                  {
                  if( !procedure_division_ready((yyloc), NULL, NULL) ) YYABORT;
                }
#line 21290 "parse.cc"
    break;

  case 546: /* procedure_args: USING procedure_uses  */
#line 4871 "parse.y"
                {
                  if( !procedure_division_ready((yylsp[0]), NULL, (yyvsp[0].ffi_args)) ) YYABORT;
                }
#line 21298 "parse.cc"
    break;

  case 547: /* procedure_args: USING procedure_uses RETURNING name  */
#line 4875 "parse.y"
                {
                  if( !procedure_division_ready((yylsp[0]), (yyvsp[0].field), (yyvsp[-2].ffi_args)) ) YYABORT;
                  if( ! (yyvsp[0].field)->has_attr(linkage_e) ) {
                    error_msg((yylsp[0]), "RETURNING %s is not defined in LINKAGE SECTION",
			      (yyvsp[0].field)->name);
                  }
                }
#line 21310 "parse.cc"
    break;

  case 548: /* procedure_args: RETURNING name  */
#line 4883 "parse.y"
                {
                  if( !procedure_division_ready((yylsp[0]), (yyvsp[0].field), NULL) ) YYABORT;
                  if( ! (yyvsp[0].field)->has_attr(linkage_e) ) {
                    error_msg((yylsp[0]), "RETURNING %s is not defined in LINKAGE SECTION",
			      (yyvsp[0].field)->name);
                  }
                }
#line 21322 "parse.cc"
    break;

  case 549: /* procedure_uses: procedure_use  */
#line 4891 "parse.y"
                              { (yyval.ffi_args) = new ffi_args_t((yyvsp[0].ffi_arg)); }
#line 21328 "parse.cc"
    break;

  case 550: /* procedure_uses: procedure_uses procedure_use  */
#line 4892 "parse.y"
                                             { (yyval.ffi_args)->push_back((yyvsp[0].ffi_arg)); }
#line 21334 "parse.cc"
    break;

  case 551: /* procedure_use: optional scalar  */
#line 4894 "parse.y"
                                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_default_e, (yyvsp[0].refer));
                  (yyval.ffi_arg)->optional = (yyvsp[-1].boolean);
                  (yyval.ffi_arg)->validate(); // produces message
                }
#line 21344 "parse.cc"
    break;

  case 552: /* procedure_use: by REFERENCE optional scalar  */
#line 4899 "parse.y"
                                             {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, (yyvsp[0].refer));
                  (yyval.ffi_arg)->optional = (yyvsp[-1].boolean);
                  (yyval.ffi_arg)->validate(); // produces message
                }
#line 21354 "parse.cc"
    break;

  case 553: /* procedure_use: by CONTENT error  */
#line 4904 "parse.y"
                                 { // no "by content" in procedure definition
                    (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e,
                                           new_reference(literally_zero));
                }
#line 21363 "parse.cc"
    break;

  case 554: /* procedure_use: by VALUE by_value_arg  */
#line 4908 "parse.y"
                                           {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer));
                  (yyval.ffi_arg)->validate(); // produces message
                }
#line 21372 "parse.cc"
    break;

  case 556: /* by_value_arg: LITERAL  */
#line 4914 "parse.y"
                         { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 21378 "parse.cc"
    break;

  case 557: /* by_value_arg: reserved_value  */
#line 4916 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 21386 "parse.cc"
    break;

  case 559: /* @11: %empty  */
#line 4923 "parse.y"
                       {
		  cbl_enabled_exceptions_t& enabled_exceptions( cdf_enabled_exceptions() );
                  current.enabled_exception_cache = enabled_exceptions;
                  enabled_exceptions.clear();
                  current.doing_declaratives(true);
                  (yyval.label) = label_add(LblString, "_end_declaratives", 0);
                  assert((yyval.label));
                  parser_label_goto((yyval.label));
                }
#line 21400 "parse.cc"
    break;

  case 560: /* declaratives: DECLARATIVES '.' @11 sentences END DECLARATIVES '.'  */
#line 4933 "parse.y"
                {
                  current.doing_declaratives(false);
                  /* TODO: if( intradeclarative_reference() ) yyerror;
                   * Test also at paragraph_reference, for non-forward
                   * reference with good line numbers.  See
                   * utilcc::procedures_t and ambiguous_reference().  At this
                   * point, no reference should pick up anything except a
                   * forward reference, because we haven't yet begun to parse
                   * nondeclarative procedures.
                   */
		  cbl_enabled_exceptions_t& enabled_exceptions( cdf_enabled_exceptions() );
                  parser_label_label((yyvsp[-4].label));
                  enabled_exceptions = current.enabled_exception_cache;
                  current.enabled_exception_cache.clear();
		  ast_enter_section(implicit_section());
                }
#line 21421 "parse.cc"
    break;

  case 561: /* sentences: sentence  */
#line 4951 "parse.y"
                         {
		  ast_first_statement((yylsp[0]));
		  symbol_temporaries_free();
		}
#line 21430 "parse.cc"
    break;

  case 563: /* sentences: paragraph_name '.'  */
#line 4957 "parse.y"
                {
                  location_set((yylsp[-1]));
                  cbl_label_t *label = label_add((yylsp[-1]), LblParagraph, (yyvsp[-1].string));
                  if( !label ) {
                    YYERROR;
                  }
                  ast_enter_paragraph(label);
                  current.new_paragraph(label);
                  apply_declaratives();
                }
#line 21445 "parse.cc"
    break;

  case 564: /* sentences: sentences sentence  */
#line 4968 "parse.y"
                { // sentences might not be sentence
		  ast_first_statement((yylsp[0]));
		  symbol_temporaries_free();
		}
#line 21454 "parse.cc"
    break;

  case 566: /* sentences: sentences paragraph_name '.'  */
#line 4974 "parse.y"
                {
                  location_set((yylsp[-1]));
                  cbl_label_t *label = label_add((yylsp[-1]), LblParagraph, (yyvsp[-1].string));
                  if( !label ) {
                    YYERROR;
                  }
                  ast_enter_paragraph(label);
                  current.new_paragraph(label);
                  apply_declaratives();
                }
#line 21469 "parse.cc"
    break;

  case 568: /* paragraph_name: "numeric literal"  */
#line 4986 "parse.y"
                       { (yyval.string) = (yyvsp[0].numstr).string; }
#line 21475 "parse.cc"
    break;

  case 570: /* sentence: statements "end of file"  */
#line 4991 "parse.y"
                {
                  if( ! goodnight_gracie() ) {
                    YYABORT;
                  }
                  if( nparse_error > 0 ) YYABORT;
                  YYACCEPT;
                }
#line 21487 "parse.cc"
    break;

  case 571: /* sentence: program "END PROGRAM <contained program>" namestr '.'  */
#line 4999 "parse.y"
                { // a contained program (no prior END PROGRAM) is a "sentence"
                  const cbl_label_t *prog = current.program();
                  assert(prog);
                  const char *name = string_of((yyvsp[-1].literal));
                  if( !name || 0 != strcasecmp(prog->name, name) ) {
                    error_msg((yylsp[-1]),  "END PROGRAM '%s' does not match PROGRAM-ID '%s'",
                              name? name : (yyvsp[-1].literal).data, prog->name);
                    YYERROR;
                  }

                  std::set<std::string> externals = current.end_program();
                  if( !externals.empty() ) {
                    for( const auto& name : externals ) {
                      yywarn("%s calls external symbol '%s'",
                             prog->name, name.c_str());
                    }
                    YYERROR;
                  }
                  // pointer still valid because name is in symbol table
                  ast_end_program(prog->name);
                }
#line 21513 "parse.cc"
    break;

  case 572: /* sentence: program "end of file"  */
#line 5021 "parse.y"
                { // a contained program (no prior END PROGRAM) is a "sentence"
                  if( nparse_error > 0 ) YYABORT;
                  do {
		    if( ! goodnight_gracie() ) YYABORT; // no recovery
                  } while( current.program_level() > 0 );
                  YYACCEPT;
                }
#line 21525 "parse.cc"
    break;

  case 573: /* statements: statement  */
#line 5030 "parse.y"
                                     { (yyval.number) = (yyvsp[0].number); }
#line 21531 "parse.cc"
    break;

  case 574: /* statements: statements statement  */
#line 5031 "parse.y"
                                     { (yyval.number) = (yyvsp[0].number); }
#line 21537 "parse.cc"
    break;

  case 575: /* statement: error  */
#line 5034 "parse.y"
                      {
                  if( current.declarative_section_name() ) {
		    error_msg((yylsp[0]), "missing END DECLARATIVES or SECTION name");
                    YYABORT;
                  }
                  if( max_errors_exceeded(nparse_error) ) {
                    error_msg((yylsp[0]), "max errors %zu reached", nparse_error);
                    YYABORT;
                  }
                }
#line 21552 "parse.cc"
    break;

  case 576: /* statement: accept  */
#line 5044 "parse.y"
                                { (yyval.number) =  ACCEPT; }
#line 21558 "parse.cc"
    break;

  case 577: /* statement: add  */
#line 5045 "parse.y"
                                { (yyval.number) =  ADD; }
#line 21564 "parse.cc"
    break;

  case 578: /* statement: allocate  */
#line 5046 "parse.y"
                                { (yyval.number) =  ALLOCATE; }
#line 21570 "parse.cc"
    break;

  case 579: /* statement: alter  */
#line 5047 "parse.y"
                                { (yyval.number) =  ALTER; }
#line 21576 "parse.cc"
    break;

  case 580: /* statement: call  */
#line 5048 "parse.y"
                                { (yyval.number) =  CALL; }
#line 21582 "parse.cc"
    break;

  case 581: /* statement: cancel  */
#line 5049 "parse.y"
                                { (yyval.number) =  CANCEL; }
#line 21588 "parse.cc"
    break;

  case 582: /* statement: close  */
#line 5050 "parse.y"
                                { (yyval.number) =  CLOSE; }
#line 21594 "parse.cc"
    break;

  case 583: /* statement: compute  */
#line 5051 "parse.y"
                                { (yyval.number) =  COMPUTE; }
#line 21600 "parse.cc"
    break;

  case 584: /* statement: continue_stmt  */
#line 5052 "parse.y"
                                { (yyval.number) =  CONTINUE; }
#line 21606 "parse.cc"
    break;

  case 585: /* statement: delete  */
#line 5053 "parse.y"
                                { (yyval.number) =  DELETE; }
#line 21612 "parse.cc"
    break;

  case 586: /* statement: display  */
#line 5054 "parse.y"
                                { (yyval.number) =  DISPLAY; }
#line 21618 "parse.cc"
    break;

  case 587: /* statement: divide  */
#line 5055 "parse.y"
                                { (yyval.number) =  DIVIDE; }
#line 21624 "parse.cc"
    break;

  case 588: /* statement: entry  */
#line 5056 "parse.y"
                                { (yyval.number) =  ENTRY; }
#line 21630 "parse.cc"
    break;

  case 589: /* statement: evaluate  */
#line 5057 "parse.y"
                                { (yyval.number) =  EVALUATE; }
#line 21636 "parse.cc"
    break;

  case 590: /* statement: exhibit_stmt  */
#line 5058 "parse.y"
                                { (yyval.number) =  EXHIBIT; }
#line 21642 "parse.cc"
    break;

  case 591: /* statement: exit  */
#line 5059 "parse.y"
                                { (yyval.number) =  EXIT; }
#line 21648 "parse.cc"
    break;

  case 592: /* statement: free  */
#line 5060 "parse.y"
                                { (yyval.number) =  FREE; }
#line 21654 "parse.cc"
    break;

  case 593: /* statement: go_to  */
#line 5061 "parse.y"
                                { (yyval.number) =  GOTO; }
#line 21660 "parse.cc"
    break;

  case 594: /* statement: if_stmt  */
#line 5062 "parse.y"
                                { (yyval.number) =  IF; }
#line 21666 "parse.cc"
    break;

  case 595: /* statement: initialize  */
#line 5063 "parse.y"
                                { (yyval.number) =  INITIALIZE; }
#line 21672 "parse.cc"
    break;

  case 596: /* statement: inspect  */
#line 5064 "parse.y"
                                { (yyval.number) =  INSPECT; }
#line 21678 "parse.cc"
    break;

  case 597: /* statement: merge  */
#line 5065 "parse.y"
                                { (yyval.number) =  MERGE; }
#line 21684 "parse.cc"
    break;

  case 598: /* statement: move  */
#line 5066 "parse.y"
                                { (yyval.number) =  MOVE; }
#line 21690 "parse.cc"
    break;

  case 599: /* statement: multiply  */
#line 5067 "parse.y"
                                { (yyval.number) =  MULTIPLY; }
#line 21696 "parse.cc"
    break;

  case 600: /* statement: open  */
#line 5068 "parse.y"
                                { (yyval.number) =  OPEN; }
#line 21702 "parse.cc"
    break;

  case 601: /* statement: return_stmt  */
#line 5069 "parse.y"
                                { (yyval.number) =  RETURN; }
#line 21708 "parse.cc"
    break;

  case 602: /* statement: perform  */
#line 5070 "parse.y"
                                { (yyval.number) =  PERFORM; }
#line 21714 "parse.cc"
    break;

  case 603: /* statement: raise  */
#line 5071 "parse.y"
                                { (yyval.number) =  RAISE; }
#line 21720 "parse.cc"
    break;

  case 604: /* statement: read  */
#line 5072 "parse.y"
                                { (yyval.number) =  READ; }
#line 21726 "parse.cc"
    break;

  case 605: /* statement: release  */
#line 5073 "parse.y"
                                { (yyval.number) =  RELEASE; }
#line 21732 "parse.cc"
    break;

  case 606: /* statement: resume  */
#line 5074 "parse.y"
                                { (yyval.number) =  RESUME; }
#line 21738 "parse.cc"
    break;

  case 607: /* statement: rewrite  */
#line 5075 "parse.y"
                                { (yyval.number) =  REWRITE; }
#line 21744 "parse.cc"
    break;

  case 608: /* statement: search  */
#line 5076 "parse.y"
                                { (yyval.number) =  SEARCH; }
#line 21750 "parse.cc"
    break;

  case 609: /* statement: set  */
#line 5077 "parse.y"
                                { (yyval.number) =  SET; }
#line 21756 "parse.cc"
    break;

  case 610: /* statement: sort  */
#line 5078 "parse.y"
                                { (yyval.number) =  SORT; }
#line 21762 "parse.cc"
    break;

  case 611: /* statement: start  */
#line 5079 "parse.y"
                                { (yyval.number) =  START; }
#line 21768 "parse.cc"
    break;

  case 612: /* statement: stop  */
#line 5080 "parse.y"
                                { (yyval.number) =  STOP; }
#line 21774 "parse.cc"
    break;

  case 613: /* statement: string  */
#line 5081 "parse.y"
                                { (yyval.number) =  STRING_kw; }
#line 21780 "parse.cc"
    break;

  case 614: /* statement: subtract  */
#line 5082 "parse.y"
                                { (yyval.number) =  SUBTRACT; }
#line 21786 "parse.cc"
    break;

  case 615: /* statement: unstring  */
#line 5083 "parse.y"
                                { (yyval.number) =  UNSTRING; }
#line 21792 "parse.cc"
    break;

  case 616: /* statement: write  */
#line 5084 "parse.y"
                                { (yyval.number) =  WRITE; }
#line 21798 "parse.cc"
    break;

  case 617: /* accept: accept_body end_accept  */
#line 5100 "parse.y"
                                       {
		  cbl_field_t *argi = register_find("_ARGI");
		  switch( (yyvsp[-1].accept_func).func ) {
		  case accept_done_e:
		    break;
		  case accept_e:
                    parser_accept(*(yyvsp[-1].accept_func).into, (yyvsp[-1].accept_func).special, nullptr, nullptr);
		    break;
		  case accept_command_line_e:
		    if( (yyvsp[-1].accept_func).from->field == NULL ) { // take next command-line arg
		      parser_accept_command_line(*(yyvsp[-1].accept_func).into, argi, NULL, NULL);
		      cbl_num_result_t tgt { truncation_e, argi };
		      parser_add2(tgt, literally_one);	// increment argi
		    } else if( (yyvsp[-1].accept_func).from->field == argi ) {
		      parser_move(*(yyvsp[-1].accept_func).into, *(yyvsp[-1].accept_func).from);
		    } else {
		      parser_accept_command_line(*(yyvsp[-1].accept_func).into, *(yyvsp[-1].accept_func).from, NULL, NULL);
		    }
		    break;
		  case accept_envar_e:
		    parser_accept_envar(*(yyvsp[-1].accept_func).into, *(yyvsp[-1].accept_func).from, NULL, NULL);
		    break;
		  }
		}
#line 21827 "parse.cc"
    break;

  case 618: /* accept: accept_body accept_excepts end_accept  */
#line 5124 "parse.y"
                                                          {
		  cbl_field_t *argi = register_find("_ARGI");
		  switch( (yyvsp[-2].accept_func).func ) {
		  case accept_done_e:
		    error_msg((yylsp[-1]), "ON EXCEPTION valid only "
			    "with ENVIRONMENT or COMMAND-LINE(n)");
		    break;
		  case accept_e:
                    parser_accept(*(yyvsp[-2].accept_func).into, (yyvsp[-2].accept_func).special, (yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		    break;
		  case accept_command_line_e:
		    if( (yyvsp[-2].accept_func).from->field == NULL ) { // take next command-line arg
		      parser_accept_command_line(*(yyvsp[-2].accept_func).into, argi,
						 (yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		      cbl_num_result_t tgt { truncation_e, argi };
		      parser_add2(tgt, literally_one);	// increment argi
		    } else if( (yyvsp[-2].accept_func).from->field == argi ) {
		      parser_move(*(yyvsp[-2].accept_func).into, *(yyvsp[-2].accept_func).from);
		      if( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error ) {
			error_msg((yylsp[-1]), "ON EXCEPTION valid only "
				"with ENVIRONMENT or COMMAND-LINE(n)");
		      }
		    } else {
		      parser_accept_command_line(*(yyvsp[-2].accept_func).into, *(yyvsp[-2].accept_func).from,
						 (yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		    }
		    break;
		  case accept_envar_e:
		    parser_accept_envar(*(yyvsp[-2].accept_func).into, *(yyvsp[-2].accept_func).from,
					(yyvsp[-1].error).on_error, (yyvsp[-1].error).not_error);
		    break;
		  }
		}
#line 21865 "parse.cc"
    break;

  case 621: /* accept_body: accept_refer  */
#line 5163 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  parser_accept(*(yyvsp[0].refer), CONSOLE_e, nullptr, nullptr);
                }
#line 21874 "parse.cc"
    break;

  case 622: /* accept_body: accept_refer FROM DATE  */
#line 5168 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yymmdd((yyvsp[-2].refer)->field);
                }
#line 21887 "parse.cc"
    break;

  case 623: /* accept_body: accept_refer FROM DATE YYYYMMDD  */
#line 5177 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-3].refer)->is_reference() ) {
                    error_msg((yylsp[-3]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yyyymmdd((yyvsp[-3].refer)->field);
                }
#line 21900 "parse.cc"
    break;

  case 624: /* accept_body: accept_refer FROM DAY  */
#line 5186 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yyddd((yyvsp[-2].refer)->field);
                }
#line 21913 "parse.cc"
    break;

  case 625: /* accept_body: accept_refer FROM DAY YYYYDDD  */
#line 5195 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-3].refer)->is_reference() ) {
                    error_msg((yylsp[-3]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_yyyyddd((yyvsp[-3].refer)->field);
                }
#line 21926 "parse.cc"
    break;

  case 626: /* accept_body: accept_refer FROM "DAY-OF-WEEK"  */
#line 5204 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_dow((yyvsp[-2].refer)->field);
                }
#line 21939 "parse.cc"
    break;

  case 627: /* accept_body: accept_refer FROM TIME  */
#line 5214 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  if( (yyvsp[-2].refer)->is_reference() ) {
                    error_msg((yylsp[-2]), "subscripts are unsupported here");
                    YYERROR;
                  }
                  parser_accept_date_hhmmssff((yyvsp[-2].refer)->field);
                }
#line 21952 "parse.cc"
    break;

  case 628: /* accept_body: accept_refer FROM acceptable  */
#line 5223 "parse.y"
                {
		  (yyval.accept_func).func = accept_e;
                  (yyval.accept_func).into = (yyvsp[-2].refer);
                  (yyval.accept_func).special = (yyvsp[0].special)->id;
                }
#line 21962 "parse.cc"
    break;

  case 629: /* accept_body: accept_refer FROM ENVIRONMENT envar  */
#line 5229 "parse.y"
                {
		  (yyval.accept_func).func = accept_envar_e;
		  (yyval.accept_func).into = (yyvsp[-3].refer);
		  (yyval.accept_func).from = (yyvsp[0].refer);
                }
#line 21972 "parse.cc"
    break;

  case 630: /* accept_body: accept_refer FROM "COMMAND-LINE"  */
#line 5235 "parse.y"
                {
		  (yyval.accept_func).func = accept_done_e;
                  parser_accept_command_line(*(yyvsp[-2].refer), NULL, NULL, NULL );
                }
#line 21981 "parse.cc"
    break;

  case 631: /* accept_body: accept_refer FROM "COMMAND-LINE" '(' expr ')'  */
#line 5240 "parse.y"
                {
		  (yyval.accept_func).func = accept_command_line_e;
		  (yyval.accept_func).into = (yyvsp[-5].refer);
		  (yyval.accept_func).from = (yyvsp[-1].refer);
                }
#line 21991 "parse.cc"
    break;

  case 632: /* accept_body: accept_refer FROM "COMMAND-LINE-COUNT"  */
#line 5245 "parse.y"
                                                     {
		  (yyval.accept_func).func = accept_done_e;
                  parser_accept_command_line_count(*(yyvsp[-2].refer));
                }
#line 22000 "parse.cc"
    break;

  case 633: /* accept_refer: ACCEPT scalar  */
#line 5251 "parse.y"
                              { statement_begin((yylsp[-1]), ACCEPT); (yyval.refer) = (yyvsp[0].refer); }
#line 22006 "parse.cc"
    break;

  case 634: /* accept_excepts: accept_excepts accept_except statements  */
#line 5255 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-1]), "too many ON EXCEPTION clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-1]), "duplicate ON EXCEPTION clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-1]), "duplicate NOT ON EXCEPTION clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_accept_exception_end(tgt);
                }
#line 22038 "parse.cc"
    break;

  case 635: /* accept_excepts: accept_except statements  */
#line 5283 "parse.y"
                {
                  (yyval.error) = (yyvsp[-1].error);
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_accept_exception_end(tgt);
                }
#line 22050 "parse.cc"
    break;

  case 636: /* accept_except: EXCEPTION  */
#line 5293 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblArith,
                                          uniq_label("accept"), (yylsp[0]).first_line);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_accept_exception( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == EXCEPTION || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 22067 "parse.cc"
    break;

  case 637: /* envar: scalar  */
#line 5307 "parse.y"
                       { (yyval.refer) = (yyvsp[0].refer); (yyval.refer)->field->attr |= envar_e; }
#line 22073 "parse.cc"
    break;

  case 638: /* envar: LITERAL  */
#line 5308 "parse.y"
                        {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                  (yyval.refer)->field->attr |= envar_e;
                }
#line 22082 "parse.cc"
    break;

  case 639: /* acceptable: device_name  */
#line 5315 "parse.y"
                {
                  (yyval.special) = symbol_special( (yyvsp[0].special_type).id );
                  if( !(yyval.special) ) {
                    error_msg((yylsp[0]), "no such environment name");
                    YYERROR;
                  }
                }
#line 22094 "parse.cc"
    break;

  case 640: /* acceptable: NAME  */
#line 5323 "parse.y"
                {
                  (yyval.special) = special_of((yyvsp[0].string));
                  if( !(yyval.special) ) {
		    const special_name_t *special_type = cmd_or_env_special_of((yyvsp[0].string));
		    if( !special_type ) {
                      error_msg((yylsp[0]), "no such special name '%s'", (yyvsp[0].string));
                      YYERROR;
		    }
                    if( ENV_NAME_e == *special_type ) { 
                      error_msg((yylsp[0]), "cannot ACCEPT FROM %qs", (yyvsp[0].string));
                      YYERROR;
                    }
		    // Add the name now, as a convenience. 
                    int token = 0;
                    switch(*special_type) {
                    case ARG_NUM_e:    token = ARGUMENT_NUMBER; break;
                    case ARG_VALUE_e:  token = ARGUMENT_VALUE; break;
                    case ENV_VALUE_e:  token = ENVIRONMENT_VALUE; break;

                    case ENV_NAME_e:
                    default:
                      error_msg((yylsp[0]), "cannot ACCEPT FROM %qs", (yyvsp[0].string));
                      YYERROR;
                      break;
                    }
		    cbl_special_name_t special = { token, *special_type };
		    namcpy((yylsp[0]), special.name, (yyvsp[0].string));

		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                    cbl_special_name_t& unused(*(yyval.special));
                    assert(unused.id);
		  }
		  assert((yyval.special));
                }
#line 22134 "parse.cc"
    break;

  case 641: /* acceptable: ENVIRONMENT_VALUE  */
#line 5358 "parse.y"
                                  {
		    // Add the name now, as a convenience. 
		    cbl_special_name_t special =
                      { ENVIRONMENT_VALUE, ENV_VALUE_e, "ENVIRONMENT-VALUE" };
		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                }
#line 22146 "parse.cc"
    break;

  case 642: /* acceptable: ARGUMENT_NUMBER  */
#line 5365 "parse.y"
                                {
		    // Add the name now, as a convenience. 
		    cbl_special_name_t special =
                      { ARGUMENT_NUMBER, ARG_NUM_e, "ARGUMENT-NUMBER" };
		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                }
#line 22158 "parse.cc"
    break;

  case 643: /* acceptable: ARGUMENT_VALUE  */
#line 5372 "parse.y"
                               {
		    // Add the name now, as a convenience. 
		    cbl_special_name_t special =
                      { ARGUMENT_VALUE, ARG_VALUE_e, "ARGUMENT-VALUE" };
		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                }
#line 22170 "parse.cc"
    break;

  case 644: /* add: add_impl end_add  */
#line 5381 "parse.y"
                                 { ast_add((yyvsp[-1].arith)); }
#line 22176 "parse.cc"
    break;

  case 645: /* add: add_cond end_add  */
#line 5382 "parse.y"
                                 { ast_add((yyvsp[-1].arith)); }
#line 22182 "parse.cc"
    break;

  case 646: /* add_impl: ADD add_body  */
#line 5385 "parse.y"
                {
                  statement_begin((yylsp[-1]), ADD);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 22191 "parse.cc"
    break;

  case 647: /* add_cond: ADD add_body arith_errs  */
#line 5391 "parse.y"
                {
                  statement_begin((yylsp[-2]), ADD);
                  (yyvsp[-1].arith)->on_error = (yyvsp[0].error).on_error;
                  (yyvsp[-1].arith)->not_error = (yyvsp[0].error).not_error;
                  (yyval.arith) = (yyvsp[-1].arith);
                }
#line 22202 "parse.cc"
    break;

  case 650: /* add_body: sum TO rnames  */
#line 5403 "parse.y"
                {
                  (yyval.arith) = new arith_t(no_giving_e, (yyvsp[-2].refers));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 22213 "parse.cc"
    break;

  case 651: /* add_body: sum TO num_operand GIVING rnames  */
#line 5410 "parse.y"
                {
                  (yyval.arith) = new arith_t(giving_e, (yyvsp[-4].refers));
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 22225 "parse.cc"
    break;

  case 652: /* add_body: sum GIVING rnames  */
#line 5418 "parse.y"
                { // implicit TO
                  (yyval.arith) = new arith_t(giving_e, (yyvsp[-2].refers));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 22236 "parse.cc"
    break;

  case 653: /* add_body: CORRESPONDING sum TO rnames  */
#line 5425 "parse.y"
                {
                  corresponding_fields_t pairs =
                    corresponding_arith_fields( (yyvsp[-2].refers)->refers.front().field,
                                                rhs.front().refer.field );
                    if( pairs.empty() ) {
                      yywarn( "%s and %s have no corresponding fields",
                                (yyvsp[-2].refers)->refers.front().field->name,
                                rhs.front().refer.field->name );
                    }
                  // First src/tgt elements are templates.
                  // Their subscripts apply to the correspondents.
                  (yyval.arith) = new arith_t(corresponding_e, (yyvsp[-2].refers));
                  (yyval.arith)->tgts.push_front(rhs.front());
                  // use arith_t functor to populate A and tgts
                  *(yyval.arith) = std::for_each( pairs.begin(), pairs.end(), *(yyval.arith) );
                  (yyval.arith)->A.pop_front();
                  (yyval.arith)->tgts.pop_front();
                  rhs.clear();
                }
#line 22260 "parse.cc"
    break;

  case 654: /* rounded: %empty  */
#line 5446 "parse.y"
                                        { (yyval.opt_round) = truncation_e; }
#line 22266 "parse.cc"
    break;

  case 655: /* rounded: ROUNDED  */
#line 5447 "parse.y"
                                        { (yyval.opt_round) = current_rounded_mode(); }
#line 22272 "parse.cc"
    break;

  case 656: /* rounded: ROUNDED rounded_mode  */
#line 5448 "parse.y"
                                        { (yyval.opt_round) = rounded_of((yyvsp[0].opt_round)); }
#line 22278 "parse.cc"
    break;

  case 657: /* rounded_mode: MODE is rounded_type  */
#line 5450 "parse.y"
                                        { (yyval.opt_round) = (yyvsp[0].opt_round); }
#line 22284 "parse.cc"
    break;

  case 658: /* rounded_type: "AWAY-FROM-ZERO"  */
#line 5452 "parse.y"
                                        { (yyval.opt_round) = away_from_zero_e; }
#line 22290 "parse.cc"
    break;

  case 659: /* rounded_type: "NEAREST-EVEN NEAREST-TOWARD-ZERO"  */
#line 5453 "parse.y"
                                        { (yyval.opt_round) = nearest_toward_zero_e; }
#line 22296 "parse.cc"
    break;

  case 660: /* rounded_type: "TOWARD-GREATER"  */
#line 5454 "parse.y"
                                        { (yyval.opt_round) = toward_greater_e; }
#line 22302 "parse.cc"
    break;

  case 661: /* rounded_type: "TOWARD-LESSER"  */
#line 5455 "parse.y"
                                        { (yyval.opt_round) = toward_lesser_e; }
#line 22308 "parse.cc"
    break;

  case 663: /* round_between: "NEAREST-AWAY-FROM-ZERO"  */
#line 5458 "parse.y"
                                        { (yyval.opt_round) = nearest_away_from_zero_e; }
#line 22314 "parse.cc"
    break;

  case 664: /* round_between: NEAREST_EVEN  */
#line 5459 "parse.y"
                                        { (yyval.opt_round) = nearest_even_e; }
#line 22320 "parse.cc"
    break;

  case 665: /* round_between: PROHIBITED  */
#line 5460 "parse.y"
                                        { (yyval.opt_round) = prohibited_e; }
#line 22326 "parse.cc"
    break;

  case 666: /* round_between: TRUNCATION  */
#line 5461 "parse.y"
                                        { (yyval.opt_round) = truncation_e; }
#line 22332 "parse.cc"
    break;

  case 667: /* might_be: %empty  */
#line 5464 "parse.y"
                       { (yyval.number) = IS; }
#line 22338 "parse.cc"
    break;

  case 669: /* posneg: POSITIVE  */
#line 5468 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? le_op : gt_op; }
#line 22344 "parse.cc"
    break;

  case 670: /* posneg: NEGATIVE  */
#line 5469 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? ge_op : lt_op; }
#line 22350 "parse.cc"
    break;

  case 671: /* posneg: ZERO  */
#line 5470 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? ne_op : eq_op; }
#line 22356 "parse.cc"
    break;

  case 672: /* scalar88s: scalar88  */
#line 5473 "parse.y"
                                 { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 22362 "parse.cc"
    break;

  case 673: /* scalar88s: scalar88s scalar88  */
#line 5474 "parse.y"
                                   { (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); }
#line 22368 "parse.cc"
    break;

  case 674: /* name88: "Level 88 NAME"  */
#line 5477 "parse.y"
                       {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
		  auto namelocs( name_queue.pop() );
		  auto names( name_queue.namelist_of(namelocs) );
                  if( ((yyval.field) = field_find(names)) == NULL ) {
                    if( procedure_div_e == current_division  ) {
		      error_msg(namelocs.back().loc,
				"DATA-ITEM '%s' not found", names.back() );
                      YYERROR;
                    }
		  }
		  assert((yyval.field)->level == 88);
		}
#line 22386 "parse.cc"
    break;

  case 675: /* scalar88: name88 subscripts refmod  */
#line 5493 "parse.y"
                {
                  if( (yyvsp[0].refmod_parts).from->is_reference() || (yyvsp[0].refmod_parts).len->is_reference() ) {
                    error_msg((yylsp[-1]), "subscripts on start:len refmod "
                            "parameters are unsupported");
                    YYERROR;
                  }
                  cbl_span_t span( (yyvsp[0].refmod_parts).from, (yyvsp[0].refmod_parts).len );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-2].field), (yyvsp[-1].refers)->vectorize(), span);
                }
#line 22400 "parse.cc"
    break;

  case 676: /* scalar88: name88 refmod  */
#line 5503 "parse.y"
                {
                  if( (yyvsp[0].refmod_parts).from->is_reference() || (yyvsp[0].refmod_parts).len->is_reference() ) {
                    error_msg((yylsp[0]), "subscripts on start:len refmod "
                            "parameters are unsupported");
                    YYERROR;
                  }
                  cbl_span_t span( (yyvsp[0].refmod_parts).from, (yyvsp[0].refmod_parts).len );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field), span);
                }
#line 22414 "parse.cc"
    break;

  case 677: /* scalar88: name88 subscripts  */
#line 5513 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field));
                  if( (yyvsp[0].refers)->refers.size() != (yyval.refer)->subscripts_set((yyvsp[0].refers)->refers) ) {
                    subscript_dimension_error((yylsp[0]), (yyvsp[0].refers)->refers.size(), (yyval.refer));
                  }
                }
#line 22425 "parse.cc"
    break;

  case 678: /* scalar88: name88  */
#line 5520 "parse.y"
                {
                  (yyval.refer) = new_reference((yyvsp[0].field));
                }
#line 22433 "parse.cc"
    break;

  case 679: /* allocate: ALLOCATE expr CHARACTERS initialized RETURNING scalar  */
#line 5526 "parse.y"
                {
                  statement_begin((yylsp[-5]), ALLOCATE);
                  if( (yyvsp[-4].refer)->field->type == FldLiteralN ) {
		    const auto size = TREE_REAL_CST_PTR ((yyvsp[-4].refer)->field->data.value_of());
                    if( real_isneg(size) || real_iszero(size) ) {
                      error_msg((yylsp[-4]), "size must be greater than 0");
                      YYERROR;
                    }
                  }
                  reject_refmod( (yylsp[0]), *(yyvsp[0].refer) );
                  if( ! require_pointer((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
                  parser_allocate( *(yyvsp[-4].refer), *(yyvsp[0].refer), (yyvsp[-2].boolean) );
                }
#line 22451 "parse.cc"
    break;

  case 680: /* allocate: ALLOCATE scalar initialized alloc_ret  */
#line 5540 "parse.y"
                {
                  statement_begin((yylsp[-3]), ALLOCATE);
                  if( ! (yyvsp[-2].refer)->field->has_attr(based_e) ) {
                    error_msg((yylsp[-2]), "%s must be BASED", (yyvsp[-2].refer)->name());
                    YYERROR;
                  }
                  reject_refmod( (yylsp[-2]), *(yyvsp[-2].refer) );
                  reject_refmod( (yylsp[0]), *(yyvsp[0].refer) );
                  if( (yyvsp[0].refer)->field &&
		      ! require_pointer((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
                  parser_allocate( *(yyvsp[-2].refer), *(yyvsp[0].refer), (yyvsp[-1].boolean) );
                  if( (yyvsp[-1].boolean) ) {
                    initialize_allocated(*(yyvsp[-2].refer));
                  }
                }
#line 22471 "parse.cc"
    break;

  case 681: /* initialized: %empty  */
#line 5556 "parse.y"
                             { (yyval.boolean) = false; }
#line 22477 "parse.cc"
    break;

  case 682: /* initialized: INITIALIZED  */
#line 5557 "parse.y"
                             { (yyval.boolean) = true; }
#line 22483 "parse.cc"
    break;

  case 683: /* alloc_ret: %empty  */
#line 5559 "parse.y"
                       { static cbl_refer_t empty; (yyval.refer) = &empty; }
#line 22489 "parse.cc"
    break;

  case 684: /* alloc_ret: RETURNING scalar  */
#line 5560 "parse.y"
                                                 { (yyval.refer) = (yyvsp[0].refer); }
#line 22495 "parse.cc"
    break;

  case 685: /* compute: compute_impl end_compute  */
#line 5563 "parse.y"
                                         { current.compute_end(); }
#line 22501 "parse.cc"
    break;

  case 686: /* compute: compute_cond end_compute  */
#line 5564 "parse.y"
                                         { current.compute_end(); }
#line 22507 "parse.cc"
    break;

  case 687: /* compute_impl: COMPUTE compute_body  */
#line 5567 "parse.y"
                {
                  parser_assign( (yyvsp[0].compute_body_t).ntgt, (yyvsp[0].compute_body_t).tgts, *(yyvsp[0].compute_body_t).expr,
                                 NULL, NULL, current.compute_label() );
                  current.declaratives_evaluate();
                }
#line 22517 "parse.cc"
    break;

  case 688: /* compute_cond: COMPUTE compute_body arith_errs  */
#line 5574 "parse.y"
                {
                  parser_assign( (yyvsp[-1].compute_body_t).ntgt, (yyvsp[-1].compute_body_t).tgts, *(yyvsp[-1].compute_body_t).expr,
                                 (yyvsp[0].error).on_error, (yyvsp[0].error).not_error,
                                 current.compute_label() );
                  current.declaratives_evaluate();
                }
#line 22528 "parse.cc"
    break;

  case 691: /* $@12: %empty  */
#line 5585 "parse.y"
                       { statement_begin((yyloc), COMPUTE); }
#line 22534 "parse.cc"
    break;

  case 692: /* compute_body: rnames $@12 compute_expr  */
#line 5585 "parse.y"
                                                                            {
                  (yyval.compute_body_t).ntgt = rhs.size();
                  auto C = new cbl_num_result_t[(yyval.compute_body_t).ntgt];
                  (yyval.compute_body_t).tgts = use_any(rhs, C);
                  (yyval.compute_body_t).expr = (yyvsp[0].refer);
                }
#line 22545 "parse.cc"
    break;

  case 693: /* $@13: %empty  */
#line 5592 "parse.y"
                    {
                  current.compute_begin();
                }
#line 22553 "parse.cc"
    break;

  case 694: /* compute_expr: '=' $@13 expr  */
#line 5594 "parse.y"
                       {
                  (yyval.refer) = (yyvsp[0].refer);
                }
#line 22561 "parse.cc"
    break;

  case 695: /* $@14: %empty  */
#line 5598 "parse.y"
                      {
		  if( ! dialect_ibm() ) {
		    dialect_error((yylsp[0]), "EQUAL invalid as assignment operator", "ibm");
		  }
		  current.compute_begin();
                }
#line 22572 "parse.cc"
    break;

  case 696: /* compute_expr: EQUAL $@14 expr  */
#line 5603 "parse.y"
                       {
                  (yyval.refer) = (yyvsp[0].refer);
                }
#line 22580 "parse.cc"
    break;

  case 697: /* display: disp_body end_display  */
#line 5609 "parse.y"
                {
		  std::vector <cbl_refer_t> args((yyvsp[-1].display).vargs->args.begin(),
                                                 (yyvsp[-1].display).vargs->args.end());
                  parser_display((yyvsp[-1].display).special, args, (yyvsp[0].boolean));
		  current.declaratives_evaluate();
                }
#line 22591 "parse.cc"
    break;

  case 698: /* end_display: %empty  */
#line 5616 "parse.y"
                                                { (yyval.boolean) = DISPLAY_ADVANCE; }
#line 22597 "parse.cc"
    break;

  case 699: /* end_display: "END-DISPLAY"  */
#line 5617 "parse.y"
                                                { (yyval.boolean) = DISPLAY_ADVANCE; }
#line 22603 "parse.cc"
    break;

  case 700: /* end_display: NO ADVANCING  */
#line 5618 "parse.y"
                                                { (yyval.boolean) = DISPLAY_NO_ADVANCE; }
#line 22609 "parse.cc"
    break;

  case 701: /* end_display: NO ADVANCING "END-DISPLAY"  */
#line 5619 "parse.y"
                                                { (yyval.boolean) = DISPLAY_NO_ADVANCE; }
#line 22615 "parse.cc"
    break;

  case 702: /* disp_body: disp_vargs  */
#line 5622 "parse.y"
                {
                  (yyval.display).special = NULL;
                  (yyval.display).vargs = (yyvsp[0].vargs);
                }
#line 22624 "parse.cc"
    break;

  case 703: /* disp_body: disp_vargs UPON disp_upon  */
#line 5627 "parse.y"
                {
                  (yyval.display).special = (yyvsp[0].special);
                  (yyval.display).vargs = (yyvsp[-2].vargs);
                }
#line 22633 "parse.cc"
    break;

  case 704: /* disp_vargs: DISPLAY vargs  */
#line 5632 "parse.y"
                              {
                  statement_begin((yylsp[-1]), DISPLAY);
                  (yyval.vargs) = (yyvsp[0].vargs);
                }
#line 22642 "parse.cc"
    break;

  case 705: /* disp_upon: device_name  */
#line 5638 "parse.y"
                            {
                  (yyval.special) = symbol_special((yyvsp[0].special_type).id);
                }
#line 22650 "parse.cc"
    break;

  case 706: /* disp_upon: NAME  */
#line 5642 "parse.y"
                {
                  symbol_elem_t *e = symbol_special(PROGRAM, (yyvsp[0].string));
                  if( !e ) {
		    const special_name_t *special_type = cmd_or_env_special_of((yyvsp[0].string));
		    if( !special_type ) {
                      error_msg((yylsp[0]), "no such special name '%s'", (yyvsp[0].string));
                      YYERROR;
		    }
		    // Add the name now, as a convenience.
                    // These may come through as a NAME, depending on how scanned. 
                    int token = 0;
                    switch(*special_type) {
                    case ARG_NUM_e:    token = ARGUMENT_NUMBER; break;
                    case ENV_NAME_e:   token = ENVIRONMENT_NAME; break;
                    case ENV_VALUE_e:  token = ENVIRONMENT_VALUE; break;

                    case ARG_VALUE_e:
                    default:
                      error_msg((yylsp[0]), "cannot DISPLAY UPON %qs", (yyvsp[0].string));
                      YYERROR;
                      break;
                    }
		    cbl_special_name_t special = { token, *special_type };
		    namcpy((yylsp[0]), special.name, (yyvsp[0].string));

                    e = symbol_special_add(PROGRAM, &special);
		  }
		  (yyval.special) = cbl_special_name_of(e);
                }
#line 22684 "parse.cc"
    break;

  case 707: /* disp_upon: ARGUMENT_NUMBER  */
#line 5671 "parse.y"
                                {
		    // Add the name now, as a convenience. 
		    cbl_special_name_t special =
                      { ARGUMENT_NUMBER, ARG_NUM_e, "ARGUMENT-NUMBER" };
		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                }
#line 22696 "parse.cc"
    break;

  case 708: /* disp_upon: ENVIRONMENT_NAME  */
#line 5678 "parse.y"
                                 {
		    // Add the name now, as a convenience. 
		    cbl_special_name_t special =
                      { ENVIRONMENT_NAME, ENV_NAME_e, "ENVIRONMENT-NAME" };
		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                }
#line 22708 "parse.cc"
    break;

  case 709: /* disp_upon: ENVIRONMENT_VALUE  */
#line 5685 "parse.y"
                                  {
		    // Add the name now, as a convenience. 
		    cbl_special_name_t special =
                      { ENVIRONMENT_VALUE, ENV_VALUE_e, "ENVIRONMENT-VALUE" };
		    symbol_elem_t *e = symbol_special_add(PROGRAM, &special);
		    (yyval.special) = cbl_special_name_of(e);
                }
#line 22720 "parse.cc"
    break;

  case 710: /* exhibit_stmt: EXHIBIT exh_changed exh_named vargs  */
#line 5694 "parse.y"
                                                    {
                  statement_begin((yylsp[-3]), EXHIBIT);
                  std::vector<cbl_refer_t> args( (yyvsp[0].vargs)->args.begin(),
                                                 (yyvsp[0].vargs)->args.end() );
                  parser_exhibit( (yyvsp[-2].boolean), (yyvsp[-1].boolean), args );
                }
#line 22731 "parse.cc"
    break;

  case 711: /* exh_changed: %empty  */
#line 5701 "parse.y"
                        { (yyval.boolean) = false; }
#line 22737 "parse.cc"
    break;

  case 712: /* exh_changed: CHANGED  */
#line 5702 "parse.y"
                        { (yyval.boolean) = true; }
#line 22743 "parse.cc"
    break;

  case 713: /* exh_named: %empty  */
#line 5704 "parse.y"
                        { (yyval.boolean) = false; }
#line 22749 "parse.cc"
    break;

  case 714: /* exh_named: NAMED  */
#line 5705 "parse.y"
                        { (yyval.boolean) = true; }
#line 22755 "parse.cc"
    break;

  case 715: /* divide: divide_impl end_divide  */
#line 5708 "parse.y"
                                       { ast_divide((yyvsp[-1].arith)); }
#line 22761 "parse.cc"
    break;

  case 716: /* divide: divide_cond end_divide  */
#line 5709 "parse.y"
                                       { ast_divide((yyvsp[-1].arith)); }
#line 22767 "parse.cc"
    break;

  case 717: /* divide_impl: DIVIDE divide_body  */
#line 5713 "parse.y"
                {
                  statement_begin((yylsp[-1]), DIVIDE);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 22776 "parse.cc"
    break;

  case 718: /* divide_cond: DIVIDE divide_body arith_errs  */
#line 5719 "parse.y"
                {
                  statement_begin((yylsp[-2]), DIVIDE);
                  (yyval.arith) = (yyvsp[-1].arith);
                  (yyval.arith)->on_error = (yyvsp[0].error).on_error;
                  (yyval.arith)->not_error = (yyvsp[0].error).not_error;
                }
#line 22787 "parse.cc"
    break;

  case 721: /* divide_body: num_operand INTO rnames  */
#line 5731 "parse.y"
                { /* format 1 */
                  (yyval.arith) = new arith_t(no_giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 22799 "parse.cc"
    break;

  case 723: /* divide_body: divide_into REMAINDER scalar  */
#line 5740 "parse.y"
                {
                  if( (yyvsp[-2].arith)->tgts.size() != 1 ) {
                    error_msg((yylsp[-2]), "only 1 (not %zu) "
                             "GIVING with REMAINDER", (yyvsp[-2].arith)->tgts.size());
                    YYERROR;
                  }
                  (yyval.arith) = (yyvsp[-2].arith);
                  (yyval.arith)->remainder = *(yyvsp[0].refer);
                }
#line 22813 "parse.cc"
    break;

  case 725: /* divide_body: divide_by REMAINDER scalar  */
#line 5751 "parse.y"
                {
                  if( (yyvsp[-2].arith)->tgts.size() != 1 ) {
                    error_msg((yylsp[-2]), "only 1 (not %zu) "
                             "GIVING with REMAINDER", (yyvsp[-2].arith)->tgts.size());
                    YYERROR;
                  }
                  (yyval.arith) = (yyvsp[-2].arith);
                  (yyval.arith)->remainder = *(yyvsp[0].refer);
                }
#line 22827 "parse.cc"
    break;

  case 726: /* divide_into: num_operand INTO num_operand GIVING rnames  */
#line 5763 "parse.y"
                { // format 2 & 4
                  (yyval.arith) = new arith_t(giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  (yyval.arith)->B.push_back(*(yyvsp[-4].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 22840 "parse.cc"
    break;

  case 727: /* divide_by: num_operand BY num_operand GIVING rnames  */
#line 5773 "parse.y"
                { // format 3 & 5
                  (yyval.arith) = new arith_t(giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-4].refer));
                  (yyval.arith)->B.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 22853 "parse.cc"
    break;

  case 728: /* end_program: end_program1 '.'  */
#line 5784 "parse.y"
                {
                  const cbl_label_t *prog = current.program();
                  assert(prog);
                  const char *name = string_of((yyvsp[-1].prog_end).name);

                  bool matches = false;
                  const char *token_name = keyword_str((yyvsp[-1].prog_end).token) + 4;
                  switch((yyvsp[-1].prog_end).token) {
                  case END_PROGRAM:
                    matches = prog->type == LblProgram;
                    break;
                  case END_FUNCTION:
                    matches = prog->type == LblFunction;
                    break;
                  default:
                    error_msg((yylsp[-1]), "logic error: END token invalid '%s'", name);
                    gcc_unreachable();
                  }
                  if( !matches ) {
                    error_msg((yyvsp[-1].prog_end).loc, "END %s %s does not match "
                                    "%<IDENTIFICATION DIVISION %s%>",
                              token_name, name, prog->name);
                    YYERROR;
                  }

                  if( 0 != strcasecmp(prog->name, name) ) {
                    error_msg((yyvsp[-1].prog_end).loc, "END PROGRAM '%s' does not match PROGRAM-ID '%s'",
                              name, prog->name);
                    YYERROR;
                  }
                  std::set<std::string> externals = current.end_program();
                  if( !externals.empty() ) {
		    for( const auto& name : externals ) {
		      yywarn("%s calls external symbol '%s'", prog->name, name.c_str());
		    }
                    YYERROR;
                  }
                  // pointer still valid because name is in symbol table
                  ast_end_program(prog->name);
                }
#line 22898 "parse.cc"
    break;

  case 729: /* end_program: end_program1 error  */
#line 5825 "parse.y"
                {
		  const char *token_name = "???";
                  switch((yyvsp[-1].prog_end).token) {
                  case END_PROGRAM:
		    token_name = "PROGRAM";
                    break;
                  case END_FUNCTION:
		    token_name = "FUNCTION";
                    break;
                  default:
                    cbl_internal_error( "%<END%> token invalid");
                  }
		  error_msg((yylsp[-1]), "%<END%> %s requires %<NAME%> before %<.%>", token_name);
		  YYERROR;
		}
#line 22918 "parse.cc"
    break;

  case 730: /* end_program1: "END PROGRAM" namestr  */
#line 5842 "parse.y"
                {
                  (yyval.prog_end).loc = (yylsp[0]);
                  (yyval.prog_end).token = END_PROGRAM;
                  (yyval.prog_end).name = (yyvsp[0].literal);
                }
#line 22928 "parse.cc"
    break;

  case 731: /* end_program1: "END FUNCTION" namestr  */
#line 5848 "parse.y"
                {
                  (yyval.prog_end).loc = (yylsp[0]);
                  (yyval.prog_end).token = END_FUNCTION;
                  (yyval.prog_end).name = (yyvsp[0].literal);
                }
#line 22938 "parse.cc"
    break;

  case 732: /* end_program1: "END PROGRAM" '.'  */
#line 5854 "parse.y"
                {
                  (yyval.prog_end).loc = (yylsp[-1]);
                  (yyval.prog_end).token = END_PROGRAM;
                }
#line 22947 "parse.cc"
    break;

  case 733: /* end_program1: "END FUNCTION" '.'  */
#line 5859 "parse.y"
                {
                  (yyval.prog_end).loc = (yylsp[-1]);
                  (yyval.prog_end).token = END_FUNCTION;
                }
#line 22956 "parse.cc"
    break;

  case 734: /* continue_stmt: CONTINUE  */
#line 5865 "parse.y"
                         {
                  statement_begin((yylsp[0]), CONTINUE);
                  parser_sleep(*cbl_refer_t::empty());
                }
#line 22965 "parse.cc"
    break;

  case 735: /* continue_stmt: CONTINUE AFTER expr SECONDS  */
#line 5869 "parse.y"
                                            {
                  statement_begin((yylsp[-3]), CONTINUE);
                  parser_sleep(*(yyvsp[-1].refer));
                }
#line 22974 "parse.cc"
    break;

  case 736: /* exit: GOBACK exit_with  */
#line 5876 "parse.y"
                {
		  statement_begin((yylsp[-1]), GOBACK);
		  parser_exit(*(yyvsp[0].refer));
                }
#line 22983 "parse.cc"
    break;

  case 737: /* exit: GOBACK exit_raising  */
#line 5881 "parse.y"
                {
		  statement_begin((yylsp[-1]), GOBACK);
		  parser_exit(*cbl_refer_t::empty(), (yyvsp[0].ec_type));
		}
#line 22992 "parse.cc"
    break;

  case 738: /* $@15: %empty  */
#line 5885 "parse.y"
                     { statement_begin((yylsp[0]), EXIT); }
#line 22998 "parse.cc"
    break;

  case 740: /* exit: "(simple) EXIT"  */
#line 5887 "parse.y"
                {
                  error_msg((yylsp[0]), "EXIT is invalid here");
                }
#line 23006 "parse.cc"
    break;

  case 741: /* exit_with: %empty  */
#line 5901 "parse.y"
                {
		  /* "If a RETURNING phrase is specified in the procedure
		   *  division header of the program containing the GOBACK
		   *  statement, the value in the data item referenced by that
		   *  RETURNING phrase becomes the result of the program
		   *  activation.  Execution continues in the calling element
		   *  as specified in the rules."
		   */
                  (yyval.refer) = cbl_refer_t::empty();
		  if( dialect_ibm() ) {
		    static auto rt = cbl_field_of(symbol_at(return_code_register()));
		    static cbl_refer_t status(rt);
		    (yyval.refer) = &status;
		  }
		  const auto prog = cbl_label_of(symbol_at(current_program_index()));
		  if( prog->returning ) {
		    (yyval.refer) = new cbl_refer_t( cbl_field_of(symbol_at(prog->returning)) );
		  }
                }
#line 23030 "parse.cc"
    break;

  case 742: /* exit_with: with NORMAL stop_status  */
#line 5921 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer)? (yyvsp[0].refer) : new_reference(literally_zero);
                }
#line 23038 "parse.cc"
    break;

  case 743: /* exit_with: with ERROR stop_status  */
#line 5925 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer)? (yyvsp[0].refer) : new_reference(literally_one);
                }
#line 23046 "parse.cc"
    break;

  case 744: /* exit_with: RETURNING stop_status  */
#line 5929 "parse.y"
                {
		  if( ! dialect_mf() ) {
                    dialect_error((yylsp[0]), "RETURNING <number>", "mf");
		  }
                  (yyval.refer) = (yyvsp[0].refer)? (yyvsp[0].refer) : new_reference(literally_one);
                }
#line 23057 "parse.cc"
    break;

  case 745: /* exit_what: "Program"  */
#line 5936 "parse.y"
                                            { parser_exit_program(); }
#line 23063 "parse.cc"
    break;

  case 746: /* exit_what: "Program" exit_raising  */
#line 5937 "parse.y"
                                            { parser_exit_program(); }
#line 23069 "parse.cc"
    break;

  case 747: /* exit_what: SECTION  */
#line 5938 "parse.y"
                                            { parser_exit_section(); }
#line 23075 "parse.cc"
    break;

  case 748: /* exit_what: PARAGRAPH  */
#line 5939 "parse.y"
                                            { parser_exit_paragraph(); }
#line 23081 "parse.cc"
    break;

  case 749: /* exit_what: PERFORM  */
#line 5940 "parse.y"
                          {
                  if( performs.empty() ) {
                    error_msg((yyloc), "EXIT PERFORM valid only "
                             "within inline PERFORM procedure" );
                    YYERROR;
                  }
                  parser_exit_perform(&perform_current()->tgt, (yyvsp[0].boolean));
                }
#line 23094 "parse.cc"
    break;

  case 750: /* exit_raising: RAISING EXCEPTION "EXCEPTION NAME"  */
#line 5951 "parse.y"
                {
		  (yyval.ec_type) = (yyvsp[0].ec_type);
		}
#line 23102 "parse.cc"
    break;

  case 751: /* exit_raising: RAISING error  */
#line 5954 "parse.y"
                              {
		  cbl_unimplemented("RAISING exception-object");
		  (yyval.ec_type) = ec_none_e;
		}
#line 23111 "parse.cc"
    break;

  case 752: /* exit_raising: RAISING LAST  */
#line 5959 "parse.y"
                {
		  (yyval.ec_type) = ec_all_e;
		}
#line 23119 "parse.cc"
    break;

  case 753: /* free: FREE free_tgts  */
#line 5965 "parse.y"
                {
                  size_t n = (yyvsp[0].refers)->size();
                  assert( n > 0 );
                  auto tgts = new cbl_refer_t[n];
                  parser_free( n, (yyvsp[0].refers)->use_list(tgts) );
                }
#line 23130 "parse.cc"
    break;

  case 754: /* free_tgts: free_tgt  */
#line 5972 "parse.y"
                         { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 23136 "parse.cc"
    break;

  case 755: /* free_tgts: free_tgts free_tgt  */
#line 5973 "parse.y"
                                   { (yyval.refers)->push_back((yyvsp[0].refer)); }
#line 23142 "parse.cc"
    break;

  case 756: /* free_tgt: scalar  */
#line 5975 "parse.y"
                       {
		  (yyval.refer) = (yyvsp[0].refer);
		  reject_refmod((yylsp[0]), *(yyvsp[0].refer));
		}
#line 23151 "parse.cc"
    break;

  case 757: /* free_tgt: ADDRESS OF scalar  */
#line 5980 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer);
                  (yyval.refer)->addr_of = true;
		  reject_refmod((yylsp[0]), *(yyvsp[0].refer));
                }
#line 23161 "parse.cc"
    break;

  case 758: /* simple_cond: kind_of_name  */
#line 5991 "parse.y"
                {
                  (yyval.refer) = new_reference((yyvsp[0].field));
                }
#line 23169 "parse.cc"
    break;

  case 759: /* simple_cond: SWITCH  */
#line 5995 "parse.y"
                {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  cbl_field_t *field = cbl_field_of(symbol_find((yylsp[0]), (yyvsp[0].string)));
                  assert(field->type == FldSwitch);
                  cbl_field_t *parent = parent_of(field);
                  size_t value = field->data.upsi_mask_of()->value;
                  bitop_t op = field->data.upsi_mask_of()->on_off?
                               bit_on_op : bit_off_op;
                   parser_bitop((yyval.refer)->cond(), parent, op, value );
                }
#line 23184 "parse.cc"
    break;

  case 760: /* simple_cond: expr is "class name"  */
#line 6006 "parse.y"
                {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  // symbol_find does not find FldClass symbols
                  struct symbol_elem_t *e = symbol_field(PROGRAM, 0, (yyvsp[0].string));
                  parser_setop((yyval.refer)->cond(), (yyvsp[-2].refer)->field, is_op, cbl_field_of(e));
                }
#line 23195 "parse.cc"
    break;

  case 761: /* simple_cond: expr NOT "class name"  */
#line 6012 "parse.y"
                                            {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  // symbol_find does not find FldClass symbols
                  struct symbol_elem_t *e = symbol_field(PROGRAM, 0, (yyvsp[0].string));
                  parser_setop((yyval.refer)->cond(), (yyvsp[-2].refer)->field, is_op, cbl_field_of(e));
                  parser_logop((yyval.refer)->cond(), NULL, not_op, (yyval.refer)->cond());
                }
#line 23207 "parse.cc"
    break;

  case 762: /* simple_cond: expr is OMITTED  */
#line 6020 "parse.y"
                {
                  auto lhs = cbl_refer_t((yyvsp[-2].refer)->field);
                  lhs.addr_of = true;
                  auto rhs = cbl_field_of(symbol_field(0,0, "NULLS"));
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  parser_relop((yyval.refer)->field, lhs, eq_op, rhs);
                }
#line 23219 "parse.cc"
    break;

  case 763: /* simple_cond: expr NOT OMITTED  */
#line 6028 "parse.y"
                {
                  auto lhs = cbl_refer_t((yyvsp[-2].refer)->field);
                  lhs.addr_of = true;
                  auto rhs = cbl_field_of(symbol_field(0,0, "NULLS"));
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  parser_relop((yyval.refer)->field, lhs, ne_op, rhs);
                }
#line 23231 "parse.cc"
    break;

  case 764: /* simple_cond: expr posneg  */
#line 6035 "parse.y"
                                {
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  relop_t op = static_cast<relop_t>((yyvsp[0].number));
                  cbl_field_t *zero = constant_of(constant_index(ZERO));
                  parser_relop((yyval.refer)->cond(), *(yyvsp[-1].refer), op, zero);
                }
#line 23242 "parse.cc"
    break;

  case 765: /* simple_cond: scalar88  */
#line 6041 "parse.y"
                         {
                  // copy the subscripts and set the parent field
                  cbl_refer_t parent = *(yyvsp[0].refer);
                  parent.field = parent_of((yyvsp[0].refer)->field);
                  if( !parent.field ) {
                    cbl_internal_error("Type 88 has no referent");
                    YYERROR;
                  }
                  (yyval.refer) = new_reference(new_temporary(FldConditional));
                  (yyval.refer)->field->parent = field_index((yyvsp[0].refer)->field);
                  parser_relop((yyval.refer)->cond(), parent, eq_op, *(yyvsp[0].refer));
                }
#line 23259 "parse.cc"
    break;

  case 766: /* kind_of_name: expr might_be variable_type  */
#line 6056 "parse.y"
                {
                  (yyval.field) = new_temporary(FldConditional);
                  enum classify_t type = classify_of((yyvsp[0].number));
                  assert(type != ClassInvalidType );

                  parser_classify( (yyval.field), *(yyvsp[-2].refer), type );
                  if( (yyvsp[-1].number) == NOT ) {
                    parser_logop((yyval.field), NULL, not_op, (yyval.field));
                  }
                }
#line 23274 "parse.cc"
    break;

  case 767: /* bool_expr: log_expr  */
#line 6068 "parse.y"
                         { (yyval.refer) = new_reference((yyvsp[0].log_expr_t)->resolve()); }
#line 23280 "parse.cc"
    break;

  case 768: /* log_expr: log_term  */
#line 6071 "parse.y"
                         { (yyval.log_expr_t) = new log_expr_t((yyvsp[0].field)); }
#line 23286 "parse.cc"
    break;

  case 769: /* log_expr: log_expr OR rel_abbr  */
#line 6073 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[0].field));
		}
#line 23295 "parse.cc"
    break;

  case 770: /* log_expr: log_expr OR log_expr  */
#line 6078 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  assert( ! (yyvsp[0].log_expr_t)->unresolved() ); // what to do?
		  (yyval.log_expr_t)->or_term((yyvsp[0].log_expr_t)->and_term());
		}
#line 23305 "parse.cc"
    break;

  case 771: /* log_expr: log_expr AND rel_abbr  */
#line 6084 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[0].field));
		}
#line 23314 "parse.cc"
    break;

  case 772: /* log_expr: log_expr AND log_expr  */
#line 6089 "parse.y"
                {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  assert( ! (yyvsp[0].log_expr_t)->unresolved() ); // what to do?
		  (yyval.log_expr_t)->and_term((yyvsp[0].log_expr_t)->and_term());
                }
#line 23324 "parse.cc"
    break;

  case 773: /* log_term: '(' log_expr ')'  */
#line 6096 "parse.y"
                                 {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[-1].log_expr_t)->resolve();
		}
#line 23333 "parse.cc"
    break;

  case 774: /* log_term: NOT '(' log_expr ')'  */
#line 6100 "parse.y"
                                     {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[-1].log_expr_t)->resolve();
		  parser_logop((yyval.field), NULL, not_op, (yyval.field));
		}
#line 23343 "parse.cc"
    break;

  case 776: /* log_term: simple_cond  */
#line 6106 "parse.y"
                                {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[0].refer)->cond();
		}
#line 23352 "parse.cc"
    break;

  case 777: /* log_term: NOT simple_cond  */
#line 6110 "parse.y"
                                {
		  current.antecedent_reset();
		  (yyval.field) = (yyvsp[0].refer)->cond();
		  parser_logop((yyval.field), NULL, not_op, (yyval.field));
		}
#line 23362 "parse.cc"
    break;

  case 778: /* rel_expr: rel_lhs rel_term  */
#line 6118 "parse.y"
                {
		  rel_part_t& ante = current.antecedent();
		  if( (yyvsp[0].rel_term_t).invert ) {
		    error_msg((yylsp[0]), "NOT %s is invalid, cannot negate RHS",
			     ante.operand->field->name);
		  }
		  auto op = ante.relop;
		  if( ante.invert ) {
		    op = relop_invert(op);
		    ante.invert = false;
		  }
		  auto cond = new_temporary(FldConditional);
		  parser_relop( cond, *ante.operand, op, *(yyvsp[0].rel_term_t).term );
		  (yyval.field) = cond;
                }
#line 23382 "parse.cc"
    break;

  case 779: /* rel_expr: rel_lhs '(' rel_abbrs ')'  */
#line 6133 "parse.y"
                                               {
		  (yyval.field) = (yyvsp[-1].log_expr_t)->resolve();
		}
#line 23390 "parse.cc"
    break;

  case 780: /* rel_abbrs: rel_abbr  */
#line 6138 "parse.y"
                         { (yyval.log_expr_t) = new log_expr_t((yyvsp[0].field)); }
#line 23396 "parse.cc"
    break;

  case 781: /* rel_abbrs: '(' rel_abbrs ')'  */
#line 6139 "parse.y"
                                  {
		  (yyval.log_expr_t) = (yyvsp[-1].log_expr_t);
		  (yyval.log_expr_t)->resolve();

		}
#line 23406 "parse.cc"
    break;

  case 782: /* rel_abbrs: rel_abbrs OR rel_abbr  */
#line 6144 "parse.y"
                                           {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[0].field));
		}
#line 23415 "parse.cc"
    break;

  case 783: /* rel_abbrs: rel_abbrs OR '(' rel_abbr ')'  */
#line 6148 "parse.y"
                                                   {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[-1].field));
		}
#line 23424 "parse.cc"
    break;

  case 784: /* rel_abbrs: rel_abbrs AND rel_abbr  */
#line 6152 "parse.y"
                                            {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[0].field));
		}
#line 23433 "parse.cc"
    break;

  case 785: /* rel_abbrs: rel_abbrs AND '(' rel_abbr ')'  */
#line 6156 "parse.y"
                                                    {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[-1].field));
		}
#line 23442 "parse.cc"
    break;

  case 786: /* rel_lhs: rel_term relop  */
#line 6162 "parse.y"
                                    {
		  // no value, just set current antecedent
		  auto op   = relop_of((yyvsp[0].number));
		  auto ante = new rel_part_t((yyvsp[-1].rel_term_t).term, op, (yyvsp[-1].rel_term_t).invert);
		  current.antecedent(*ante);
		}
#line 23453 "parse.cc"
    break;

  case 787: /* rel_abbr: rel_term  */
#line 6170 "parse.y"
                         {
		  static rel_part_t ante;
		  ante = current.antecedent();
		  if( ! ante.operand ) {
		      error_msg((yylsp[0]), "'AND %s' invalid because "
				"LHS is not a relation condition",
				name_of((yyvsp[0].rel_term_t).term->field) );
		    YYERROR;
		  }
		  assert(ante.has_relop);
		  if( (yyvsp[0].rel_term_t).invert ) ante.relop = relop_invert(ante.relop);
		  auto cond = new_temporary(FldConditional);
		  parser_relop(cond, *ante.operand, ante.relop, *(yyvsp[0].rel_term_t).term);
		  (yyval.field) = cond;
		}
#line 23473 "parse.cc"
    break;

  case 788: /* rel_abbr: relop rel_term  */
#line 6185 "parse.y"
                               {
		  static rel_part_t ante;
		  if( (yyvsp[0].rel_term_t).invert ) {
		    error_msg((yylsp[0]), "%s NOT %s is invalid",
			     keyword_str((yyvsp[-1].number)),
		             name_of((yyvsp[0].rel_term_t).term->field));
		  }
		  auto op( relop_of((yyvsp[-1].number)) );
		  ante = current.antecedent().relop_set(op);
		  if( ! ante.operand ) {
		      error_msg((yylsp[-1]), "AND %s invalid because "
				"LHS is not a relation condition",
				name_of((yyvsp[0].rel_term_t).term->field) );
		    YYERROR;
		  }
		  auto cond = new_temporary(FldConditional);
		  parser_relop(cond, *ante.operand, ante.relop, *(yyvsp[0].rel_term_t).term);
		  (yyval.field) = cond;
		}
#line 23497 "parse.cc"
    break;

  case 790: /* rel_term1: all LITERAL  */
#line 6210 "parse.y"
                {
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                  (yyval.rel_term_t).term->all = (yyvsp[-1].boolean);
                }
#line 23507 "parse.cc"
    break;

  case 791: /* rel_term1: all spaces_etc  */
#line 6216 "parse.y"
                {
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(constant_of(constant_index((yyvsp[0].number))));
                  (yyval.rel_term_t).term->all = (yyvsp[-1].boolean);
                }
#line 23517 "parse.cc"
    break;

  case 792: /* rel_term1: all NULLS  */
#line 6222 "parse.y"
                {
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(constant_of(constant_index(NULLS)));
                  (yyval.rel_term_t).term->all = (yyvsp[-1].boolean);
                }
#line 23527 "parse.cc"
    break;

  case 793: /* rel_term1: ALL ZERO  */
#line 6228 "parse.y"
                { // ZERO without ALL comes from expr, from num_term.
		  (yyval.rel_term_t).invert = false;
                  (yyval.rel_term_t).term = new_reference(constant_of(constant_index(ZERO)));
                  (yyval.rel_term_t).term->all = true;
                }
#line 23537 "parse.cc"
    break;

  case 794: /* rel_term1: expr  */
#line 6233 "parse.y"
                     {
		  (yyval.rel_term_t).invert = false;
		  (yyval.rel_term_t).term = (yyvsp[0].refer);
		}
#line 23546 "parse.cc"
    break;

  case 795: /* rel_term1: NOT rel_term  */
#line 6237 "parse.y"
                             {
		  (yyval.rel_term_t) = (yyvsp[0].rel_term_t);
		  (yyval.rel_term_t).invert = true;
		}
#line 23555 "parse.cc"
    break;

  case 797: /* expr_term: expr_term '+' num_term  */
#line 6246 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '+', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 23563 "parse.cc"
    break;

  case 798: /* expr_term: expr_term '-' num_term  */
#line 6250 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '-', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 23571 "parse.cc"
    break;

  case 800: /* num_term: num_term '*' value  */
#line 6257 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '*', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 23579 "parse.cc"
    break;

  case 801: /* num_term: num_term '/' value  */
#line 6261 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '/', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 23587 "parse.cc"
    break;

  case 803: /* value: value POW factor  */
#line 6268 "parse.y"
                {
                  if( ((yyval.refer) = ast_op((yyvsp[-2].refer), '^', (yyvsp[0].refer))) == NULL  ) YYERROR;
                }
#line 23595 "parse.cc"
    break;

  case 804: /* value: '-' value  */
#line 6271 "parse.y"
                                          { (yyval.refer) = negate( (yyvsp[0].refer) );}
#line 23601 "parse.cc"
    break;

  case 805: /* value: '+' factor  */
#line 6272 "parse.y"
                                     { (yyval.refer) = (yyvsp[0].refer);}
#line 23607 "parse.cc"
    break;

  case 807: /* factor: '(' expr ')'  */
#line 6276 "parse.y"
                             { (yyval.refer) = (yyvsp[-1].refer); }
#line 23613 "parse.cc"
    break;

  case 808: /* factor: num_value  */
#line 6277 "parse.y"
                          { (yyval.refer) = (yyvsp[0].refer); }
#line 23619 "parse.cc"
    break;

  case 810: /* if_impl: if_verb if_test if_body  */
#line 6284 "parse.y"
                {
                  parser_fi();
                }
#line 23627 "parse.cc"
    break;

  case 811: /* if_verb: IF  */
#line 6288 "parse.y"
                   { statement_begin((yylsp[0]), IF); }
#line 23633 "parse.cc"
    break;

  case 812: /* if_test: bool_expr then  */
#line 6291 "parse.y"
                {
		  if( ! is_conditional((yyvsp[-1].refer)) ) {
		    error_msg((yylsp[-1]), "%s is not a Boolean expression",
			     name_of((yyvsp[-1].refer)->field) );
		    YYERROR;
		  }
                  parser_if( (yyvsp[-1].refer)->cond() );
                }
#line 23646 "parse.cc"
    break;

  case 813: /* if_body: next_statements  */
#line 6302 "parse.y"
                {
                  parser_else();
                }
#line 23654 "parse.cc"
    break;

  case 814: /* $@16: %empty  */
#line 6305 "parse.y"
                                     {
                  location_set((yylsp[0]));
                  parser_else();
                }
#line 23663 "parse.cc"
    break;

  case 817: /* next_statements: NEXT SENTENCE  */
#line 6313 "parse.y"
                {
                  next_sentence = label_add(LblNone, "next_sentence", 0);
                  parser_label_goto(next_sentence);
                }
#line 23672 "parse.cc"
    break;

  case 820: /* evaluate: eval_verb eval_subjects eval_switch end_evaluate  */
#line 6323 "parse.y"
                                                                 {
		  auto& ev( eval_stack.current() );
		  parser_label_label(ev.when());
		  parser_label_label(ev.done());
                  eval_stack.free();
		}
#line 23683 "parse.cc"
    break;

  case 821: /* eval_verb: EVALUATE  */
#line 6330 "parse.y"
                         {
                  statement_begin((yylsp[0]), EVALUATE);
		  eval_stack.alloc();
                }
#line 23692 "parse.cc"
    break;

  case 824: /* eval_subject: eval_subject1  */
#line 6339 "parse.y"
                              {
		  auto& ev( eval_stack.current() );
		  ev.append(*(yyvsp[0].refer));
		}
#line 23701 "parse.cc"
    break;

  case 827: /* eval_subject1: true_false  */
#line 6347 "parse.y"
                {
                  static cbl_field_t *zero = constant_of(constant_index(ZERO));
                  enum relop_t op = (yyvsp[0].number) == TRUE_kw? eq_op : ne_op;
                  (yyval.refer) = new cbl_refer_t( new_temporary(FldConditional) );
                  parser_relop((yyval.refer)->field, zero, op, zero);
                }
#line 23712 "parse.cc"
    break;

  case 829: /* $@17: %empty  */
#line 6356 "parse.y"
                                      {
		  auto& ev( eval_stack.current() );
		  ev.write_when_label();
		}
#line 23721 "parse.cc"
    break;

  case 833: /* eval_case: eval_objects statements  */
#line 6367 "parse.y"
                                                  {
		  auto& ev( eval_stack.current() );
		  parser_label_goto( ev.done() );
		  ev.rewind();
		}
#line 23731 "parse.cc"
    break;

  case 834: /* eval_case: eval_objects NEXT SENTENCE  */
#line 6373 "parse.y"
                {
		  auto& ev( eval_stack.current() );
		  ev.write_when_label();
                  next_sentence = label_add(LblNone, "next_sentence", 0);
                  parser_label_goto(next_sentence);
                }
#line 23742 "parse.cc"
    break;

  case 835: /* eval_objects: eval_whens  */
#line 6381 "parse.y"
                           {
		  auto& ev( eval_stack.current() );
		  // Place the object's Yeah label before the statements.
		  ev.write_yeah_label();
		}
#line 23752 "parse.cc"
    break;

  case 838: /* $@18: %empty  */
#line 6391 "parse.y"
                     {
		  auto& ev( eval_stack.current() );
		  ev.write_when_label();
		}
#line 23761 "parse.cc"
    break;

  case 839: /* eval_when: WHEN $@18 eval_obj_cols  */
#line 6395 "parse.y"
                                        { // all TRUE, go to statements
		  auto& ev( eval_stack.current() );
		  parser_label_goto(ev.yeah());
		  auto subj( ev.subject() );
		  if( subj ) {
		    error_msg((yylsp[-1]), "WHEN clause incomplete, %zu of %zu evaluated",
			     ev.object_count(), ev.subject_count());
		  }
		  ev.rewind();
		}
#line 23776 "parse.cc"
    break;

  case 843: /* eval_obj_col: ANY  */
#line 6412 "parse.y"
                     {
		  auto& ev( eval_stack.current() );
		  if( ! ev.decide(ANY) ) {
		    error_msg((yylsp[0]), "WHEN 'ANY' phrase exceeds subject set count of %zu",
			     ev.subject_count());
		    YYERROR;
		  }
                }
#line 23789 "parse.cc"
    break;

  case 844: /* eval_obj_col: true_false  */
#line 6420 "parse.y"
                           {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yyloc), "WHEN '%s' phrase exceeds subject set count of %zu",
			     keyword_str((yyvsp[0].number)), ev.subject_count());
		    YYERROR;
		  }
		  if( ! is_conditional( subj ) ) {
		    error_msg((yylsp[0]), "subject %s, type %s, "
			     "cannot be compared to TRUE/FALSE",
			     subj->name, 3 + cbl_field_type_str(subj->type) );
		  }
		  ev.decide((yyvsp[0].number));
                }
#line 23809 "parse.cc"
    break;

  case 845: /* eval_obj_col: eval_posneg  */
#line 6435 "parse.y"
                                {
                  relop_t op = static_cast<relop_t>((yyvsp[0].number));
                  cbl_field_t *zero = constant_of(constant_index(ZERO));
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[0]), "WHEN '%s' phrase exceeds subject set count of %zu",
			     relop_str(op), ev.subject_count());
		    YYERROR;
		  }
		  ev.decide(op, zero, false);
                }
#line 23826 "parse.cc"
    break;

  case 846: /* eval_obj_col: bool_expr  */
#line 6447 "parse.y"
                          {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[0]), "WHEN CONDITIONAL phrase exceeds "
			     "subject set count of %zu",
			     ev.subject_count());
		    YYERROR;
		  }
		  if( ! is_conditional( subj ) ) {
		    error_msg((yylsp[0]), "subject %s, type %s, "
			      "cannot be compared to conditional expression",
			      subj->name, 3 + cbl_field_type_str(subj->type) );
		  }
		  ev.decide(*(yyvsp[0].refer), false);
                }
#line 23847 "parse.cc"
    break;

  case 847: /* eval_obj_col: eval_abbrs  */
#line 6463 "parse.y"
                            {
		  auto& ev( eval_stack.current() );
		  ev.decided( (yyvsp[0].log_expr_t)->resolve() );
                }
#line 23856 "parse.cc"
    break;

  case 848: /* eval_obj_col: rel_term THRU rel_term  */
#line 6467 "parse.y"
                                                        {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[-2]), "WHEN %s THRU %s phrase exceeds "
			     "subject set count of %zu",
			     (yyvsp[-2].rel_term_t).term->name(), (yyvsp[0].rel_term_t).term->name(), ev.subject_count());
		    YYERROR;
		  }
		  if( is_conditional((yyvsp[-2].rel_term_t).term) || is_conditional((yyvsp[0].rel_term_t).term) ) {
		    error_msg((yylsp[-2]), "THRU with boolean operand");
		  }
		  if( (yyvsp[0].rel_term_t).invert ) {
		    error_msg((yylsp[0]), "NOT %s is invalid with THRU",
			     name_of((yyvsp[0].rel_term_t).term->field));
		  }
		  ev.decide(*(yyvsp[-2].rel_term_t).term, *(yyvsp[0].rel_term_t).term, (yyvsp[-2].rel_term_t).invert);
                }
#line 23879 "parse.cc"
    break;

  case 849: /* eval_obj_col: rel_term ELSE  */
#line 6486 "parse.y"
                {
		  error_msg((yylsp[0]), "ELSE not valid in WHEN");
		  YYERROR;
		}
#line 23888 "parse.cc"
    break;

  case 850: /* eval_posneg: POSITIVE  */
#line 6491 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? le_op : gt_op; }
#line 23894 "parse.cc"
    break;

  case 851: /* eval_posneg: NEGATIVE  */
#line 6492 "parse.y"
                         { (yyval.number) = (yyvsp[0].number) == NOT? ge_op : lt_op; }
#line 23900 "parse.cc"
    break;

  case 852: /* eval_abbrs: rel_term  */
#line 6495 "parse.y"
                            {
		  auto& ev( eval_stack.current() );
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[0]), "WHEN %qs phrase exceeds "
			     "subject set count of %zu",
                              nice_name_of((yyvsp[0].rel_term_t).term->field), ev.subject_count());
		    YYERROR;
		  }
		  if( ! ev.compatible((yyvsp[0].rel_term_t).term->field) ) {
		    auto obj((yyvsp[0].rel_term_t).term->field);
		    error_msg((yylsp[0]), "subject %s, type %s, "
                              "cannot be compared %s, type %s",
                              subj->name, 3 + cbl_field_type_str(subj->type),
			      obj->name,  3 + cbl_field_type_str(obj->type) );
		  }
		  auto result = ev.compare(*(yyvsp[0].rel_term_t).term);
		  if( ! result ) YYERROR;
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop(result, nullptr, not_op, result);
		  }
		  (yyval.log_expr_t) =  new log_expr_t(result);
                }
#line 23928 "parse.cc"
    break;

  case 853: /* eval_abbrs: relop rel_term  */
#line 6518 "parse.y"
                                  {
		  auto& ev( eval_stack.current() );
		  relop_t relop(relop_of((yyvsp[-1].number)));
		  ev.object_relop(relop);
		  auto subj( ev.subject() );
		  if( !subj ) {
		    error_msg((yylsp[-1]), "WHEN %s %s phrase exceeds "
			     "subject set count of %zu",
			     relop_str(relop_of((yyvsp[-1].number))), (yyvsp[0].rel_term_t).term->name(), ev.subject_count());
		    YYERROR;
		  }
		  if( ! ev.compatible((yyvsp[0].rel_term_t).term->field) ) {
		    auto obj((yyvsp[0].rel_term_t).term->field);
		    error_msg((yylsp[-1]), "subject %s, type %s, "
			     "cannot be compared %s, type %s",
			     subj->name, 3 + cbl_field_type_str(subj->type),
			     obj->name,	 3 + cbl_field_type_str(obj->type) );
		  }
		  if( is_conditional(ev.subject()) ) {
		    auto obj((yyvsp[0].rel_term_t).term->field);
		    error_msg((yylsp[-1]), "subject %s, type %s, "
			     "cannot be %s %s, type %s",
			     subj->name, 3 + cbl_field_type_str(subj->type),
			      relop_str(relop_of((yyvsp[-1].number))),
			     obj->name,	 3 + cbl_field_type_str(obj->type) );
		  }
		  auto result = ev.compare(relop, *(yyvsp[0].rel_term_t).term);
		  if( ! result ) YYERROR;
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop(result, nullptr, not_op, result);
		  }
		  (yyval.log_expr_t) = new log_expr_t(result);
		}
#line 23966 "parse.cc"
    break;

  case 854: /* eval_abbrs: '(' eval_abbrs ')'  */
#line 6551 "parse.y"
                                   {
		  (yyval.log_expr_t) = (yyvsp[-1].log_expr_t);
		  (yyval.log_expr_t)->resolve();
		}
#line 23975 "parse.cc"
    break;

  case 855: /* eval_abbrs: eval_abbrs OR eval_abbr  */
#line 6555 "parse.y"
                                             {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[0].field));
		}
#line 23984 "parse.cc"
    break;

  case 856: /* eval_abbrs: eval_abbrs OR '(' eval_abbr ')'  */
#line 6559 "parse.y"
                                                     {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->or_term((yyvsp[-1].field));
		}
#line 23993 "parse.cc"
    break;

  case 857: /* eval_abbrs: eval_abbrs AND eval_abbr  */
#line 6563 "parse.y"
                                              {
		  (yyval.log_expr_t) = (yyvsp[-2].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[0].field));
		}
#line 24002 "parse.cc"
    break;

  case 858: /* eval_abbrs: eval_abbrs AND '(' eval_abbr ')'  */
#line 6567 "parse.y"
                                                      {
		  (yyval.log_expr_t) = (yyvsp[-4].log_expr_t);
		  (yyval.log_expr_t)->and_term((yyvsp[-1].field));
		}
#line 24011 "parse.cc"
    break;

  case 859: /* eval_abbr: rel_term  */
#line 6573 "parse.y"
                            {
		  auto& ev( eval_stack.current() );
		  relop_t relop(ev.object_relop());
		  auto subj( ev.subject() );
		  assert( subj );
		  (yyval.field) = ev.compare(relop, *(yyvsp[0].rel_term_t).term);
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop((yyval.field), nullptr, not_op, (yyval.field));
		  }
                }
#line 24026 "parse.cc"
    break;

  case 860: /* eval_abbr: relop rel_term  */
#line 6583 "parse.y"
                                  {
		  auto& ev( eval_stack.current() );
		  relop_t relop(relop_of((yyvsp[-1].number)));
		  ev.object_relop(relop);
		  (yyval.field) = ev.compare(relop, *(yyvsp[0].rel_term_t).term);
		  if( (yyvsp[0].rel_term_t).invert ) {
		    parser_logop((yyval.field), nullptr, not_op, (yyval.field));
		  }
                }
#line 24040 "parse.cc"
    break;

  case 863: /* true_false: "True"  */
#line 6598 "parse.y"
                         { (yyval.number) = TRUE_kw; }
#line 24046 "parse.cc"
    break;

  case 864: /* true_false: "False"  */
#line 6599 "parse.y"
                         { (yyval.number) = FALSE_kw; }
#line 24052 "parse.cc"
    break;

  case 865: /* scalar: tableref  */
#line 6602 "parse.y"
                         {
		  // Check for missing subscript; others already checked.
                  if( (yyvsp[0].refer)->nsubscript() == 0 && 0 < dimensions((yyvsp[0].refer)->field) ) {
                    subscript_dimension_error((yylsp[0]), 0, (yyval.refer));
                  }
		}
#line 24063 "parse.cc"
    break;

  case 866: /* tableref: tableish  */
#line 6610 "parse.y"
                         {
		  // tableref is used by SORT.  It may name a table without subscripts.
		  (yyval.refer) = (yyvsp[0].refer);
		  (yyval.refer)->loc = (yylsp[0]);
		  if( (yyval.refer)->is_table_reference() ) {
                    if( (yyval.refer)->nsubscript() != dimensions((yyval.refer)->field) ) {
                      subscript_dimension_error((yylsp[0]), (yyval.refer)->nsubscript(), (yyval.refer));
		      YYERROR;
		    }
		  }
		}
#line 24079 "parse.cc"
    break;

  case 867: /* tableish: name subscripts refmod  */
#line 6622 "parse.y"
                {
		  assert(yychar != LPAREN);
                  (yyval.refer) = new cbl_refer_t((yyvsp[-2].field));
                  (yyval.refer)->subscripts_set((yyvsp[-1].refers)->refers);
                  literal_subscripts_valid( (yylsp[-1]), *(yyval.refer) );
                  (yyval.refer)->refmod = cbl_span_t( (yyvsp[0].refmod_parts).from,
                                           (yyvsp[0].refmod_parts).len );
                  literal_refmod_valid( (yylsp[0]), *(yyval.refer) );
                }
#line 24093 "parse.cc"
    break;

  case 868: /* tableish: name refmod  */
#line 6632 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field));
                  (yyval.refer)->refmod = cbl_span_t( (yyvsp[0].refmod_parts).from,
                                           (yyvsp[0].refmod_parts).len );
                  literal_refmod_valid( (yylsp[0]), *(yyval.refer) );
                }
#line 24104 "parse.cc"
    break;

  case 869: /* tableish: name subscripts  */
#line 6639 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field));
                  (yyval.refer)->subscripts_set((yyvsp[0].refers)->refers);
                  literal_subscripts_valid( (yylsp[0]), *(yyval.refer) );
                }
#line 24114 "parse.cc"
    break;

  case 870: /* tableish: name  */
#line 6645 "parse.y"
                {
		  (yyval.refer) = new cbl_refer_t((yyvsp[0].field));
		}
#line 24122 "parse.cc"
    break;

  case 871: /* refmod: " )" expr ':' expr ')'  */
#line 6651 "parse.y"
                {
		  if( ! require_integer((yylsp[-3]), *(yyvsp[-3].refer)) ) YYERROR;
		  if( ! require_integer((yylsp[-1]), *(yyvsp[-1].refer)) ) YYERROR;
                  (yyval.refmod_parts).from = (yyvsp[-3].refer);
                  (yyval.refmod_parts).len = (yyvsp[-1].refer);
                }
#line 24133 "parse.cc"
    break;

  case 872: /* refmod: " )" expr ':' ')'  */
#line 6658 "parse.y"
                {
		  if( ! require_integer((yylsp[-2]), *(yyvsp[-2].refer)) ) YYERROR;
                  (yyval.refmod_parts).from = (yyvsp[-2].refer);
                  (yyval.refmod_parts).len = nullptr;
                }
#line 24143 "parse.cc"
    break;

  case 873: /* typename: NAME  */
#line 6666 "parse.y"
                {
                  auto e = symbol_typedef(PROGRAM, (yyvsp[0].string));
                  if( ! e ) {
		    error_msg((yylsp[0]), "DATA-ITEM '%s' not found", (yyvsp[0].string) );
                    YYERROR;
                  }
                  (yyval.field) = cbl_field_of(e);
                }
#line 24156 "parse.cc"
    break;

  case 874: /* name: qname  */
#line 6677 "parse.y"
                {
                  build_symbol_map();
		  auto namelocs( name_queue.pop() );
		  auto names( name_queue.namelist_of(namelocs) );
		  auto inner = namelocs.back();
                  if( ((yyval.field) = field_find(names)) == NULL ) {
                    if( procedure_div_e == current_division  ) {
		      error_msg(inner.loc,
				"DATA-ITEM '%s' not found", inner.name );
                      YYERROR;
                    }
                    /*
                     * Insert forward references, starting outermost.
                     */
                    size_t parent = 0;
                    while( ! names.empty() ) {
                      auto name = names.front();
                      names.pop_front();
                      auto e = symbol_field_forward_add(PROGRAM, parent,
                                                        name, (yylsp[0]).first_line);
                      if( !e ) YYERROR;
		      symbol_field_location( symbol_index(e), (yylsp[0]) );
                      parent = symbol_index(e);
                      (yyval.field) = cbl_field_of(e);
                    }
                  }
                  gcc_assert((yyval.field));
                }
#line 24189 "parse.cc"
    break;

  case 875: /* qname: ctx_name  */
#line 6708 "parse.y"
                {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
                }
#line 24197 "parse.cc"
    break;

  case 876: /* qname: qname inof ctx_name  */
#line 6712 "parse.y"
                {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
                }
#line 24205 "parse.cc"
    break;

  case 881: /* context_word: APPLY  */
#line 6724 "parse.y"
                                        { static char s[] ="APPLY";
                                         (yyval.string) = s; }
#line 24212 "parse.cc"
    break;

  case 882: /* context_word: ARGUMENT_NUMBER  */
#line 6726 "parse.y"
                                        { static char s[] ="ARGUMENT-NUMBER";
                                         (yyval.string) = s; }
#line 24219 "parse.cc"
    break;

  case 883: /* context_word: ARGUMENT_VALUE  */
#line 6728 "parse.y"
                                       { static char s[] ="ARGUMENT-VALUE";
                                         (yyval.string) = s; }
#line 24226 "parse.cc"
    break;

  case 884: /* context_word: ARITHMETIC  */
#line 6730 "parse.y"
                                       { static char s[] ="ARITHMETIC";
                                         (yyval.string) = s; }
#line 24233 "parse.cc"
    break;

  case 885: /* context_word: ATTRIBUTE  */
#line 6732 "parse.y"
                                       { static char s[] ="ATTRIBUTE";
                                         (yyval.string) = s; }
#line 24240 "parse.cc"
    break;

  case 886: /* context_word: AUTO  */
#line 6734 "parse.y"
                                       { static char s[] ="AUTO";
                                         (yyval.string) = s; }
#line 24247 "parse.cc"
    break;

  case 887: /* context_word: AUTOMATIC  */
#line 6736 "parse.y"
                                       { static char s[] ="AUTOMATIC";
                                         (yyval.string) = s; }
#line 24254 "parse.cc"
    break;

  case 888: /* context_word: "AWAY-FROM-ZERO"  */
#line 6738 "parse.y"
                                       { static char s[] ="AWAY-FROM-ZERO";
                                         (yyval.string) = s; }
#line 24261 "parse.cc"
    break;

  case 889: /* context_word: "BACKGROUND-COLOR"  */
#line 6740 "parse.y"
                                       { static char s[] ="BACKGROUND-COLOR";
                                         (yyval.string) = s; }
#line 24268 "parse.cc"
    break;

  case 890: /* context_word: BELL  */
#line 6742 "parse.y"
                                       { static char s[] ="BELL";
                                         (yyval.string) = s; }
#line 24275 "parse.cc"
    break;

  case 891: /* context_word: "BINARY-ENCODING"  */
#line 6744 "parse.y"
                                       { static char s[] ="BINARY-ENCODING";
                                         (yyval.string) = s; }
#line 24282 "parse.cc"
    break;

  case 892: /* context_word: BLINK  */
#line 6746 "parse.y"
                                       { static char s[] ="BLINK";
                                         (yyval.string) = s; }
#line 24289 "parse.cc"
    break;

  case 893: /* context_word: "BYTE-LENGTH"  */
#line 6748 "parse.y"
                                       { static char s[] ="BYTE-LENGTH";
                                         (yyval.string) = s; }
#line 24296 "parse.cc"
    break;

  case 894: /* context_word: CAPACITY  */
#line 6750 "parse.y"
                                       { static char s[] ="CAPACITY";
                                         (yyval.string) = s; }
#line 24303 "parse.cc"
    break;

  case 895: /* context_word: CENTER  */
#line 6752 "parse.y"
                                       { static char s[] ="CENTER";
                                         (yyval.string) = s; }
#line 24310 "parse.cc"
    break;

  case 896: /* context_word: CLASSIFICATION  */
#line 6754 "parse.y"
                                       { static char s[] ="CLASSIFICATION";
                                         (yyval.string) = s; }
#line 24317 "parse.cc"
    break;

  case 897: /* context_word: CYCLE  */
#line 6756 "parse.y"
                                       { static char s[] ="CYCLE";
                                         (yyval.string) = s; }
#line 24324 "parse.cc"
    break;

  case 898: /* context_word: "DECIMAL-ENCODING"  */
#line 6758 "parse.y"
                                       { static char s[] ="DECIMAL-ENCODING";
                                         (yyval.string) = s; }
#line 24331 "parse.cc"
    break;

  case 899: /* context_word: EOL  */
#line 6760 "parse.y"
                                       { static char s[] ="EOL";
                                         (yyval.string) = s; }
#line 24338 "parse.cc"
    break;

  case 900: /* context_word: EOS  */
#line 6762 "parse.y"
                                       { static char s[] ="EOS";
                                         (yyval.string) = s; }
#line 24345 "parse.cc"
    break;

  case 901: /* context_word: ENTRY_CONVENTION  */
#line 6764 "parse.y"
                                       { static char s[] ="ENTRY-CONVENTION";
                                         (yyval.string) = s; }
#line 24352 "parse.cc"
    break;

  case 902: /* context_word: ENVIRONMENT_NAME  */
#line 6766 "parse.y"
                                         { static char s[] ="ENVIRONMENT-NAME";
                                         (yyval.string) = s; }
#line 24359 "parse.cc"
    break;

  case 903: /* context_word: ENVIRONMENT_VALUE  */
#line 6768 "parse.y"
                                          { static char s[] ="ENVIRONMENT-VALUE";
                                         (yyval.string) = s; }
#line 24366 "parse.cc"
    break;

  case 904: /* context_word: ERASE  */
#line 6770 "parse.y"
                                       { static char s[] ="ERASE";
                                         (yyval.string) = s; }
#line 24373 "parse.cc"
    break;

  case 905: /* context_word: EXPANDS  */
#line 6772 "parse.y"
                                       { static char s[] ="EXPANDS";
                                         (yyval.string) = s; }
#line 24380 "parse.cc"
    break;

  case 906: /* context_word: FEATURE  */
#line 6774 "parse.y"
                                       { static char s[] ="FEATURE";
                                         (yyval.string) = s; }
#line 24387 "parse.cc"
    break;

  case 907: /* context_word: "FLOAT-BINARY"  */
#line 6776 "parse.y"
                                       { static char s[] ="FLOAT-BINARY";
                                         (yyval.string) = s; }
#line 24394 "parse.cc"
    break;

  case 908: /* context_word: "FLOAT-DECIMAL"  */
#line 6778 "parse.y"
                                       { static char s[] ="FLOAT-DECIMAL";
                                         (yyval.string) = s; }
#line 24401 "parse.cc"
    break;

  case 909: /* context_word: FOREGROUND_COLOR  */
#line 6780 "parse.y"
                                       { static char s[] ="FOREGROUND-COLOR";
                                         (yyval.string) = s; }
#line 24408 "parse.cc"
    break;

  case 910: /* context_word: FOREVER  */
#line 6782 "parse.y"
                                       { static char s[] ="FOREVER";
                                         (yyval.string) = s; }
#line 24415 "parse.cc"
    break;

  case 911: /* context_word: FULL  */
#line 6784 "parse.y"
                                       { static char s[] ="FULL";
                                         (yyval.string) = s; }
#line 24422 "parse.cc"
    break;

  case 912: /* context_word: "HIGH-ORDER-LEFT"  */
#line 6786 "parse.y"
                                       { static char s[] ="HIGH-ORDER-LEFT";
                                         (yyval.string) = s; }
#line 24429 "parse.cc"
    break;

  case 913: /* context_word: "HIGH-ORDER-RIGHT"  */
#line 6788 "parse.y"
                                       { static char s[] ="HIGH-ORDER-RIGHT";
                                         (yyval.string) = s; }
#line 24436 "parse.cc"
    break;

  case 914: /* context_word: HIGHLIGHT  */
#line 6790 "parse.y"
                                       { static char s[] ="HIGHLIGHT";
                                         (yyval.string) = s; }
#line 24443 "parse.cc"
    break;

  case 915: /* context_word: IGNORING  */
#line 6792 "parse.y"
                                       { static char s[] ="IGNORING";
                                         (yyval.string) = s; }
#line 24450 "parse.cc"
    break;

  case 916: /* context_word: IMPLEMENTS  */
#line 6794 "parse.y"
                                       { static char s[] ="IMPLEMENTS";
                                         (yyval.string) = s; }
#line 24457 "parse.cc"
    break;

  case 917: /* context_word: INITIALIZED  */
#line 6796 "parse.y"
                                       { static char s[] ="INITIALIZED";
                                         (yyval.string) = s; }
#line 24464 "parse.cc"
    break;

  case 918: /* context_word: INTERMEDIATE  */
#line 6798 "parse.y"
                                       { static char s[] ="INTERMEDIATE";
                                         (yyval.string) = s; }
#line 24471 "parse.cc"
    break;

  case 919: /* context_word: INTRINSIC  */
#line 6800 "parse.y"
                                       { static char s[] ="INTRINSIC";
                                         (yyval.string) = s; }
#line 24478 "parse.cc"
    break;

  case 920: /* context_word: "LC-ALL"  */
#line 6802 "parse.y"
                                       { static char s[] ="LC_ALL";
                                         (yyval.string) = s; }
#line 24485 "parse.cc"
    break;

  case 921: /* context_word: "LC-COLLATE"  */
#line 6804 "parse.y"
                                       { static char s[] ="LC_COLLATE";
                                         (yyval.string) = s; }
#line 24492 "parse.cc"
    break;

  case 922: /* context_word: "LC-CTYPE"  */
#line 6806 "parse.y"
                                       { static char s[] ="LC_CTYPE";
                                         (yyval.string) = s; }
#line 24499 "parse.cc"
    break;

  case 923: /* context_word: "LC-MESSAGES"  */
#line 6808 "parse.y"
                                       { static char s[] ="LC_MESSAGES";
                                         (yyval.string) = s; }
#line 24506 "parse.cc"
    break;

  case 924: /* context_word: "LC-MONETARY"  */
#line 6810 "parse.y"
                                       { static char s[] ="LC_MONETARY";
                                         (yyval.string) = s; }
#line 24513 "parse.cc"
    break;

  case 925: /* context_word: "LC-NUMERIC"  */
#line 6812 "parse.y"
                                       { static char s[] ="LC_NUMERIC";
                                         (yyval.string) = s; }
#line 24520 "parse.cc"
    break;

  case 926: /* context_word: "LC-TIME"  */
#line 6814 "parse.y"
                                       { static char s[] ="LC_TIME";
                                         (yyval.string) = s; }
#line 24527 "parse.cc"
    break;

  case 927: /* context_word: LOWLIGHT  */
#line 6816 "parse.y"
                                       { static char s[] ="LOWLIGHT";
                                         (yyval.string) = s; }
#line 24534 "parse.cc"
    break;

  case 928: /* context_word: MANUAL  */
#line 6818 "parse.y"
                                       { static char s[] ="MANUAL";
                                         (yyval.string) = s; }
#line 24541 "parse.cc"
    break;

  case 929: /* context_word: MULTIPLE  */
#line 6820 "parse.y"
                                       { static char s[] ="MULTIPLE";
                                         (yyval.string) = s; }
#line 24548 "parse.cc"
    break;

  case 930: /* context_word: "NEAREST-AWAY-FROM-ZERO"  */
#line 6822 "parse.y"
                                       { static char s[] ="NEAREST-AWAY-FROM-ZERO";
                                         (yyval.string) = s; }
#line 24555 "parse.cc"
    break;

  case 931: /* context_word: NEAREST_EVEN  */
#line 6824 "parse.y"
                                       { static char s[] ="NEAREST-EVEN";
                                         (yyval.string) = s; }
#line 24562 "parse.cc"
    break;

  case 932: /* context_word: "NEAREST-EVEN NEAREST-TOWARD-ZERO"  */
#line 6826 "parse.y"
                                       { static char s[] ="NEAREST-TOWARD-ZERO";
                                         (yyval.string) = s; }
#line 24569 "parse.cc"
    break;

  case 933: /* context_word: NONE  */
#line 6828 "parse.y"
                                       { static char s[] ="NONE";
                                         (yyval.string) = s; }
#line 24576 "parse.cc"
    break;

  case 934: /* context_word: NORMAL  */
#line 6830 "parse.y"
                                       { static char s[] ="NORMAL";
                                         (yyval.string) = s; }
#line 24583 "parse.cc"
    break;

  case 935: /* context_word: NUMBERS  */
#line 6832 "parse.y"
                                       { static char s[] ="NUMBERS";
                                         (yyval.string) = s; }
#line 24590 "parse.cc"
    break;

  case 936: /* context_word: ONLY  */
#line 6834 "parse.y"
                                       { static char s[] ="ONLY";
                                         (yyval.string) = s; }
#line 24597 "parse.cc"
    break;

  case 937: /* context_word: PREFIXED  */
#line 6836 "parse.y"
                                       { static char s[] ="PREFIXED";
                                         (yyval.string) = s; }
#line 24604 "parse.cc"
    break;

  case 938: /* context_word: PREVIOUS  */
#line 6838 "parse.y"
                                       { static char s[] ="PREVIOUS";
                                         (yyval.string) = s; }
#line 24611 "parse.cc"
    break;

  case 939: /* context_word: PROHIBITED  */
#line 6840 "parse.y"
                                       { static char s[] ="PROHIBITED";
                                         (yyval.string) = s; }
#line 24618 "parse.cc"
    break;

  case 940: /* context_word: RECURSIVE  */
#line 6842 "parse.y"
                                       { static char s[] ="RECURSIVE";
                                         (yyval.string) = s; }
#line 24625 "parse.cc"
    break;

  case 941: /* context_word: RELATION  */
#line 6844 "parse.y"
                                       { static char s[] ="RELATION";
                                         (yyval.string) = s; }
#line 24632 "parse.cc"
    break;

  case 942: /* context_word: REQUIRED  */
#line 6846 "parse.y"
                                       { static char s[] ="REQUIRED";
                                         (yyval.string) = s; }
#line 24639 "parse.cc"
    break;

  case 943: /* context_word: REVERSE_VIDEO  */
#line 6848 "parse.y"
                                       { static char s[] ="REVERSE-VIDEO";
                                         (yyval.string) = s; }
#line 24646 "parse.cc"
    break;

  case 944: /* context_word: ROUNDING  */
#line 6850 "parse.y"
                                       { static char s[] ="ROUNDING";
                                         (yyval.string) = s; }
#line 24653 "parse.cc"
    break;

  case 945: /* context_word: SECONDS  */
#line 6852 "parse.y"
                                       { static char s[] ="SECONDS";
                                         (yyval.string) = s; }
#line 24660 "parse.cc"
    break;

  case 946: /* context_word: SECURE  */
#line 6854 "parse.y"
                                       { static char s[] ="SECURE";
                                         (yyval.string) = s; }
#line 24667 "parse.cc"
    break;

  case 947: /* context_word: SHORT  */
#line 6856 "parse.y"
                                       { static char s[] ="SHORT";
                                         (yyval.string) = s; }
#line 24674 "parse.cc"
    break;

  case 948: /* context_word: SIGNED_kw  */
#line 6858 "parse.y"
                                       { static char s[] ="SIGNED";
                                         (yyval.string) = s; }
#line 24681 "parse.cc"
    break;

  case 949: /* context_word: "STANDARD-BINARY"  */
#line 6860 "parse.y"
                                       { static char s[] ="STANDARD-BINARY";
                                         (yyval.string) = s; }
#line 24688 "parse.cc"
    break;

  case 950: /* context_word: "STANDARD-DECIMAL"  */
#line 6862 "parse.y"
                                       { static char s[] ="STANDARD-DECIMAL";
                                         (yyval.string) = s; }
#line 24695 "parse.cc"
    break;

  case 951: /* context_word: STATEMENT  */
#line 6864 "parse.y"
                                       { static char s[] ="STATEMENT";
                                         (yyval.string) = s; }
#line 24702 "parse.cc"
    break;

  case 952: /* context_word: STEP  */
#line 6866 "parse.y"
                                       { static char s[] ="STEP";
                                         (yyval.string) = s; }
#line 24709 "parse.cc"
    break;

  case 953: /* context_word: STRONG  */
#line 6868 "parse.y"
                                       { static char s[] ="STRONG";
                                         (yyval.string) = s; }
#line 24716 "parse.cc"
    break;

  case 954: /* context_word: STRUCTURE  */
#line 6870 "parse.y"
                                       { static char s[] ="STRUCTURE";
                                         (yyval.string) = s; }
#line 24723 "parse.cc"
    break;

  case 955: /* context_word: SYMBOL  */
#line 6872 "parse.y"
                                       { static char s[] ="SYMBOL";
                                         (yyval.string) = s; }
#line 24730 "parse.cc"
    break;

  case 956: /* context_word: "TOWARD-GREATER"  */
#line 6874 "parse.y"
                                       { static char s[] ="TOWARD-GREATER";
                                         (yyval.string) = s; }
#line 24737 "parse.cc"
    break;

  case 957: /* context_word: "TOWARD-LESSER"  */
#line 6876 "parse.y"
                                       { static char s[] ="TOWARD-LESSER";
                                         (yyval.string) = s; }
#line 24744 "parse.cc"
    break;

  case 958: /* context_word: TRUNCATION  */
#line 6878 "parse.y"
                                       { static char s[] ="TRUNCATION";
                                         (yyval.string) = s; }
#line 24751 "parse.cc"
    break;

  case 959: /* context_word: "UCS-4"  */
#line 6880 "parse.y"
                                       { static char s[] ="UCS-4";
                                         (yyval.string) = s; }
#line 24758 "parse.cc"
    break;

  case 960: /* context_word: UNDERLINE  */
#line 6882 "parse.y"
                                       { static char s[] ="UNDERLINE";
                                         (yyval.string) = s; }
#line 24765 "parse.cc"
    break;

  case 961: /* context_word: UNSIGNED_kw  */
#line 6884 "parse.y"
                                       { static char s[] ="UNSIGNED";
                                         (yyval.string) = s; }
#line 24772 "parse.cc"
    break;

  case 962: /* context_word: "UTF-8"  */
#line 6886 "parse.y"
                                       { static char s[] ="UTF-8";
                                         (yyval.string) = s; }
#line 24779 "parse.cc"
    break;

  case 963: /* context_word: "UTF-16"  */
#line 6888 "parse.y"
                                       { static char s[] ="UTF-16";
                                         (yyval.string) = s; }
#line 24786 "parse.cc"
    break;

  case 964: /* context_word: YYYYDDD  */
#line 6890 "parse.y"
                                       { static char s[] ="YYYYDDD";
                                         (yyval.string) = s; }
#line 24793 "parse.cc"
    break;

  case 965: /* context_word: YYYYMMDD  */
#line 6892 "parse.y"
                                       { static char s[] ="YYYYMMDD";
                                         (yyval.string) = s; }
#line 24800 "parse.cc"
    break;

  case 966: /* move: MOVE scalar TO move_tgts  */
#line 6897 "parse.y"
                {
                  statement_begin((yylsp[-3]), MOVE);
                  if( (yyvsp[-2].refer)->field->type == FldIndex ) {
                    error_msg((yylsp[-3]), "%qs cannot be MOVEd because it is an %<INDEX%>",
			     name_of((yyvsp[-2].refer)->field) );
                    YYERROR;
                  }
                  if( !parser_move2((yyvsp[0].targets), *(yyvsp[-2].refer)) ) { YYERROR; }
                }
#line 24814 "parse.cc"
    break;

  case 967: /* move: MOVE all literalism TO move_tgts  */
#line 6907 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  struct cbl_refer_t *src = new_reference(new_literal((yyvsp[-2].literal),
                                                                      quoted_e));
                  src->all = (yyvsp[-3].boolean);
                  if( !parser_move2((yyvsp[0].targets), *src) ) { YYERROR; }
                }
#line 24826 "parse.cc"
    break;

  case 968: /* move: MOVE all spaces_etc TO move_tgts  */
#line 6915 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  cbl_field_t *field;
                  auto p = std::find_if( (yyvsp[0].targets)->targets.begin(),
                                         (yyvsp[0].targets)->targets.end(),
                                         [&field]( const auto& num_result ) {
                                             const cbl_refer_t& tgt = num_result.refer;
                                             field = tgt.field;
                                             return is_numeric(tgt.field);
                                            } );

                  if( p != (yyvsp[0].targets)->targets.end() ) {
                    error_msg((yylsp[-2]), "cannot MOVE %s "
			            "to numeric receiving field %s",
			      constant_of(constant_index((yyvsp[-2].number)))->name,
			      field->name );
                    YYERROR;
                  }

                  struct cbl_field_t* src = constant_of(constant_index((yyvsp[-2].number)));
                  if( !parser_move2((yyvsp[0].targets), src) ) { YYERROR; }
                }
#line 24853 "parse.cc"
    break;

  case 969: /* move: MOVE all signed_literal TO move_tgts  */
#line 6938 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  cbl_refer_t src( (yyvsp[-2].field), (yyvsp[-3].boolean));
                  if( !parser_move2((yyvsp[0].targets), src) ) { YYERROR; }
                }
#line 24863 "parse.cc"
    break;

  case 970: /* move: MOVE intrinsic_call TO move_tgts  */
#line 6945 "parse.y"
                {
                  statement_begin((yylsp[-3]), MOVE);
                  if( !parser_move2((yyvsp[0].targets), *(yyvsp[-2].refer)) ) { YYERROR; }
                }
#line 24872 "parse.cc"
    break;

  case 971: /* move: MOVE CORRESPONDING scalar TO scalar  */
#line 6951 "parse.y"
                {
                  statement_begin((yylsp[-4]), MOVE);
                  if( (yyvsp[-2].refer)->field->type != FldGroup ) {
                    error_msg((yylsp[-2]), "%s does not name a group", (yyvsp[-2].refer)->name());
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field->type != FldGroup ) {
                    error_msg((yylsp[0]), "%s does not name a group", (yyvsp[0].refer)->name());
                    YYERROR;
                  }

                  if( !move_corresponding(*(yyvsp[0].refer), *(yyvsp[-2].refer)) ) {
                    yywarn( "%s and %s have no corresponding fields",
                            (yyvsp[-2].refer)->field->name, (yyvsp[0].refer)->field->name );
                  }
                }
#line 24893 "parse.cc"
    break;

  case 972: /* move_tgts: move_tgt  */
#line 6969 "parse.y"
                              {
                  (yyval.targets) = new tgt_list_t;
                  if( (yyvsp[0].refer) ) list_add((yyval.targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 24902 "parse.cc"
    break;

  case 973: /* move_tgts: move_tgts move_tgt  */
#line 6974 "parse.y"
                {
                  if( (yyvsp[0].refer) ) list_add((yyvsp[-1].targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 24910 "parse.cc"
    break;

  case 974: /* move_tgt: scalar  */
#line 6978 "parse.y"
                            {
		  if( is_literal((yyvsp[0].refer)->field) ) {
		    auto litcon = (yyvsp[0].refer)->field->name[0] == '_'? "literal" : "constant";
		    error_msg((yylsp[0]), "%s is a %s", name_of((yyvsp[0].refer)->field), litcon);
		  }
		}
#line 24921 "parse.cc"
    break;

  case 975: /* move_tgt: literal  */
#line 6984 "parse.y"
                        {
		  const auto& field(*(yyvsp[0].field));
		  static char buf[32];
		  const char *value_str( name_of((yyvsp[0].field)) );
		  if( is_numeric((yyvsp[0].field)) )
		  {
		    REAL_VALUE_TYPE val = TREE_REAL_CST (field.data.value_of());
		    int ival = (int)real_to_integer (&val);
		    val = real_value_truncate (TYPE_MODE (float_type_node),
					       val);
		    REAL_VALUE_TYPE rival;
		    real_from_integer (&rival, VOIDmode, ival, SIGNED);
		    if( real_identical (&val, &rival) ) {
		      sprintf(buf, "%d", ival);
		      value_str = buf;
		    }
		  }
		  auto litcon = field.name[0] == '_'? "literal" : "constant";
		  error_msg((yylsp[0]), "%s is a %s", value_str, litcon);
		  (yyval.refer) = NULL;
		}
#line 24947 "parse.cc"
    break;

  case 976: /* move_tgt: error  */
#line 7006 "parse.y"
                {
		  static const char * error_at;
		  if( error_at != yytext ) { // avoid repeated message
		    error_at = yytext;
		    error_msg(first_line_of((yylsp[0])), "invalid receiving operand");
		  }
		  (yyval.refer) = NULL;
                }
#line 24960 "parse.cc"
    break;

  case 977: /* multiply: multiply_impl end_multiply  */
#line 7016 "parse.y"
                                            { ast_multiply((yyvsp[-1].arith)); }
#line 24966 "parse.cc"
    break;

  case 978: /* multiply: multiply_cond end_multiply  */
#line 7017 "parse.y"
                                            { ast_multiply((yyvsp[-1].arith)); }
#line 24972 "parse.cc"
    break;

  case 979: /* multiply_impl: MULTIPLY multiply_body  */
#line 7020 "parse.y"
                {
                  statement_begin((yylsp[-1]), MULTIPLY);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 24981 "parse.cc"
    break;

  case 980: /* multiply_cond: MULTIPLY multiply_body arith_errs  */
#line 7026 "parse.y"
                {
                  statement_begin((yylsp[-2]), MULTIPLY);
                  (yyval.arith) = (yyvsp[-1].arith);
                  (yyval.arith)->on_error = (yyvsp[0].error).on_error;
                  (yyval.arith)->not_error = (yyvsp[0].error).not_error;
                }
#line 24992 "parse.cc"
    break;

  case 983: /* multiply_body: num_operand BY rnames  */
#line 7038 "parse.y"
                {
                  (yyval.arith) = new arith_t(no_giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 25004 "parse.cc"
    break;

  case 984: /* multiply_body: num_operand BY signed_literal  */
#line 7046 "parse.y"
                {
                  error_msg((yylsp[0]), "%s is not a receiving field", name_of((yyvsp[0].field)));
                  YYERROR;
                }
#line 25013 "parse.cc"
    break;

  case 985: /* multiply_body: num_operand BY num_operand GIVING rnames  */
#line 7051 "parse.y"
                {
                  (yyval.arith) = new arith_t(giving_e);
                  (yyval.arith)->A.push_back(*(yyvsp[-4].refer));
                  (yyval.arith)->B.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 25026 "parse.cc"
    break;

  case 986: /* multiply_body: num_operand BY num_operand GIVING signed_literal  */
#line 7060 "parse.y"
                {
                  error_msg((yylsp[0]), "%s is not a receiving field", name_of((yyvsp[0].field)));
                  YYERROR;
                }
#line 25035 "parse.cc"
    break;

  case 987: /* multiply_body: LITERAL  */
#line 7065 "parse.y"
                {
                  error_msg((yylsp[0]), "invalid string operand '%s'", (yyvsp[0].literal).data);
                  YYERROR;
                }
#line 25044 "parse.cc"
    break;

  case 988: /* arith_errs: arith_err statements  */
#line 7072 "parse.y"
                {
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_arith_error_end(tgt);
                }
#line 25055 "parse.cc"
    break;

  case 989: /* arith_errs: arith_errs arith_err statements  */
#line 7079 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-2]), "too many ON ERROR clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-2]), "duplicate ON ERROR clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-2]), "duplicate NOT ON ERROR clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_arith_error_end(tgt);
                }
#line 25087 "parse.cc"
    break;

  case 990: /* arith_err: "SIZE ERROR"  */
#line 7109 "parse.y"
                {
                  assert( (yyvsp[0].number) == ERROR || (yyvsp[0].number) == NOT );
                  (yyval.error).on_error  = NULL;
                  (yyval.error).not_error = NULL;
                  cbl_label_t **ptgt = (yyvsp[0].number) == NOT? &(yyval.error).not_error : &(yyval.error).on_error;
                  if( current.in_compute() ) {
                    *ptgt = (yyvsp[0].number) == NOT?
                      current.compute_not_error() : current.compute_on_error();
                  } else {
                    *ptgt = label_add(LblArith, uniq_label("arith"), (yylsp[0]).first_line);
                  }
		  (*ptgt)->lain = (yylsp[0]).first_line;
                  parser_arith_error( *ptgt );
                }
#line 25106 "parse.cc"
    break;

  case 991: /* relop: '<'  */
#line 7139 "parse.y"
                    { (yyval.number) = '<'; }
#line 25112 "parse.cc"
    break;

  case 992: /* relop: LE  */
#line 7140 "parse.y"
                    { (yyval.number) = LE;  }
#line 25118 "parse.cc"
    break;

  case 993: /* relop: '='  */
#line 7141 "parse.y"
                    { (yyval.number) = '='; }
#line 25124 "parse.cc"
    break;

  case 994: /* relop: NE  */
#line 7142 "parse.y"
                    { (yyval.number) = NE;  }
#line 25130 "parse.cc"
    break;

  case 995: /* relop: GE  */
#line 7143 "parse.y"
                    { (yyval.number) = GE;  }
#line 25136 "parse.cc"
    break;

  case 996: /* relop: '>'  */
#line 7144 "parse.y"
                    { (yyval.number) = '>'; }
#line 25142 "parse.cc"
    break;

  case 997: /* rnames: scalar rounded  */
#line 7148 "parse.y"
                {
                  list_add( rhs, *(yyvsp[-1].refer), (yyvsp[0].opt_round) );
                }
#line 25150 "parse.cc"
    break;

  case 998: /* rnames: rnames scalar rounded  */
#line 7152 "parse.y"
                {
                  cbl_num_result_t arg = { static_cast<cbl_round_t>((yyvsp[0].opt_round)),
                                           *(yyvsp[-1].refer) };
                  rhs.push_back(arg);
                }
#line 25160 "parse.cc"
    break;

  case 999: /* sum: num_operand  */
#line 7159 "parse.y"
                                    { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 25166 "parse.cc"
    break;

  case 1000: /* sum: sum num_operand  */
#line 7160 "parse.y"
                                    { (yyval.refers)->push_back((yyvsp[0].refer)); }
#line 25172 "parse.cc"
    break;

  case 1002: /* num_operand: signed_literal  */
#line 7164 "parse.y"
                               { (yyval.refer) = new_reference((yyvsp[0].field)); }
#line 25178 "parse.cc"
    break;

  case 1006: /* num_value: num_literal  */
#line 7170 "parse.y"
                            { (yyval.refer) = new_reference((yyvsp[0].field)); }
#line 25184 "parse.cc"
    break;

  case 1007: /* num_value: ADDRESS OF scalar  */
#line 7171 "parse.y"
                                  {(yyval.refer) = (yyvsp[0].refer); (yyval.refer)->addr_of = true; }
#line 25190 "parse.cc"
    break;

  case 1008: /* num_value: DETAIL OF scalar  */
#line 7172 "parse.y"
                                 {(yyval.refer) = (yyvsp[0].refer); }
#line 25196 "parse.cc"
    break;

  case 1009: /* num_value: "LENGTH-OF" binary_type  */
#line 7173 "parse.y"
                                            {
                  location_set((yylsp[-1]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[0].number));
		}
#line 25210 "parse.cc"
    break;

  case 1010: /* num_value: "LENGTH-OF" name  */
#line 7182 "parse.y"
                                    {
                  location_set((yylsp[-1]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[0].field)->data.capacity);
                }
#line 25224 "parse.cc"
    break;

  case 1011: /* num_value: "LENGTH-OF" name subscripts  */
#line 7191 "parse.y"
                                                     {
                  location_set((yylsp[-2]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-2]), "LENGTH OF", "ibm");
                  }
                  if( 0 == dimensions((yyvsp[-1].field)) ) {
		    cbl_refer_t r1((yyvsp[-1].field));
		    subscript_dimension_error( (yylsp[0]), (yyvsp[0].refers)->refers.size(), &r1 );
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[-1].field)->data.capacity);
                }
#line 25242 "parse.cc"
    break;

  case 1013: /* cce_expr: cce_expr '+' cce_expr  */
#line 7232 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), PLUS_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 25251 "parse.cc"
    break;

  case 1014: /* cce_expr: cce_expr '-' cce_expr  */
#line 7236 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), MINUS_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 25260 "parse.cc"
    break;

  case 1015: /* cce_expr: cce_expr '*' cce_expr  */
#line 7240 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), MULT_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 25269 "parse.cc"
    break;

  case 1016: /* cce_expr: cce_expr '/' cce_expr  */
#line 7244 "parse.y"
                                      {
                  real_arithmetic (&(yyval.float128), RDIV_EXPR, &(yyvsp[-2].float128), &(yyvsp[0].float128));
                  real_convert (&(yyval.float128), TYPE_MODE (float128_type_node), &(yyval.float128));
                }
#line 25278 "parse.cc"
    break;

  case 1017: /* cce_expr: '+' cce_expr  */
#line 7248 "parse.y"
                                                { (yyval.float128) =  (yyvsp[0].float128); }
#line 25284 "parse.cc"
    break;

  case 1018: /* cce_expr: '-' cce_expr  */
#line 7249 "parse.y"
                                                { (yyval.float128) = real_value_negate (&(yyvsp[0].float128)); }
#line 25290 "parse.cc"
    break;

  case 1019: /* cce_expr: '(' cce_expr ')'  */
#line 7250 "parse.y"
                                           { (yyval.float128) = (yyvsp[-1].float128); }
#line 25296 "parse.cc"
    break;

  case 1020: /* cce_factor: "numeric literal"  */
#line 7253 "parse.y"
                       {
                  /* real_from_string does not allow arbitrary radix.  */
                  // When DECIMAL IS COMMA, commas act as decimal points.
		  gcc_assert((yyvsp[0].numstr).radix == decimal_e);
		  auto p = (yyvsp[0].numstr).string, pend = p + strlen(p);
		  std::replace(p, pend, ',', '.');
		  real_from_string3( &(yyval.float128), (yyvsp[0].numstr).string,
				     TYPE_MODE (float128_type_node) );
                }
#line 25310 "parse.cc"
    break;

  case 1021: /* section_name: NAME section_kw '.'  */
#line 7269 "parse.y"
                {
                  statement_begin((yylsp[-2]), SECTION);
		  (yyval.label) = label_add((yylsp[-2]), LblSection, (yyvsp[-2].string));
                  ast_enter_section((yyval.label));
                  apply_declaratives();
                }
#line 25321 "parse.cc"
    break;

  case 1022: /* @19: %empty  */
#line 7276 "parse.y"
                       {
                  statement_begin((yylsp[-1]), SECTION);
		  (yyval.label) = label_add((yylsp[-1]), LblSection, (yyvsp[-1].string));
                  ast_enter_section((yyval.label));
                  apply_declaratives();
                }
#line 25332 "parse.cc"
    break;

  case 1023: /* section_name: NAME section_kw @19 cdf_use dot  */
#line 7283 "parse.y"
                {
                  (yyval.label) = (yyvsp[-2].label);
                }
#line 25340 "parse.cc"
    break;

  case 1024: /* section_kw: SECTION  */
#line 7289 "parse.y"
                {
                  if( (yyvsp[0].string) ) {
		    if( *(yyvsp[0].string) == '-' ) {
		      error_msg((yylsp[0]), "SECTION segment %qs is negative", (yyvsp[0].string));
                    } else {
		      if( dialect_ibm() ) {
			int sectno;
			sscanf((yyvsp[0].string), "%d", &sectno);
			if( ! (0 <= sectno && sectno <= 99) ) {
			  error_msg((yylsp[0]), "SECTION segment %qs must be 0-99", (yyvsp[0].string));
			} else {
			  if(false) { // stand-in for warning, someday.
			    yywarn("SECTION segment %qs was ignored", (yyvsp[0].string));
			  }
			}
		      } else {
			cbl_unimplemented("SECTION segment %qs is not ISO syntax", (yyvsp[0].string));
		      }
                    }
		  }
                }
#line 25366 "parse.cc"
    break;

  case 1025: /* section_kw: SECTION error  */
#line 7311 "parse.y"
                {
                  error_msg((yylsp[-1]), "unknown section qualifier");
                }
#line 25374 "parse.cc"
    break;

  case 1026: /* stop: STOP RUN exit_with  */
#line 7317 "parse.y"
                {
                  statement_begin((yylsp[-2]), STOP);
                  parser_see_stop_run( *(yyvsp[0].refer), NULL );
                }
#line 25383 "parse.cc"
    break;

  case 1027: /* stop: STOP "numeric literal"  */
#line 7322 "parse.y"
                {
                  statement_begin((yylsp[-1]), STOP);
                  if( ! dialect_ibm() ) {
                    dialect_error((yylsp[0]), "STOP <number> is not ISO syntax,", "ibm");
                    YYERROR;
                  }
                  cbl_refer_t status( new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix) );
                  parser_see_stop_run( status, NULL );
                }
#line 25397 "parse.cc"
    break;

  case 1028: /* stop: STOP LITERAL  */
#line 7332 "parse.y"
                {
                  statement_begin((yylsp[-1]), STOP);
                  const char *name = string_of((yyvsp[0].literal));
                  if( ! name ) {
                    error_msg((yylsp[0]), "'%s' has embedded NUL", (yyvsp[0].literal).data);
                    YYERROR;
                  }
                  parser_see_stop_run( literally_zero, (yyvsp[0].literal).data );
                }
#line 25411 "parse.cc"
    break;

  case 1029: /* stop_status: status  */
#line 7342 "parse.y"
                               { (yyval.refer) = NULL; }
#line 25417 "parse.cc"
    break;

  case 1030: /* stop_status: status scalar  */
#line 7343 "parse.y"
                               { (yyval.refer) = (yyvsp[0].refer); }
#line 25423 "parse.cc"
    break;

  case 1031: /* stop_status: status "numeric literal"  */
#line 7344 "parse.y"
                              {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix));
                }
#line 25431 "parse.cc"
    break;

  case 1032: /* subscripts: " )" subscript_exprs ')'  */
#line 7349 "parse.y"
                                           {
		  (yyval.refers) = (yyvsp[-1].refers);
		  const auto& exprs( (yyval.refers)->refers );
		  bool ok = std::all_of( exprs.begin(), exprs.end(),
					 []( const auto& refer ) {
					     return is_numeric(refer.field);
					 } );
		  if( ! ok ) {
		    int i=0;
		    for( auto refer : exprs ) {
		      if( ! is_numeric(refer.field) ) {
			  error_msg((yylsp[-2]), "subscript %d, %s, is not numeric (%s)",
				   ++i, name_of(refer.field),
				   cbl_field_type_str(refer.field->type) + 3);
		      }
		    }
		    YYERROR;
		  }
		}
#line 25455 "parse.cc"
    break;

  case 1033: /* subscript_exprs: expr  */
#line 7370 "parse.y"
                {
		  if( ! require_integer((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
		  (yyval.refers) = new refer_list_t((yyvsp[0].refer));
		}
#line 25464 "parse.cc"
    break;

  case 1034: /* subscript_exprs: subscript_exprs expr  */
#line 7374 "parse.y"
                                     {
                  if( (yyvsp[-1].refers)->size() == MAXIMUM_TABLE_DIMENSIONS ) {
                    error_msg((yylsp[-1]), "table dimensions limited to %d",
                             MAXIMUM_TABLE_DIMENSIONS);
                    YYERROR;
                  }
		  if( ! require_integer((yylsp[0]), *(yyvsp[0].refer)) ) YYERROR;
                  (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); (yyval.refers) = (yyvsp[-1].refers);
                }
#line 25478 "parse.cc"
    break;

  case 1035: /* subscript_exprs: ALL  */
#line 7383 "parse.y"
                    {
                  auto ref = new_reference(constant_of(constant_index(ZERO)));
                  (yyval.refers) = new refer_list_t(ref);
                }
#line 25487 "parse.cc"
    break;

  case 1036: /* arg_list: any_arg  */
#line 7389 "parse.y"
                                 { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 25493 "parse.cc"
    break;

  case 1037: /* arg_list: arg_list any_arg  */
#line 7390 "parse.y"
                                 { (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); (yyval.refers) = (yyvsp[-1].refers); }
#line 25499 "parse.cc"
    break;

  case 1039: /* any_arg: LITERAL  */
#line 7393 "parse.y"
                        {(yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 25505 "parse.cc"
    break;

  case 1041: /* signed_literal: '+' num_literal  */
#line 7401 "parse.y"
                                { (yyval.field) = (yyvsp[0].field); }
#line 25511 "parse.cc"
    break;

  case 1042: /* signed_literal: '-' num_literal  */
#line 7403 "parse.y"
                {
                  (yyval.field) = new_tempnumeric();
                  struct cbl_field_t *zero = constant_of(constant_index(ZERO));
                  parser_subtract( (yyval.field), zero, (yyvsp[0].field), current_rounded_mode() );
                }
#line 25521 "parse.cc"
    break;

  case 1043: /* signed_literal: "LENGTH-OF" binary_type  */
#line 7408 "parse.y"
                                            {
                  location_set((yylsp[-1]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
                  parser_set_numeric((yyval.field), (yyvsp[0].number));
		}
#line 25535 "parse.cc"
    break;

  case 1044: /* signed_literal: "LENGTH-OF" name  */
#line 7417 "parse.y"
                                    {
                  location_set((yylsp[-1]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
                  parser_set_numeric((yyval.field), (yyvsp[0].field)->data.capacity);
                }
#line 25549 "parse.cc"
    break;

  case 1045: /* signed_literal: "LENGTH-OF" name subscripts  */
#line 7426 "parse.y"
                                                     {
                  location_set((yylsp[-2]));
                  (yyval.field) = new_tempnumeric();
		  (yyval.field)->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-2]), "LENGTH OF", "ibm");
                  }
                  if( 0 == dimensions((yyvsp[-1].field)) ) {
		    cbl_refer_t r1((yyvsp[-1].field));
		    subscript_dimension_error( (yylsp[0]), (yyvsp[0].refers)->refers.size(), &r1 );
                  }
                  parser_set_numeric((yyval.field), (yyvsp[-1].field)->data.capacity);
                }
#line 25567 "parse.cc"
    break;

  case 1046: /* num_literal: "numeric literal"  */
#line 7441 "parse.y"
                       { (yyval.field) = new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix); }
#line 25573 "parse.cc"
    break;

  case 1047: /* num_literal: ZERO  */
#line 7442 "parse.y"
                       { (yyval.field) = constant_of(constant_index(ZERO)); }
#line 25579 "parse.cc"
    break;

  case 1048: /* $@20: %empty  */
#line 7445 "parse.y"
                     { statement_begin((yylsp[0]), OPEN); }
#line 25585 "parse.cc"
    break;

  case 1052: /* open_file: open_io filenames  */
#line 7450 "parse.y"
                                        {
                  size_t n = (yyvsp[0].files)->files.size();
                  parser_file_open( n, use_list((yyvsp[0].files)->files, false), (yyvsp[-1].number) );
                  current.declaratives_evaluate((yyvsp[0].files)->files);
                  (yyvsp[0].files)->files.clear();
                }
#line 25596 "parse.cc"
    break;

  case 1053: /* open_io: INPUT  */
#line 7457 "parse.y"
                       { (yyval.number) = 'r'; }
#line 25602 "parse.cc"
    break;

  case 1054: /* open_io: OUTPUT  */
#line 7458 "parse.y"
                       { (yyval.number) = 'w'; }
#line 25608 "parse.cc"
    break;

  case 1055: /* open_io: EXTEND  */
#line 7459 "parse.y"
                       { (yyval.number) = 'a'; }
#line 25614 "parse.cc"
    break;

  case 1056: /* open_io: IO  */
#line 7460 "parse.y"
                       { (yyval.number) = '+'; }
#line 25620 "parse.cc"
    break;

  case 1057: /* $@21: %empty  */
#line 7463 "parse.y"
                      { statement_begin((yylsp[0]), CLOSE); }
#line 25626 "parse.cc"
    break;

  case 1061: /* close_file: NAME close_how  */
#line 7469 "parse.y"
                {
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-1].string));
                  if( !e ) {
                    error_msg((yylsp[-1]), "invalid file name '%s'", (yyvsp[-1].string));
                    YYERROR;
                  }
                  auto how = static_cast<file_close_how_t>((yyvsp[0].number));
                  bool reel_unit = (file_close_reel_unit_e & (yyvsp[0].number)) > 0;
                  auto file = cbl_file_of(e);
                  switch( file->org ) {
                  case file_disorganized_e:
                    gcc_unreachable();
                    break;
                  case file_sequential_e:
                  case file_line_sequential_e:
                    break;
                  case file_indexed_e:;
                  case file_relative_e:
                    if( (yyvsp[0].number) & ~file_close_with_lock_e ) {
                      error_msg((yylsp[-1]), "INDEXED or RELATIVE file "
                               "closed with incompatible qualifier" );
                      YYERROR;
                    }
                    break;
                  }
                  if(reel_unit)
                    {
                    how = file_close_reel_unit_e;
                    }
                  parser_file_close( file, how );
                  current.declaratives_evaluate( file );
                }
#line 25663 "parse.cc"
    break;

  case 1062: /* close_how: %empty  */
#line 7502 "parse.y"
                                         { (yyval.number) = file_close_no_how_e; }
#line 25669 "parse.cc"
    break;

  case 1063: /* close_how: reel_unit  */
#line 7503 "parse.y"
                                         { (yyval.number) = file_close_reel_unit_e; }
#line 25675 "parse.cc"
    break;

  case 1064: /* close_how: reel_unit for_kw REMOVAL  */
#line 7504 "parse.y"
                                         {
                  (yyval.number) = file_close_reel_unit_e | file_close_removal_e;
                }
#line 25683 "parse.cc"
    break;

  case 1065: /* close_how: reel_unit WITH NO REWIND  */
#line 7507 "parse.y"
                                         {
                  (yyval.number) = file_close_reel_unit_e | file_close_no_rewind_e;
                }
#line 25691 "parse.cc"
    break;

  case 1066: /* close_how: with NO REWIND  */
#line 7510 "parse.y"
                                         { (yyval.number) = file_close_no_rewind_e; }
#line 25697 "parse.cc"
    break;

  case 1067: /* close_how: with LOCK  */
#line 7511 "parse.y"
                                         { (yyval.number) = file_close_with_lock_e; }
#line 25703 "parse.cc"
    break;

  case 1072: /* perform: perform_verb perform_proc  */
#line 7520 "parse.y"
                                            { perform_free(); }
#line 25709 "parse.cc"
    break;

  case 1073: /* perform: perform_verb perform_stmts  */
#line 7521 "parse.y"
                                            {
		  perform_ec_cleanup();
		  perform_free();
		}
#line 25718 "parse.cc"
    break;

  case 1074: /* perform: perform_verb perform_except  */
#line 7525 "parse.y"
                                            {
		  perform_ec_cleanup();
		  perform_free();
		}
#line 25727 "parse.cc"
    break;

  case 1075: /* perform_stmts: perform_until perform_inline  */
#line 7532 "parse.y"
                {
                  std::vector <cbl_perform_vary_t> varys((yyvsp[0].perf)->varys.size());
                  std::copy( (yyvsp[0].perf)->varys.begin(), (yyvsp[0].perf)->varys.end(), varys.begin() );

                  parser_perform_until(&(yyvsp[0].perf)->tgt, (yyvsp[0].perf)->before,
				       varys.size(), varys.data());
                }
#line 25739 "parse.cc"
    break;

  case 1076: /* perform_stmts: perform_vary perform_inline  */
#line 7540 "parse.y"
                {
		  struct perform_t *p = (yyvsp[0].perf);
                  std::vector <cbl_perform_vary_t> varys(p->varys.size());
                  std::copy( p->varys.begin(), p->varys.end(), varys.begin() );

                  parser_perform_until(&(yyvsp[0].perf)->tgt, (yyvsp[0].perf)->before,
				       varys.size(), varys.data());
                }
#line 25752 "parse.cc"
    break;

  case 1077: /* perform_stmts: perform_times perform_inline  */
#line 7549 "parse.y"
                {
                  parser_perform_inline_times(&(yyvsp[0].perf)->tgt, *(yyvsp[-1].refer));
                }
#line 25760 "parse.cc"
    break;

  case 1078: /* perform_stmts: perform_inline  */
#line 7553 "parse.y"
                {
                  parser_perform_inline_times(&(yyvsp[0].perf)->tgt, literally_one);
                }
#line 25768 "parse.cc"
    break;

  case 1079: /* perform_proc: perform_names  */
#line 7559 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();
                  parser_perform(&p->tgt, NULL);
                }
#line 25778 "parse.cc"
    break;

  case 1080: /* perform_proc: perform_names num_operand TIMES  */
#line 7565 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();
                  parser_perform(&p->tgt, *(yyvsp[-1].refer));
                }
#line 25788 "parse.cc"
    break;

  case 1081: /* perform_proc: perform_names perform_until  */
#line 7571 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();
                  assert(1 == p->varys.size());
                  parser_perform_until( &p->tgt, p->before, 1, &p->varys.front() );
                }
#line 25799 "parse.cc"
    break;

  case 1082: /* perform_proc: perform_names perform_vary  */
#line 7578 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  if( yydebug ) p->tgt.dump();

                  std::vector <cbl_perform_vary_t> varys(p->varys.size());
                  std::copy( p->varys.begin(), p->varys.end(), varys.begin() );

                  parser_perform_until( &p->tgt, p->before, varys.size(), varys.data() );
                }
#line 25813 "parse.cc"
    break;

  case 1083: /* perform_names: label_1  */
#line 7590 "parse.y"
                {
                  perform_tgt_set((yyvsp[0].label));
                }
#line 25821 "parse.cc"
    break;

  case 1084: /* perform_names: label_1 THRU label_1  */
#line 7594 "parse.y"
                {
                  perform_tgt_set((yyvsp[-2].label), (yyvsp[0].label));
                }
#line 25829 "parse.cc"
    break;

  case 1085: /* perform_times: num_operand TIMES  */
#line 7600 "parse.y"
                {
                  (yyval.refer) = (yyvsp[-1].refer);
                }
#line 25837 "parse.cc"
    break;

  case 1086: /* perform_vary: test_before varying vary_afters  */
#line 7606 "parse.y"
                {
                  perform_current()->before = (yyvsp[-2].number) == BEFORE;
                }
#line 25845 "parse.cc"
    break;

  case 1088: /* perform_vary: test_before varying  */
#line 7611 "parse.y"
                {
                  perform_current()->before = (yyvsp[-1].number) == BEFORE;
                }
#line 25853 "parse.cc"
    break;

  case 1090: /* perform_verb: PERFORM  */
#line 7617 "parse.y"
                        {
                  statement_begin((yylsp[0]), PERFORM);
                  (yyval.perf) = perform_alloc();
                }
#line 25862 "parse.cc"
    break;

  case 1091: /* perform_until: test_before perform_cond  */
#line 7624 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  struct cbl_perform_vary_t vary;

                  p->before = (yyvsp[-1].number) == BEFORE;
                  vary.until = (yyvsp[0].field);
                  p->varys.push_back(vary);
                }
#line 25875 "parse.cc"
    break;

  case 1092: /* perform_until: perform_cond  */
#line 7633 "parse.y"
                {
                  struct perform_t *p = perform_current();
                  struct cbl_perform_vary_t vary;

                  vary.until = (yyvsp[0].field);
                  p->varys.push_back(vary);
                }
#line 25887 "parse.cc"
    break;

  case 1093: /* $@22: %empty  */
#line 7641 "parse.y"
                      { parser_perform_conditional( &perform_current()->tgt); }
#line 25893 "parse.cc"
    break;

  case 1094: /* perform_cond: UNTIL $@22 bool_expr  */
#line 7643 "parse.y"
                {
                  parser_perform_conditional_end( &perform_current()->tgt);
		  if( !is_conditional((yyvsp[0].refer)) ) {
		    error_msg((yylsp[-2]), "%s is not a condition expression",
		             name_of((yyvsp[0].refer)->field));
		    YYERROR;
		  }
                  (yyval.field) = (yyvsp[0].refer)->cond();
                }
#line 25907 "parse.cc"
    break;

  case 1095: /* perform_inline: perform_start statements "END-PERFORM"  */
#line 7655 "parse.y"
                {
		  location_set((yylsp[0]));
		  parser_sleep(*cbl_refer_t::empty());
		  (yyval.perf) = perform_current();
		  if( (yyvsp[-2].number) == LOCATION ) {
		    error_msg((yylsp[-2]), "LOCATION not valid with PERFORM Format 2");
		  }
                }
#line 25920 "parse.cc"
    break;

  case 1096: /* perform_inline: perform_start "END-PERFORM"  */
#line 7664 "parse.y"
                {
		  location_set((yylsp[0]));
		  parser_sleep(*cbl_refer_t::empty());
		  (yyval.perf) = perform_current();
		  if( (yyvsp[-1].number) == LOCATION ) {
		    error_msg((yylsp[-1]), "LOCATION not valid with PERFORM Format 2");
		  }
                }
#line 25933 "parse.cc"
    break;

  case 1097: /* perform_start: %empty  */
#line 7674 "parse.y"
                                      {
		  perform_ec_setup();
		  (yyval.number) = 0;
		}
#line 25942 "parse.cc"
    break;

  case 1098: /* perform_start: with LOCATION  */
#line 7678 "parse.y"
                              {
		  perform_ec_setup();
		  (yyval.number) = LOCATION;
		}
#line 25951 "parse.cc"
    break;

  case 1099: /* $@23: %empty  */
#line 7686 "parse.y"
                {
		  auto perf = perform_current();
                  parser_perform_inline_times(&perf->tgt, literally_one);
		}
#line 25960 "parse.cc"
    break;

  case 1100: /* $@24: %empty  */
#line 7693 "parse.y"
                {
		  auto perf = perform_current();
		  parser_label_goto(perf->ec_labels.finally);
		}
#line 25969 "parse.cc"
    break;

  case 1101: /* perform_except: perform_start statements $@23 perform_when perform_ec_other perform_ec_common $@24 perform_ec_finally "END-PERFORM"  */
#line 7699 "parse.y"
                {
		  cbl_unimplemented("PERFORM Format 3");
                }
#line 25977 "parse.cc"
    break;

  case 1104: /* $@25: %empty  */
#line 7707 "parse.y"
                                {
		// accumulate handlers and their paragraphs
		  auto perf = perform_current();
		  auto when = perf->ec_labels.new_label(LblParagraph, "when");
		  for( auto& dcl : (yyvsp[0].dcl_list_t)->elems ) {
		    // use section to hold paragraph
		    dcl->section = symbol_index(symbol_elem_of(when));
		  }
		  std::transform( (yyvsp[0].dcl_list_t)->elems.begin(),
				  (yyvsp[0].dcl_list_t)->elems.end(),
				  std::back_inserter(perf->dcls),
				  []( const cbl_declarative_t *p ) {
				    return *p;
				  } );
		  ast_enter_paragraph(when);
		}
#line 25998 "parse.cc"
    break;

  case 1105: /* perform_when1: WHEN perform_ec $@25 statements  */
#line 7723 "parse.y"
                           {
		  parser_exit_paragraph();
		}
#line 26006 "parse.cc"
    break;

  case 1106: /* perform_ec: EXCEPTION filenames  */
#line 7728 "parse.y"
                                    {
		  auto dcls = new declarative_list_t;
		  auto p = (yyvsp[0].files)->files.begin();
		  auto pend = p;
		  while( pend != (yyvsp[0].files)->files.end() ) {
		    for( size_t i=0; i < COUNT_OF(cbl_declarative_t::files); i++ ) {
		      if( ++pend == (yyvsp[0].files)->files.end() ) break;
		    }
		    std::list<size_t> files;
		    std::transform( p, pend, std::back_inserter(files),
		                  []( const cbl_file_t* f ) {
		                      return symbol_index(symbol_elem_of(f)); } );

		    auto dcl = new cbl_declarative_t(0, ec_io_e, files, file_mode_none_e);
		    dcls->elems.push_back(dcl);
		  }
		  (yyval.dcl_list_t) = dcls;
		}
#line 26029 "parse.cc"
    break;

  case 1107: /* perform_ec: EXCEPTION io_mode  */
#line 7746 "parse.y"
                                  {
		  auto dcl = new cbl_declarative_t((yyvsp[0].io_mode));
		  (yyval.dcl_list_t) = new declarative_list_t(dcl);
		}
#line 26038 "parse.cc"
    break;

  case 1108: /* perform_ec: except_names  */
#line 7750 "parse.y"
                             {
		  auto dcls = new declarative_list_t;
		  const ec_list_t * ecs((yyvsp[0].ec_list));
		  // one cbl_declarative_t per EC
		  std::transform( ecs->elems.begin(), ecs->elems.end(),
				  std::back_inserter(dcls->elems),
				  []( ec_type_t ec )
				  {
				    return new cbl_declarative_t(ec);
				  } );
		  (yyval.dcl_list_t) = dcls;
		}
#line 26055 "parse.cc"
    break;

  case 1109: /* perform_ec: except_files  */
#line 7762 "parse.y"
                             {
		  // one cbl_declarative_t per 16 files
		  auto dcls = new declarative_list_t;
		  for( auto p = (yyvsp[0].isym_list)->elems.begin();
		       p != (yyvsp[0].isym_list)->elems.end(); ) {
		    auto dcl = new cbl_declarative_t;
		    for( auto file = dcl->files;
			 file < dcl->files + COUNT_OF(dcl->files); file++ ) {
		      if( p != (yyvsp[0].isym_list)->elems.end() ) break;
		      *file = *p++;
		    }
		    dcls->elems.push_back(dcl);
		  }
		  (yyval.dcl_list_t) = dcls;
		}
#line 26075 "parse.cc"
    break;

  case 1110: /* except_names: except_name  */
#line 7779 "parse.y"
                            { (yyval.ec_list) = new ec_list_t((yyvsp[0].ec_type)); }
#line 26081 "parse.cc"
    break;

  case 1111: /* except_names: except_names except_name  */
#line 7780 "parse.y"
                                         {
		  (yyval.ec_list) = (yyvsp[-1].ec_list)->push_back((yyvsp[0].ec_type));
		}
#line 26089 "parse.cc"
    break;

  case 1112: /* except_name: "EXCEPTION NAME"  */
#line 7784 "parse.y"
                                   {
		  assert((yyvsp[0].ec_type) != ec_none_e);
		  (yyval.ec_type) = (yyvsp[0].ec_type);
		}
#line 26098 "parse.cc"
    break;

  case 1113: /* except_files: except_name "File" filenames  */
#line 7790 "parse.y"
                                                  {
		  assert((yyvsp[-2].ec_type) != ec_none_e);
		  if( ec_io_e != (ec_io_e & (yyvsp[-2].ec_type)) ) {
		    error_msg((yylsp[-2]), "%s is not of type EC-I-O",
			     ec_type_str((yyvsp[-2].ec_type)));
		  }
		  (yyval.isym_list) = new isym_list_t;
		  std::list<size_t>& files( (yyval.isym_list)->elems );
		  std::transform( (yyvsp[0].files)->files.begin(),
				  (yyvsp[0].files)->files.end(),
		                  std::back_inserter(files),
		                  []( const cbl_file_t* f ) {
		                      return symbol_index(symbol_elem_of(f)); } );
		}
#line 26117 "parse.cc"
    break;

  case 1114: /* perform_ec_other: %empty  */
#line 7807 "parse.y"
                                  {
                  const auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.other);
		  parser_exit_paragraph();
		}
#line 26127 "parse.cc"
    break;

  case 1115: /* $@26: %empty  */
#line 7812 "parse.y"
                           {
                  const auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.other);
		}
#line 26136 "parse.cc"
    break;

  case 1116: /* perform_ec_other: WHEN OTHER $@26 exception statements  */
#line 7816 "parse.y"
                                                {
		  parser_exit_paragraph();
		}
#line 26144 "parse.cc"
    break;

  case 1117: /* perform_ec_common: %empty  */
#line 7821 "parse.y"
                       {
		  const auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.common);
		  parser_exit_paragraph();
		}
#line 26154 "parse.cc"
    break;

  case 1118: /* $@27: %empty  */
#line 7826 "parse.y"
                            {
		  const auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.common);
		}
#line 26163 "parse.cc"
    break;

  case 1119: /* perform_ec_common: WHEN COMMON $@27 exception statements  */
#line 7830 "parse.y"
                                     {
		  parser_exit_paragraph();
		}
#line 26171 "parse.cc"
    break;

  case 1120: /* perform_ec_finally: %empty  */
#line 7835 "parse.y"
                       {
		  const auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.finally);
		  parser_exit_paragraph();
		  parser_label_goto(ec_labels.fini);
		}
#line 26182 "parse.cc"
    break;

  case 1121: /* $@28: %empty  */
#line 7841 "parse.y"
                        {
		  const auto& ec_labels( perform_current()->ec_labels );
		  ast_enter_paragraph(ec_labels.finally);
		}
#line 26191 "parse.cc"
    break;

  case 1122: /* perform_ec_finally: FINALLY $@28 exception statements  */
#line 7845 "parse.y"
                                     {
		  parser_exit_paragraph();
		  const auto& ec_labels( perform_current()->ec_labels );
		  parser_label_goto(ec_labels.fini);
		}
#line 26201 "parse.cc"
    break;

  case 1123: /* test_before: with TEST BEFORE  */
#line 7852 "parse.y"
                                 { (yyval.number) = BEFORE; }
#line 26207 "parse.cc"
    break;

  case 1124: /* test_before: with TEST AFTER  */
#line 7853 "parse.y"
                                 { (yyval.number) = AFTER; }
#line 26213 "parse.cc"
    break;

  case 1125: /* varying: VARYING num_operand FROM num_operand vary_by perform_cond  */
#line 7858 "parse.y"
                {
                  struct cbl_perform_vary_t vary(*(yyvsp[-4].refer), *(yyvsp[-2].refer), *(yyvsp[-1].refer), (yyvsp[0].field));
                  perform_current()->varys.push_back(vary);
                }
#line 26222 "parse.cc"
    break;

  case 1128: /* vary_after: AFTER num_operand FROM num_operand vary_by perform_cond  */
#line 7869 "parse.y"
                {
                  struct cbl_perform_vary_t vary(*(yyvsp[-4].refer), *(yyvsp[-2].refer), *(yyvsp[-1].refer), (yyvsp[0].field));
                  perform_current()->varys.push_back(vary);
                }
#line 26231 "parse.cc"
    break;

  case 1129: /* vary_by: %empty  */
#line 7874 "parse.y"
                               { (yyval.refer) = new cbl_refer_t(literally_one); }
#line 26237 "parse.cc"
    break;

  case 1130: /* vary_by: BY num_operand  */
#line 7875 "parse.y"
                               { (yyval.refer) = (yyvsp[0].refer); }
#line 26243 "parse.cc"
    break;

  case 1132: /* reserved_value: ZERO  */
#line 7879 "parse.y"
                            { (yyval.number) = ZERO; }
#line 26249 "parse.cc"
    break;

  case 1133: /* reserved_value: NULLS  */
#line 7880 "parse.y"
                            { (yyval.number) = NULLS; }
#line 26255 "parse.cc"
    break;

  case 1134: /* spaces_etc: SPACES  */
#line 7882 "parse.y"
                            { (yyval.number) = SPACES; }
#line 26261 "parse.cc"
    break;

  case 1135: /* spaces_etc: "HIGH-VALUES"  */
#line 7883 "parse.y"
                            { (yyval.number) = HIGH_VALUES; }
#line 26267 "parse.cc"
    break;

  case 1136: /* spaces_etc: "LOW-VALUES"  */
#line 7884 "parse.y"
                            { (yyval.number) = LOW_VALUES; }
#line 26273 "parse.cc"
    break;

  case 1137: /* spaces_etc: "QUOTE"  */
#line 7885 "parse.y"
                            { (yyval.number) = QUOTES; }
#line 26279 "parse.cc"
    break;

  case 1138: /* variable_type: NUMERIC  */
#line 7888 "parse.y"
                                  { (yyval.number) = NUMERIC; }
#line 26285 "parse.cc"
    break;

  case 1139: /* variable_type: ALPHABETIC  */
#line 7889 "parse.y"
                                  { (yyval.number) = ALPHABETIC; }
#line 26291 "parse.cc"
    break;

  case 1140: /* variable_type: "ALPHABETIC-LOWER"  */
#line 7890 "parse.y"
                                  { (yyval.number) = ALPHABETIC_LOWER; }
#line 26297 "parse.cc"
    break;

  case 1141: /* variable_type: "ALPHABETIC-UPPER"  */
#line 7891 "parse.y"
                                  { (yyval.number) = ALPHABETIC_UPPER; }
#line 26303 "parse.cc"
    break;

  case 1142: /* variable_type: DBCS  */
#line 7892 "parse.y"
                                  { (yyval.number) = DBCS; }
#line 26309 "parse.cc"
    break;

  case 1143: /* variable_type: KANJI  */
#line 7893 "parse.y"
                                  { (yyval.number) = KANJI; }
#line 26315 "parse.cc"
    break;

  case 1144: /* subtract: subtract_impl end_subtract  */
#line 7896 "parse.y"
                                            { ast_subtract((yyvsp[-1].arith)); }
#line 26321 "parse.cc"
    break;

  case 1145: /* subtract: subtract_cond end_subtract  */
#line 7897 "parse.y"
                                            { ast_subtract((yyvsp[-1].arith)); }
#line 26327 "parse.cc"
    break;

  case 1146: /* subtract_impl: SUBTRACT subtract_body  */
#line 7900 "parse.y"
                {
                  statement_begin((yylsp[-1]), SUBTRACT);
                  (yyval.arith) = (yyvsp[0].arith);
                }
#line 26336 "parse.cc"
    break;

  case 1147: /* subtract_cond: SUBTRACT subtract_body arith_errs  */
#line 7906 "parse.y"
                {
                  statement_begin((yylsp[-2]), SUBTRACT);
                  (yyvsp[-1].arith)->on_error = (yyvsp[0].error).on_error;
                  (yyvsp[-1].arith)->not_error = (yyvsp[0].error).not_error;
                  (yyval.arith) = (yyvsp[-1].arith);
                }
#line 26347 "parse.cc"
    break;

  case 1150: /* subtract_body: sum FROM rnames  */
#line 7918 "parse.y"
                {
                  (yyval.arith) = new arith_t(no_giving_e, (yyvsp[-2].refers));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 26358 "parse.cc"
    break;

  case 1151: /* subtract_body: sum FROM num_operand GIVING rnames  */
#line 7925 "parse.y"
                {
                  (yyval.arith) = new arith_t(giving_e, (yyvsp[-4].refers));
                  (yyval.arith)->B.push_back(*(yyvsp[-2].refer));
                  std::copy( rhs.begin(),
                             rhs.end(), back_inserter((yyval.arith)->tgts) );
                  rhs.clear();
                }
#line 26370 "parse.cc"
    break;

  case 1152: /* subtract_body: CORRESPONDING sum FROM rnames  */
#line 7933 "parse.y"
                {
                  corresponding_fields_t pairs =
                    corresponding_arith_fields( (yyvsp[-2].refers)->refers.front().field,
                                                rhs.front().refer.field );
                    if( pairs.empty() ) {
                      yywarn( "%s and %s have no corresponding fields",
                               (yyvsp[-2].refers)->refers.front().field->name,
                               rhs.front().refer.field->name );
                    }
                  // First src/tgt elements are templates.
                  // Their subscripts apply to the correspondents.
                  (yyval.arith) = new arith_t(corresponding_e, (yyvsp[-2].refers));
                  (yyval.arith)->tgts.push_front(rhs.front());
                  // use arith_t functor to populate A and tgts
                  *(yyval.arith) = std::for_each( pairs.begin(), pairs.end(), *(yyval.arith) );
                  (yyval.arith)->A.pop_front();
                  (yyval.arith)->tgts.pop_front();
                  rhs.clear();
                }
#line 26394 "parse.cc"
    break;

  case 1153: /* vargs: varg  */
#line 7954 "parse.y"
                     { (yyval.vargs) = new vargs_t((yyvsp[0].refer)); }
#line 26400 "parse.cc"
    break;

  case 1154: /* vargs: vargs varg  */
#line 7955 "parse.y"
                                 { (yyvsp[-1].vargs)->push_back((yyvsp[0].refer)); (yyval.vargs) = (yyvsp[-1].vargs); }
#line 26406 "parse.cc"
    break;

  case 1156: /* varg: ALL varg1  */
#line 7959 "parse.y"
                          { (yyval.refer) = (yyvsp[0].refer); (yyval.refer)->all = true; }
#line 26412 "parse.cc"
    break;

  case 1159: /* varg1a: ADDRESS OF scalar  */
#line 7965 "parse.y"
                                  {
		  (yyval.refer) = (yyvsp[0].refer);
		  (yyval.refer)->addr_of = true;
		}
#line 26421 "parse.cc"
    break;

  case 1161: /* varg1a: literal  */
#line 7971 "parse.y"
                {
                  (yyval.refer) = new_reference((yyvsp[0].field));
                }
#line 26429 "parse.cc"
    break;

  case 1162: /* varg1a: reserved_value  */
#line 7975 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 26437 "parse.cc"
    break;

  case 1163: /* varg1a: "LENGTH-OF" binary_type  */
#line 7978 "parse.y"
                                            {
                  location_set((yylsp[-1]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[0].number));
		}
#line 26451 "parse.cc"
    break;

  case 1164: /* varg1a: "LENGTH-OF" name  */
#line 7987 "parse.y"
                                    {
                  location_set((yylsp[-1]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-1]), "LENGTH OF", "ibm");
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[0].field)->size());
		}
#line 26465 "parse.cc"
    break;

  case 1165: /* varg1a: "LENGTH-OF" name subscripts  */
#line 7996 "parse.y"
                                                     {
                  location_set((yylsp[-2]));
                  (yyval.refer) = new cbl_refer_t( new_tempnumeric() );
		  (yyval.refer)->field->clear_attr(signable_e);
                  if( dialect_gcc() ) {
		    dialect_error((yylsp[-2]), "LENGTH OF", "ibm");
                  }
                  if( 0 == dimensions((yyvsp[-1].field)) ) {
		    cbl_refer_t r1((yyvsp[-1].field));
		    subscript_dimension_error( (yylsp[0]), (yyvsp[0].refers)->refers.size(), &r1 );
                  }
		  parser_set_numeric((yyval.refer)->field, (yyvsp[-1].field)->data.capacity);
                }
#line 26483 "parse.cc"
    break;

  case 1166: /* binary_type: BINARY_INTEGER  */
#line 8011 "parse.y"
                               { (yyval.number) = (yyvsp[0].computational).capacity; }
#line 26489 "parse.cc"
    break;

  case 1167: /* binary_type: COMPUTATIONAL  */
#line 8012 "parse.y"
                               { (yyval.number) = (yyvsp[0].computational).capacity; }
#line 26495 "parse.cc"
    break;

  case 1168: /* literal: literalism  */
#line 8016 "parse.y"
                {
                  (yyval.field) = (yyvsp[0].literal).isymbol()?
                    cbl_field_of(symbol_at((yyvsp[0].literal).isymbol()))
                    :
                    new_literal((yyvsp[0].literal), quoted_e);
                }
#line 26506 "parse.cc"
    break;

  case 1169: /* literal: "numeric literal"  */
#line 8023 "parse.y"
                {
                  (yyval.field) = new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix);
                }
#line 26514 "parse.cc"
    break;

  case 1170: /* literal: "datetime format"  */
#line 8027 "parse.y"
                {
                  (yyval.field) = new_literal(strlen((yyvsp[0].string)), (yyvsp[0].string), quoted_e);
                }
#line 26522 "parse.cc"
    break;

  case 1171: /* literal: "date format"  */
#line 8031 "parse.y"
                {
                  (yyval.field) = new_literal(strlen((yyvsp[0].string)), (yyvsp[0].string), quoted_e);
                }
#line 26530 "parse.cc"
    break;

  case 1172: /* literal: "time format"  */
#line 8035 "parse.y"
                {
                  (yyval.field) = new_literal(strlen((yyvsp[0].string)), (yyvsp[0].string), quoted_e);
                }
#line 26538 "parse.cc"
    break;

  case 1173: /* raise: RAISE EXCEPTION NAME  */
#line 8041 "parse.y"
                {
                  auto ec = ec_type_of((yyvsp[0].string));
                  if( ec == ec_none_e ) {
                    error_msg((yylsp[0]), "not an EXCEPTION CONDITION: %s", (yyvsp[0].string));
                    YYERROR;
                  }
                  statement_begin((yyloc), RAISE);
                  parser_exception_raise(ec);
                }
#line 26552 "parse.cc"
    break;

  case 1174: /* raise: RAISE NAME  */
#line 8051 "parse.y"
                {
                  auto ec = ec_type_of((yyvsp[0].string));
                  if( ec != ec_none_e ) {
                    error_msg((yylsp[0]), "RAISE EXCEPTION required for "
			    "EXCEPTION CONDITION: %s", (yyvsp[0].string));
                    YYERROR;
                  }
                  cbl_unimplemented("RAISE %<EXCEPTION OBJECT%>");
                  YYERROR;
                }
#line 26567 "parse.cc"
    break;

  case 1175: /* read: read_file  */
#line 8064 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[0].file_op).file);
                }
#line 26575 "parse.cc"
    break;

  case 1176: /* read_file: READ read_body  */
#line 8069 "parse.y"
                               {
                  file_read_args.call_parser_file_read();
                  (yyval.file_op).file = (yyvsp[0].file); (yyval.file_op).handled = FsSuccess;
                }
#line 26584 "parse.cc"
    break;

  case 1177: /* read_file: READ read_body "END-READ"  */
#line 8073 "parse.y"
                                        {
                  file_read_args.call_parser_file_read();
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = FsSuccess;
                }
#line 26593 "parse.cc"
    break;

  case 1178: /* read_file: READ read_body read_eofs  */
#line 8077 "parse.y"
                                              {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  if( (yyval.file_op).file->access == file_access_rnd_e ) {
                    // None of ADVANCING, AT END, NEXT, NOT AT END, or PREVIOUS
                    // shall be specified if ACCESS MODE RANDOM
                    error_msg((yylsp[0]), "%s: AT END invalid for ACCESS MODE RANDOM", (yyval.file_op).file->name);
                    YYERROR;
                  }
                  parser_fi();
                }
#line 26609 "parse.cc"
    break;

  case 1179: /* read_file: READ read_body read_eofs "END-READ"  */
#line 8088 "parse.y"
                                                       {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  if( (yyval.file_op).file->access == file_access_rnd_e ) {
                    error_msg((yylsp[-1]), "%s: AT END invalid for ACCESS MODE RANDOM", (yyval.file_op).file->name);
                    YYERROR;
                  }
                  parser_fi();
                }
#line 26623 "parse.cc"
    break;

  case 1180: /* read_file: READ read_body io_invalids  */
#line 8097 "parse.y"
                                                {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsNotFound : FsSuccess;
                  parser_fi();
                }
#line 26633 "parse.cc"
    break;

  case 1181: /* read_file: READ read_body io_invalids "END-READ"  */
#line 8102 "parse.y"
                                                         {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsNotFound : FsSuccess;
                  parser_fi();
                }
#line 26643 "parse.cc"
    break;

  case 1182: /* read_body: NAME read_next read_into read_key  */
#line 8110 "parse.y"
                {
                  statement_begin((yyloc), READ);
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-3].string));
                  if( !e ) {
                    error_msg((yylsp[-3]), "invalid file name '%s'", (yyvsp[-3].string));
                    YYERROR;
                  }

                  (yyval.file) = cbl_file_of(e);

                  struct cbl_field_t *record = symbol_file_record((yyval.file));
                  if( !record ) {
                    error_msg((yylsp[-3]), "syntax error? invalid file record name");
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field && is_sequential((yyval.file)) ) {
                    error_msg((yylsp[-3]), "SEQUENTIAL file %s has no KEY", (yyval.file)->name);
                    YYERROR;
                  }
                  if( (yyval.file)->org == file_line_sequential_e && (yyvsp[-2].number) == -2 ) {
                    error_msg((yylsp[-3]), "LINE SEQUENTIAL file %s cannot READ PREVIOUS",
                             (yyval.file)->name);
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field && (yyvsp[-2].number) < 0 ) {
                    error_msg((yylsp[-3]), "cannot read NEXT with KEY %qs", (yyval.file)->name);
                    YYERROR;
                  }

                  int ikey = (yyvsp[-2].number);
                  if( (yyvsp[0].refer)->field ) {
                    ikey = (yyval.file)->key_one((yyvsp[0].refer)->field);
                  }

                  file_read_args.init( (yyval.file), record, (yyvsp[-1].refer), ikey );
                }
#line 26684 "parse.cc"
    break;

  case 1183: /* read_next: %empty  */
#line 8148 "parse.y"
                                { (yyval.number) =  0; }
#line 26690 "parse.cc"
    break;

  case 1184: /* read_next: PREVIOUS RECORD  */
#line 8149 "parse.y"
                                { (yyval.number) = -2; }
#line 26696 "parse.cc"
    break;

  case 1185: /* read_next: PREVIOUS  */
#line 8150 "parse.y"
                                { (yyval.number) = -2; }
#line 26702 "parse.cc"
    break;

  case 1186: /* read_next: NEXT RECORD  */
#line 8151 "parse.y"
                                { (yyval.number) = -1; }
#line 26708 "parse.cc"
    break;

  case 1187: /* read_next: NEXT  */
#line 8152 "parse.y"
                                { (yyval.number) = -1; }
#line 26714 "parse.cc"
    break;

  case 1188: /* read_next: RECORD  */
#line 8153 "parse.y"
                                { (yyval.number) =  0; }
#line 26720 "parse.cc"
    break;

  case 1189: /* read_into: %empty  */
#line 8156 "parse.y"
                            { (yyval.refer) = NULL; }
#line 26726 "parse.cc"
    break;

  case 1190: /* read_into: INTO scalar  */
#line 8157 "parse.y"
                            { (yyval.refer) = (yyvsp[0].refer); }
#line 26732 "parse.cc"
    break;

  case 1191: /* read_eofs: read_eof  */
#line 8166 "parse.y"
                          { (yyval.error_clauses).nclause = 1; (yyval.error_clauses).tf = (yyvsp[0].boolean); }
#line 26738 "parse.cc"
    break;

  case 1192: /* read_eofs: read_eofs read_eof  */
#line 8168 "parse.y"
                {
                  (yyval.error_clauses) = (yyvsp[-1].error_clauses);
                  if( ++(yyval.error_clauses).nclause > 2 ) {
                    error_msg((yylsp[0]), "too many AT END conditions");
                    YYERROR;
                  }
                  if( (yyval.error_clauses).tf == (yyvsp[0].boolean) ) {
                    error_msg((yylsp[0]), "duplicate AT END conditions");
                    YYERROR;
                  }
                  parser_fi();
                }
#line 26755 "parse.cc"
    break;

  case 1193: /* $@29: %empty  */
#line 8183 "parse.y"
                {
                  if( file_read_args.ready() ) {
                    file_read_args.default_march(true);
                    file_read_args.call_parser_file_read();
                  }

                  static const struct status_t { file_status_t L, U; }
                        at_end = { FsEofSeq, FsKeySeq },
                    not_at_end = { FsSuccess, FsEofSeq };
                  assert( (yyvsp[0].number) == END || (yyvsp[0].number) == NOT );
                  status_t st = (yyvsp[0].number) == END? at_end : not_at_end;
                  //  L <= ec < U
                  cbl_field_t *cond = ast_file_status_between(st.L, st.U);

                  parser_if(cond);
                  parser_exception_clear();
                }
#line 26777 "parse.cc"
    break;

  case 1194: /* read_eof: END $@29 statements  */
#line 8199 "parse.y"
                             {
                  parser_else();
                  (yyval.boolean) = (yyvsp[-2].number) == NOT;
                }
#line 26786 "parse.cc"
    break;

  case 1195: /* write_eops: write_eop  */
#line 8205 "parse.y"
                           { (yyval.error_clauses).nclause = 1; (yyval.error_clauses).tf = (yyvsp[0].boolean); }
#line 26792 "parse.cc"
    break;

  case 1196: /* write_eops: write_eops write_eop  */
#line 8207 "parse.y"
                {
                  (yyval.error_clauses) = (yyvsp[-1].error_clauses);
                  if( ++(yyval.error_clauses).nclause > 2 ) {
                    error_msg((yylsp[0]), "too many AT EOP conditions");
                    YYERROR;
                  }
                  if( (yyval.error_clauses).tf == (yyvsp[0].boolean) ) {
                    error_msg((yylsp[0]), "duplicate AT EOP conditions");
                    YYERROR;
                  }
                }
#line 26808 "parse.cc"
    break;

  case 1197: /* $@30: %empty  */
#line 8221 "parse.y"
                {
                  // cond represents the _FILE_STATUS of the last WRITE.
                  static cbl_field_t *cond = constant_of(constant_index(ZERO));

                  if( file_write_args.ready() ) {
                    file_write_args.call_parser_file_write(true);
                    cond = ast_file_status_between(FsEofSeq, FsKeySeq);
                  }
                  assert( (yyvsp[0].number) == EOP || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    parser_logop(cond, NULL, not_op, cond);
                  }
                  parser_if(cond);
                  parser_exception_clear();
                }
#line 26828 "parse.cc"
    break;

  case 1198: /* write_eop: EOP $@30 statements  */
#line 8235 "parse.y"
                             {
                  parser_else();
                  parser_fi();
                  (yyval.boolean) = (yyvsp[-2].number) == NOT;
                }
#line 26838 "parse.cc"
    break;

  case 1199: /* read_key: %empty  */
#line 8242 "parse.y"
                            { (yyval.refer) = new cbl_refer_t();  }
#line 26844 "parse.cc"
    break;

  case 1200: /* read_key: KEY is name  */
#line 8243 "parse.y"
                            { (yyval.refer) = new cbl_refer_t((yyvsp[0].field)); }
#line 26850 "parse.cc"
    break;

  case 1201: /* write: write_file  */
#line 8247 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[0].file_op).file );
                }
#line 26858 "parse.cc"
    break;

  case 1202: /* write_file: WRITE write_body  */
#line 8253 "parse.y"
                {
                  (yyval.file_op).file = (yyvsp[0].file); (yyval.file_op).handled = FsSuccess;
                  bool sequentially = (yyval.file_op).file->access == file_access_seq_e;
                  file_write_args.call_parser_file_write(sequentially);
                }
#line 26868 "parse.cc"
    break;

  case 1203: /* write_file: WRITE write_body "END-WRITE"  */
#line 8259 "parse.y"
                {
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = FsSuccess;
                  bool sequentially = (yyval.file_op).file->access == file_access_seq_e;
                  file_write_args.call_parser_file_write(sequentially);
                }
#line 26878 "parse.cc"
    break;

  case 1204: /* write_file: WRITE write_body write_eops  */
#line 8264 "parse.y"
                                                 {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                }
#line 26887 "parse.cc"
    break;

  case 1205: /* write_file: WRITE write_body write_eops "END-WRITE"  */
#line 8268 "parse.y"
                                                           {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                }
#line 26896 "parse.cc"
    break;

  case 1206: /* write_file: WRITE write_body io_invalids  */
#line 8272 "parse.y"
                                                  {
                  bool handled = (yyvsp[0].error_clauses).nclause == 2 || !(yyvsp[0].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-1].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  parser_fi();
                }
#line 26906 "parse.cc"
    break;

  case 1207: /* write_file: WRITE write_body io_invalids "END-WRITE"  */
#line 8277 "parse.y"
                                                            {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].file); (yyval.file_op).handled = handled? FsEofSeq : FsSuccess;
                  parser_fi();
                }
#line 26916 "parse.cc"
    break;

  case 1208: /* write_body: write_what advance_when advancing  */
#line 8285 "parse.y"
                {
                  statement_begin((yyloc), WRITE);
                  cbl_file_t *file = symbol_record_file((yyvsp[-2].field));
                  if( !file ) {
                    error_msg((yylsp[-2]), "no FD record found for %s", (yyvsp[-2].field)->name);
                    YYERROR;
                  }
                  (yyval.file) = file_write_args.init( file, (yyvsp[-2].field), (yyvsp[-1].number)==AFTER, (yyvsp[0].refer) );
                  current.declaratives_evaluate( file );
                }
#line 26931 "parse.cc"
    break;

  case 1209: /* write_body: write_what  */
#line 8296 "parse.y"
                {
                  statement_begin((yyloc), WRITE);
                  cbl_file_t *file = symbol_record_file((yyvsp[0].field));
                  if( !file ) {
                    error_msg((yylsp[0]), "no FD record found for %s", (yyvsp[0].field)->name);
                    YYERROR;
                  }
		  cbl_refer_t lines;
                  switch(file->org) {
                  case file_sequential_e:
                    break;
                  case file_line_sequential_e:
                    lines.field = literally_one;
                    break;
                  case file_disorganized_e:
                  case file_indexed_e:
                  case file_relative_e:
                    break;
                  }
                  (yyval.file) = file_write_args.init( file, (yyvsp[0].field), false, &lines );
                }
#line 26957 "parse.cc"
    break;

  case 1210: /* write_what: file_record FROM alpha_val  */
#line 8319 "parse.y"
                {
                  (yyval.field) = (yyvsp[-2].field);
                  parser_move((yyval.field), *(yyvsp[0].refer));
                }
#line 26966 "parse.cc"
    break;

  case 1212: /* file_record: NAME  */
#line 8326 "parse.y"
                {
                  name_queue.qualify((yylsp[0]), (yyvsp[0].string));
		  auto namelocs( name_queue.pop() );
		  auto names( name_queue.namelist_of(namelocs) );
		  auto inner = namelocs.back();
                  if( ((yyval.field) = field_find(names)) == NULL ) {
                    error_msg(inner.loc, "no record name '%s'", inner.name);
                    YYERROR;
                  }
                }
#line 26981 "parse.cc"
    break;

  case 1213: /* file_record: NAME inof filename  */
#line 8337 "parse.y"
                {
                  std::list<const char *> names = {(yyvsp[0].file)->name, (yyvsp[-2].string)};
                  auto record = symbol_find(names);
                  if( !record ) {
                    error_msg((yyloc), "%s IN %s not found",
                             (yyvsp[-2].string), (yyvsp[0].file)->name);
                    YYERROR;
                  }
                  (yyval.field) = cbl_field_of(record);
                }
#line 26996 "parse.cc"
    break;

  case 1214: /* file_record: "File" filename  */
#line 8348 "parse.y"
                {
                  (yyval.field) = cbl_field_of(symbol_at((yyvsp[0].file)->default_record));
                }
#line 27004 "parse.cc"
    break;

  case 1215: /* advance_when: BEFORE  */
#line 8352 "parse.y"
                       { (yyval.number) = BEFORE; }
#line 27010 "parse.cc"
    break;

  case 1216: /* advance_when: AFTER  */
#line 8353 "parse.y"
                       { (yyval.number) = AFTER; }
#line 27016 "parse.cc"
    break;

  case 1218: /* advancing: ADVANCING advance_by  */
#line 8357 "parse.y"
                                     { (yyval.refer) = (yyvsp[0].refer); }
#line 27022 "parse.cc"
    break;

  case 1219: /* advance_by: scalar lines  */
#line 8359 "parse.y"
                             { (yyval.refer) = (yyvsp[-1].refer); }
#line 27028 "parse.cc"
    break;

  case 1220: /* advance_by: signed_literal lines  */
#line 8360 "parse.y"
                                     { (yyval.refer) = new_reference((yyvsp[-1].field)); }
#line 27034 "parse.cc"
    break;

  case 1221: /* advance_by: PAGE  */
#line 8362 "parse.y"
                {
                  /*
                   * The standard says behavior is undefined when the
                   * number of lines is negative.  So, we use the
                   * negative Number Of The Beast as a PAGE flag.
                   */
                  (yyval.refer) = new_reference( new_literal("-666") );
                }
#line 27047 "parse.cc"
    break;

  case 1222: /* advance_by: device_name  */
#line 8370 "parse.y"
                            { (yyval.refer) = new_reference(literally_one); }
#line 27053 "parse.cc"
    break;

  case 1223: /* io_invalids: io_invalid  */
#line 8373 "parse.y"
                           { (yyval.error_clauses).nclause = 1; (yyval.error_clauses).tf = (yyvsp[0].boolean); }
#line 27059 "parse.cc"
    break;

  case 1224: /* io_invalids: io_invalids io_invalid  */
#line 8375 "parse.y"
                {
                  (yyval.error_clauses) = (yyvsp[-1].error_clauses);
                  if( ++(yyval.error_clauses).nclause > 2 ) {
                    error_msg((yylsp[0]), "too many INVALID clauses");
                    YYERROR;
                  }
                  if( (yyval.error_clauses).tf == (yyvsp[0].boolean) ) {
                    error_msg((yylsp[0]), "duplicate INVALID conditions");
                    YYERROR;
                  }
                  parser_fi();
                }
#line 27076 "parse.cc"
    break;

  case 1225: /* $@31: %empty  */
#line 8389 "parse.y"
                            {
                  if( file_delete_args.ready() ) {
                    file_delete_args.call_parser_file_delete(false);
                  }
                  if( file_read_args.ready() ) {
                    file_read_args.default_march(false);
                    file_read_args.call_parser_file_read();
                  }
                  if( file_rewrite_args.ready() ) {
                    file_rewrite_args.call_parser_file_rewrite(false);
                  }
                  if( file_start_args.ready() ) {
                    file_start_args.call_parser_file_start();
                  }
                  if( file_write_args.ready() ) {
                    file_write_args.call_parser_file_write(false);
                  }

                  static const struct status_t { file_status_t L, U; }
                        invalid = { FsKeySeq, FsOsError },
                    not_invalid = { FsSuccess, FsEofSeq };
                  assert( (yyvsp[-1].number) == INVALID || (yyvsp[-1].number) == NOT );
                  status_t st = (yyvsp[-1].number) == INVALID? invalid : not_invalid;
                  //  L <= ec < U
                  cbl_field_t *cond = ast_file_status_between(st.L, st.U);

                  parser_if(cond);
                  parser_exception_clear();
                }
#line 27110 "parse.cc"
    break;

  case 1226: /* io_invalid: INVALID key $@31 statements  */
#line 8417 "parse.y"
                             {
                  parser_else();
                  (yyval.boolean) = (yyvsp[-3].number) == NOT;
                }
#line 27119 "parse.cc"
    break;

  case 1229: /* delete_impl: DELETE delete_body  */
#line 8427 "parse.y"
                {
                  file_delete_args.call_parser_file_delete(true);
                  current.declaratives_evaluate( (yyvsp[0].file) );
                }
#line 27128 "parse.cc"
    break;

  case 1230: /* delete_cond: DELETE delete_body io_invalids  */
#line 8433 "parse.y"
                {
                  if( is_sequential((yyvsp[-1].file)) ) {
                    error_msg((yylsp[-1]), "INVALID KEY phrase invalid for sequential file '%s'",
                             (yyvsp[-1].file)->name);
                    YYERROR;
                  }
                  if( (yyvsp[-1].file)->access == file_access_seq_e ) {
                    error_msg((yylsp[-1]), "INVALID KEY phrase invalid for "
                             "sequential access mode on '%s'",
                             (yyvsp[-1].file)->name);
                    YYERROR;
                  }
                  parser_fi();
                  // call happens in io_invalid
                  current.declaratives_evaluate( (yyvsp[-1].file) );
                }
#line 27149 "parse.cc"
    break;

  case 1231: /* delete_body: filename record  */
#line 8452 "parse.y"
                {
                  statement_begin((yylsp[-1]), DELETE);
                  file_delete_args.init( (yyvsp[-1].file) );
                  (yyval.file) = (yyvsp[-1].file);
                }
#line 27159 "parse.cc"
    break;

  case 1234: /* rewrite: rewrite1  */
#line 8463 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[0].file_op).file);
                }
#line 27167 "parse.cc"
    break;

  case 1235: /* rewrite1: REWRITE rewrite_body end_rewrite  */
#line 8468 "parse.y"
                                                 {
                  (yyval.file_op).file = (yyvsp[-1].rewrite_t).file; (yyval.file_op).handled = FsSuccess;
                  file_rewrite_args.call_parser_file_rewrite( true );
                }
#line 27176 "parse.cc"
    break;

  case 1236: /* rewrite1: REWRITE rewrite_body io_invalids end_rewrite  */
#line 8472 "parse.y"
                                                                  {
                  bool handled = (yyvsp[-1].error_clauses).nclause == 2 || !(yyvsp[-1].error_clauses).tf;
                  (yyval.file_op).file = (yyvsp[-2].rewrite_t).file; (yyval.file_op).handled = handled? FsNotFound : FsSuccess;

                  if( is_sequential((yyval.file_op).file) ) {
                    error_msg((yylsp[-2]), "INVALID KEY for sequential file '%s'",
                             (yyval.file_op).file->name);
                    YYERROR;
                  }
                  if( (yyval.file_op).file->relative_sequential() ) {
                    error_msg((yylsp[-2]), "%s: INVALID KEY may not be specified for "
                             "RELATIVE file and SEQUENTIAL access",
                             (yyval.file_op).file->name);
                    YYERROR;
                  }
                  parser_fi();
                }
#line 27198 "parse.cc"
    break;

  case 1237: /* rewrite_body: write_what record  */
#line 8492 "parse.y"
                {
                  statement_begin((yyloc), REWRITE);
                  symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-1].field)->name);
                  file_rewrite_args.init(cbl_file_of(e), (yyvsp[-1].field));
                  (yyval.rewrite_t).file = cbl_file_of(e);
                  (yyval.rewrite_t).buffer = (yyvsp[-1].field);
                }
#line 27210 "parse.cc"
    break;

  case 1240: /* start: start_impl end_start  */
#line 8505 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[-1].file));
                }
#line 27218 "parse.cc"
    break;

  case 1241: /* start: start_cond end_start  */
#line 8509 "parse.y"
                {
                  current.declaratives_evaluate((yyvsp[-1].file));
                }
#line 27226 "parse.cc"
    break;

  case 1242: /* start_impl: START start_body  */
#line 8513 "parse.y"
                                 {
		  (yyval.file) = (yyvsp[0].file);
		}
#line 27234 "parse.cc"
    break;

  case 1243: /* start_cond: START start_body io_invalids  */
#line 8517 "parse.y"
                                             {
                  parser_fi();
		  (yyval.file) = (yyvsp[-1].file);
                }
#line 27243 "parse.cc"
    break;

  case 1246: /* start_body: filename  */
#line 8527 "parse.y"
                {
                  statement_begin((yyloc), START);
                  (yyval.file) = file_start_args.init((yylsp[0]), (yyvsp[0].file));
                  parser_file_start( (yyvsp[0].file), lt_op, 0 );
                }
#line 27253 "parse.cc"
    break;

  case 1247: /* start_body: filename KEY relop name  */
#line 8533 "parse.y"
                { // lexer swallows IS, although relop allows it.
                  statement_begin((yyloc), START);
                  int key = (yyvsp[-3].file)->key_one((yyvsp[0].field));
                  int size = key == 0 ? 0 : (yyvsp[-3].file)->keys[key - 1].size();
                  auto ksize = new_tempnumeric();
                  parser_set_numeric(ksize, size);
                  if( yydebug ) {
                    yywarn("START: key #%d '%s' has size %d",
                          key, (yyvsp[0].field)->name, size);
                  }
                  (yyval.file) = file_start_args.init((yylsp[-3]), (yyvsp[-3].file));
                  parser_file_start( (yyvsp[-3].file), relop_of((yyvsp[-1].number)), key, ksize );
                }
#line 27271 "parse.cc"
    break;

  case 1248: /* start_body: filename KEY relop name with LENGTH expr  */
#line 8547 "parse.y"
                { // lexer swallows IS, although relop allows it.
                  statement_begin((yyloc), START);
                  int key = (yyvsp[-6].file)->key_one((yyvsp[-3].field));
                  (yyval.file) = file_start_args.init((yylsp[-6]), (yyvsp[-6].file));
                  parser_file_start( (yyvsp[-6].file), relop_of((yyvsp[-4].number)), key, *(yyvsp[0].refer) );
                }
#line 27282 "parse.cc"
    break;

  case 1249: /* start_body: filename FIRST  */
#line 8554 "parse.y"
                {
                  statement_begin((yyloc), START);
                  (yyval.file) = file_start_args.init((yylsp[-1]), (yyvsp[-1].file));
                  parser_file_start( (yyvsp[-1].file), lt_op, -1 );
                }
#line 27292 "parse.cc"
    break;

  case 1250: /* start_body: filename LAST  */
#line 8560 "parse.y"
                {
                  statement_begin((yyloc), START);
                  (yyval.file) = file_start_args.init((yylsp[-1]), (yyvsp[-1].file));
                  parser_file_start( (yyvsp[-1].file), gt_op, -2 );
                }
#line 27302 "parse.cc"
    break;

  case 1251: /* $@32: %empty  */
#line 8567 "parse.y"
                      { statement_begin((yylsp[0]), MERGE); }
#line 27308 "parse.cc"
    break;

  case 1252: /* merge: MERGE $@32 filename sort_keys sort_seq USING filenames sort_output  */
#line 8570 "parse.y"
                {
                  std::vector <cbl_key_t> keys((yyvsp[-4].sort_keys)->key_list.size());
                  std::copy( (yyvsp[-4].sort_keys)->key_list.begin(),
                             (yyvsp[-4].sort_keys)->key_list.end(), keys.begin() );

                  size_t ninput = (yyvsp[-1].files)->files.size();
                  size_t noutput = (yyvsp[0].sort_io)->nfile();
                  cbl_file_t **inputs = NULL, **outputs = NULL;
                  cbl_perform_tgt_t *out_proc = NULL;

                  inputs = new cbl_file_t * [ ninput ];
                  std::copy((yyvsp[-1].files)->files.begin(),
                            (yyvsp[-1].files)->files.end(), inputs);

                  if( noutput > 0 ) {
                    outputs = new cbl_file_t * [ noutput ];
                    std::copy((yyvsp[0].sort_io)->file_list.files.begin(),
                              (yyvsp[0].sort_io)->file_list.files.end(), outputs);
                  } else {
                    out_proc = &(yyvsp[0].sort_io)->tgt;
                  }

                  parser_file_merge( (yyvsp[-5].file), (yyvsp[-3].alphasym), keys, 
                                     ninput, inputs,
                                     noutput, outputs,
                                     out_proc );
                }
#line 27340 "parse.cc"
    break;

  case 1253: /* set_tgts: set_tgt  */
#line 8599 "parse.y"
                        {
                  (yyval.targets) = new tgt_list_t;
                  list_add((yyval.targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 27349 "parse.cc"
    break;

  case 1254: /* set_tgts: set_tgts set_tgt  */
#line 8604 "parse.y"
                {
                  list_add((yyvsp[-1].targets)->targets, *(yyvsp[0].refer), current_rounded_mode());
                }
#line 27357 "parse.cc"
    break;

  case 1256: /* set_operand: signed_literal  */
#line 8609 "parse.y"
                               { (yyval.refer) = new_reference((yyvsp[0].field)); }
#line 27363 "parse.cc"
    break;

  case 1257: /* set_operand: ADDRESS of FUNCTION ctx_name  */
#line 8611 "parse.y"
                {
                  (yyval.refer) = NULL;
                  auto e = symbol_function(0, (yyvsp[0].string));
                  if( e ) {
                    (yyval.refer) = new cbl_refer_t(cbl_label_of(e));
                  } else {
                    e = symbol_find((yylsp[0]), (yyvsp[0].string));
                    if( !e ) {
                      error_msg((yylsp[0]), "%s not found", (yyvsp[0].string));
                      YYERROR;
                    }
                    (yyval.refer) = new cbl_refer_t(cbl_field_of(e));
                  }
                  assert((yyval.refer));
                }
#line 27383 "parse.cc"
    break;

  case 1258: /* set_operand: ADDRESS of "Program" ctx_name  */
#line 8627 "parse.y"
                {
                  (yyval.refer) = NULL;
                  auto label = symbol_program(0, (yyvsp[0].string));
                  if( label ) {
                    (yyval.refer) = new cbl_refer_t(label);
                  } else {
                    auto e = symbol_find((yylsp[0]), (yyvsp[0].string));
                    if( !e ) {
                      error_msg((yylsp[0]), "%s not found", (yyvsp[0].string));
                      YYERROR;
                    }
                    (yyval.refer) = new cbl_refer_t(cbl_field_of(e));
                  }
                  assert((yyval.refer));
                }
#line 27403 "parse.cc"
    break;

  case 1259: /* set_operand: ADDRESS of "Program" LITERAL  */
#line 8643 "parse.y"
                {
                  auto label = symbol_program(0, (yyvsp[0].literal).data);
                  (yyval.refer) = new cbl_refer_t( label );
                }
#line 27412 "parse.cc"
    break;

  case 1261: /* set_tgt: ADDRESS of scalar  */
#line 8649 "parse.y"
                                  { (yyval.refer) = (yyvsp[0].refer); (yyval.refer)->addr_of = true; }
#line 27418 "parse.cc"
    break;

  case 1262: /* set: SET set_tgts TO set_operand  */
#line 8653 "parse.y"
                {
                  statement_begin((yylsp[-3]), SET);

                  switch( set_operand_type(*(yyvsp[0].refer)) ) {
                  case FldInvalid:
                    if( ! ((yyvsp[0].refer)->prog_func && (yyvsp[0].refer)->addr_of) ) {
                      error_msg((yylsp[0]), "SET source operand '%s' is invalid", (yyvsp[0].refer)->name());
                      YYERROR;
                      break;
                    }
                    __attribute__((fallthrough));
                  case FldPointer:
                    if( !valid_set_targets(*(yyvsp[-2].targets), true) ) {
                      YYERROR;
                    }
                    ast_set_pointers((yyvsp[-2].targets)->targets, *(yyvsp[0].refer));
                    break;

                  case FldIndex:
                  case FldPacked:
                  case FldNumericDisplay:
                  case FldNumericBinary:
                  case FldFloat:
                  case FldNumericBin5:
                  case FldLiteralN:
                    if( !valid_set_targets(*(yyvsp[-2].targets), (yyvsp[0].refer)->is_pointer()) ) {
                      YYERROR;
                    }
                    parser_index((yyvsp[-2].targets), *(yyvsp[0].refer));
                    break;
                  default:
                    if( strcmp((yyvsp[0].refer)->field->name, "ZEROS") != 0 ) {
                      error_msg((yylsp[0]), "%s must be numeric or POINTER type",
                              (yyvsp[0].refer)->field->name);
                      YYERROR;
                    }
                  }
                }
#line 27461 "parse.cc"
    break;

  case 1263: /* set: SET set_tgts TO NULLS  */
#line 8692 "parse.y"
                {
                  statement_begin((yylsp[-3]), SET);
                  if( !valid_set_targets(*(yyvsp[-2].targets), true) ) {
                    YYERROR;
                  }
                  ast_set_pointers((yyvsp[-2].targets)->targets, constant_of(constant_index(NULLS)));
                }
#line 27473 "parse.cc"
    break;

  case 1264: /* set: SET set_tgts TO spaces_etc  */
#line 8700 "parse.y"
                {
                  error_msg((yylsp[-2]), "invalid value for SET TO");
                }
#line 27481 "parse.cc"
    break;

  case 1265: /* set: SET set_tgts TO ENTRY scalar  */
#line 8704 "parse.y"
                {
                  ast_set_pointers((yyvsp[-3].targets)->targets, *(yyvsp[0].refer));
                }
#line 27489 "parse.cc"
    break;

  case 1266: /* set: SET set_tgts TO ENTRY LITERAL  */
#line 8708 "parse.y"
                {
                  auto literal = (yyvsp[0].literal).isymbol()?
                    cbl_field_of(symbol_at((yyvsp[0].literal).isymbol()))
                    :
                    new_literal((yyvsp[0].literal), quoted_e);
                  ast_set_pointers((yyvsp[-3].targets)->targets, literal);
                }
#line 27501 "parse.cc"
    break;

  case 1267: /* set: SET set_tgts UP BY num_operand  */
#line 8716 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  list<cbl_num_result_t>& tgts = (yyvsp[-3].targets)->targets;

                  for( auto p = tgts.begin(); p != tgts.end(); p++ ) {
                    parser_add2( *p, *(yyvsp[0].refer) );
                  }
                  delete (yyvsp[-3].targets);
                }
#line 27515 "parse.cc"
    break;

  case 1268: /* set: SET set_tgts DOWN BY num_operand  */
#line 8726 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  list<cbl_num_result_t>& tgts = (yyvsp[-3].targets)->targets;

                  for( auto p = tgts.begin(); p != tgts.end(); p++ ) {
                    parser_subtract2( *p, *(yyvsp[0].refer) );
                  }
                  delete (yyvsp[-3].targets);
                }
#line 27529 "parse.cc"
    break;

  case 1269: /* set: SET ENVIRONMENT envar TO alpha_val  */
#line 8736 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  parser_set_envar(*(yyvsp[-2].refer), *(yyvsp[0].refer));
                }
#line 27538 "parse.cc"
    break;

  case 1270: /* set: SET LAST EXCEPTION TO OFF  */
#line 8741 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  // send the signal to clear the stashed exception values
                  parser_exception_raise(ec_none_e);
                }
#line 27548 "parse.cc"
    break;

  case 1271: /* set: SET "LENGTH-OF" scalar TO scalar  */
#line 8747 "parse.y"
                {
                  statement_begin((yylsp[-4]), SET);
                  cbl_unimplemented("SET LENGTH OF");
                  YYERROR;
                }
#line 27558 "parse.cc"
    break;

  case 1272: /* set: SET scalar88s TO true_false  */
#line 8753 "parse.y"
                {
                  statement_begin((yylsp[-3]), SET);
                  class set_conditional {
                    bool tf;
                   public:
                    explicit set_conditional( int token ) : tf(token == TRUE_kw) {}
                    void operator()(cbl_refer_t& refer) {
                      if( refer.field->data.false_value_of() == NULL && !tf ) {
			auto loc = symbol_field_location(field_index(refer.field));
                        error_msg(loc, "%s has no WHEN SET TO FALSE",
                                 refer.field->name);
                        return;
                      }
                      parser_set_conditional88(refer, tf);
                    }
                  };
                  std::for_each((yyvsp[-2].refers)->refers.begin(), (yyvsp[-2].refers)->refers.end(),
                                set_conditional((yyvsp[0].number)));
                }
#line 27582 "parse.cc"
    break;

  case 1273: /* $@33: %empty  */
#line 8772 "parse.y"
                    { statement_begin((yylsp[0]), SET); }
#line 27588 "parse.cc"
    break;

  case 1277: /* set_switches: switches TO on_off  */
#line 8780 "parse.y"
                {
                  struct switcheroo {
                    bitop_t op;
                    explicit switcheroo( bool tf ) : op( tf? bit_set_op : bit_clear_op ) {}
                    switcheroo& operator()(cbl_field_t* sw) {
                      assert(sw->type == FldSwitch);
                      assert(sw->data.initial); // not a switch condition
                      parser_bitop(NULL, parent_of(sw),
                                   op, sw->data.upsi_mask_derive());
                      return *this;
                    }
                  };
                  std::for_each( (yyvsp[-2].fields)->fields.begin(), (yyvsp[-2].fields)->fields.end(),
                                 switcheroo((yyvsp[0].boolean)) );
                }
#line 27608 "parse.cc"
    break;

  case 1278: /* switches: one_switch  */
#line 8797 "parse.y"
                                        { (yyval.fields) = new field_list_t((yyvsp[0].field)); }
#line 27614 "parse.cc"
    break;

  case 1279: /* switches: switches one_switch  */
#line 8798 "parse.y"
                                        { (yyval.fields)->fields.push_back((yyvsp[0].field)); }
#line 27620 "parse.cc"
    break;

  case 1280: /* one_switch: SWITCH  */
#line 8800 "parse.y"
                       {
                  (yyval.field) = cbl_field_of(symbol_find((yylsp[0]), (yyvsp[0].string)));
                }
#line 27628 "parse.cc"
    break;

  case 1281: /* on_off: ON  */
#line 8805 "parse.y"
                    { (yyval.boolean) = true; }
#line 27634 "parse.cc"
    break;

  case 1282: /* on_off: OFF  */
#line 8806 "parse.y"
                    { (yyval.boolean) = false; }
#line 27640 "parse.cc"
    break;

  case 1285: /* search_linear: SEARCH search_1_place search_1_cases  */
#line 8814 "parse.y"
                {
                  parser_lsearch_end(search_current());
                  search_free();
                }
#line 27649 "parse.cc"
    break;

  case 1290: /* search_1_body: name search_varying  */
#line 8828 "parse.y"
                {
                  statement_begin((yyloc), SEARCH);
                  cbl_field_t *index = table_primary_index((yyvsp[-1].field));
                  if( !index ) {
                    error_msg((yylsp[-1]), "%s has no defined index", (yyvsp[-1].field)->name);
                    YYERROR;
                  }

                  cbl_name_t label_name;
		  auto len = snprintf(label_name, sizeof(label_name),
				     "linear_search_%d", (yylsp[-1]).first_line);
		  if( ! (0 < len && len < int(sizeof(label_name))) ) {
		    gcc_unreachable();
		  }
                  cbl_label_t *name = label_add( LblSearch,
                                                 label_name, (yylsp[-1]).first_line );
		  auto varying((yyvsp[0].field));
                  if( index == varying ) varying = NULL;
                  parser_lsearch_start( name, (yyvsp[-1].field), index, varying );
                  search_alloc(name);
                }
#line 27675 "parse.cc"
    break;

  case 1291: /* search_varying: %empty  */
#line 8851 "parse.y"
                               { (yyval.field) = NULL; }
#line 27681 "parse.cc"
    break;

  case 1292: /* search_varying: VARYING name  */
#line 8852 "parse.y"
                               { (yyval.field) = (yyvsp[0].field); }
#line 27687 "parse.cc"
    break;

  case 1293: /* search_1_cases: search_1_case  */
#line 8856 "parse.y"
                {
                  if( yydebug ) {
                    const char *lookahead = "?";
                    switch( yychar ) {
                    case 0:   lookahead = "YYEOF"; break;
                    case -2: lookahead = "YYEMPTY"; break;
                    default:
                      if( yychar > 0 ) {
                        lookahead = keyword_str(yychar);
                      }
                    }
                    yywarn("Just one case, lookahead is '%s'", lookahead);
                  }
                }
#line 27706 "parse.cc"
    break;

  case 1296: /* search_1_when: WHEN  */
#line 8874 "parse.y"
                     { parser_lsearch_conditional(search_current()); }
#line 27712 "parse.cc"
    break;

  case 1297: /* search_1_test: bool_expr  */
#line 8876 "parse.y"
                          {
                  parser_lsearch_when( search_current(), (yyvsp[0].refer)->cond() );
                }
#line 27720 "parse.cc"
    break;

  case 1298: /* search_binary: SEARCH ALL search_2_body search_2_cases  */
#line 8882 "parse.y"
                {
                  parser_bsearch_end(search_current());
                  search_free();
                }
#line 27729 "parse.cc"
    break;

  case 1299: /* search_binary: SEARCH ALL search_2_body at END statements search_2_cases  */
#line 8887 "parse.y"
                {
                  parser_bsearch_end(search_current());
                  search_free();
                }
#line 27738 "parse.cc"
    break;

  case 1300: /* search_2_body: name  */
#line 8894 "parse.y"
                {
                  statement_begin((yyloc), SEARCH);
                  char *label_name = xasprintf("binary_search_%d", (yylsp[0]).first_line);
                  cbl_label_t *name = label_add( LblSearch,
                                                 label_name, (yylsp[0]).first_line );
                  parser_bsearch_start( name, (yyvsp[0].field) );
                  search_alloc(name);
                }
#line 27751 "parse.cc"
    break;

  case 1303: /* $@34: %empty  */
#line 8907 "parse.y"
                     { parser_bsearch_conditional(search_current()); }
#line 27757 "parse.cc"
    break;

  case 1306: /* search_stmts: NEXT SENTENCE  */
#line 8912 "parse.y"
                                        {
                  next_sentence = label_add(LblNone, "next_sentence", 0);
                  parser_label_goto(next_sentence);
                }
#line 27766 "parse.cc"
    break;

  case 1309: /* search_term: scalar '=' search_expr  */
#line 8922 "parse.y"
                {
                  if( (yyvsp[-2].refer)->nsubscript() == 0 ) {
                    error_msg((yylsp[-2]), "no index for key");
                    YYERROR;
                  }
                  if( dimensions((yyvsp[-2].refer)->field) < (yyvsp[-2].refer)->nsubscript() ) {
                    error_msg((yylsp[-2]), "too many subscripts: "
                              "%u for table of %zu dimensions",
                              (yyvsp[-2].refer)->nsubscript(), dimensions((yyvsp[-2].refer)->field) );
                    YYERROR;
                  }

                  parser_bsearch_when(  search_current(),
                                        *(yyvsp[-2].refer),
                                        *(yyvsp[0].refer),
                                        is_ascending_key(*(yyvsp[-2].refer)) );
                }
#line 27788 "parse.cc"
    break;

  case 1310: /* search_term: scalar88  */
#line 8939 "parse.y"
                               {
                  cbl_field_t *key = field_at((yyvsp[0].refer)->field->parent);
                  parser_bsearch_when( search_current(), key, *(yyvsp[0].refer),
                                       is_ascending_key(key) );
                }
#line 27798 "parse.cc"
    break;

  case 1312: /* search_expr: LITERAL  */
#line 8946 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 27804 "parse.cc"
    break;

  case 1315: /* sort_table: SORT tableref sort_keys sort_dup sort_seq  */
#line 8953 "parse.y"
                                                                 {
                  statement_begin((yylsp[-4]), SORT);
                  std::vector <cbl_key_t> keys((yyvsp[-2].sort_keys)->key_list.size());
		  if( ! is_table((yyvsp[-3].refer)->field) ) {
		    error_msg((yylsp[-4]), "%s has no OCCURS clause", (yyvsp[-3].refer)->field->name);
		  }
                  // 23) If data-name-1 is omitted, the data item referenced by
                  // data-name-2 is the key data item.
		  int i = 0;
                  for( auto k : (yyvsp[-2].sort_keys)->key_list ) {
                    if( k.fields.empty() ) {
                      k.fields.push_back((yyvsp[-3].refer)->field);
                    }
                    keys.at(i++) = cbl_key_t(k);
                  }

                  parser_sort( *(yyvsp[-3].refer), (yyvsp[-1].boolean), (yyvsp[0].alphasym), keys );
                }
#line 27827 "parse.cc"
    break;

  case 1316: /* sort_table: SORT tableref sort_dup sort_seq  */
#line 8971 "parse.y"
                                                       {
                  statement_begin((yylsp[-3]), SORT);
		  if( ! is_table((yyvsp[-2].refer)->field) ) {
		    error_msg((yylsp[-3]), "%s has no OCCURS clause", (yyvsp[-2].refer)->field->name);
		  }
                  cbl_key_t
                    key = cbl_key_t((yyvsp[-2].refer)->field->occurs.keys[0]),
                    guess(1, &(yyvsp[-2].refer)->field);
                  
                  if( key.fields.empty() ) key = guess;
                  std::vector<cbl_key_t> keys(1, key);
                  parser_sort( *(yyvsp[-2].refer), (yyvsp[-1].boolean), (yyvsp[0].alphasym), keys );
                }
#line 27845 "parse.cc"
    break;

  case 1317: /* sort_file: SORT FILENAME sort_keys sort_dup sort_seq sort_input sort_output  */
#line 8988 "parse.y"
                {
                  statement_begin((yylsp[-6]), SORT);
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[-5].string));
                  if( !(e && e->type == SymFile) ) {
                    error_msg((yylsp[-5]), "invalid file name");
                    YYERROR;
                  }
                  cbl_file_t *file = cbl_file_of(e);
                  std::vector <cbl_key_t> keys((yyvsp[-4].sort_keys)->key_list.size());
		  std::copy( (yyvsp[-4].sort_keys)->key_list.begin(),
			     (yyvsp[-4].sort_keys)->key_list.end(), keys.begin() );

                  size_t ninput = (yyvsp[-1].sort_io)->nfile();
                  size_t noutput = (yyvsp[0].sort_io)->nfile();
                  cbl_file_t **inputs = NULL, **outputs = NULL;
                  cbl_perform_tgt_t *in_proc = NULL, *out_proc = NULL;

                  if( ninput > 0 ) {
                    inputs = new cbl_file_t * [ ninput ];
                    std::copy((yyvsp[-1].sort_io)->file_list.files.begin(),
                              (yyvsp[-1].sort_io)->file_list.files.end(), inputs);
                  } else {
                    in_proc = &(yyvsp[-1].sort_io)->tgt;
                  }
                  if( noutput > 0 ) {
                    outputs = new cbl_file_t * [ noutput ];
                    std::copy((yyvsp[0].sort_io)->file_list.files.begin(),
                              (yyvsp[0].sort_io)->file_list.files.end(), outputs);
                  } else {
                    out_proc = &(yyvsp[0].sort_io)->tgt;
                  }

                  parser_file_sort( file,
                                    (yyvsp[-3].boolean),
                                    (yyvsp[-2].alphasym),
                                    keys, 
                                    ninput, inputs,
                                    noutput, outputs,
                                    in_proc, out_proc );
                }
#line 27890 "parse.cc"
    break;

  case 1318: /* sort_file: SORT FILENAME sort_keys sort_dup sort_seq error  */
#line 9029 "parse.y"
                {
                  error_msg((yylsp[-4]), "SORT missing INPUT or OUTPUT phrase");
                }
#line 27898 "parse.cc"
    break;

  case 1319: /* sort_keys: sort_key  */
#line 9034 "parse.y"
                         {
                  (yyval.sort_keys) = new sort_keys_t();
                  (yyval.sort_keys)->key_list.push_back(*(yyvsp[0].sort_key));
                }
#line 27907 "parse.cc"
    break;

  case 1320: /* sort_keys: sort_keys sort_key  */
#line 9038 "parse.y"
                                   { (yyval.sort_keys)->key_list.push_back(*(yyvsp[0].sort_key)); }
#line 27913 "parse.cc"
    break;

  case 1321: /* sort_key: on forward_order key field_list  */
#line 9042 "parse.y"
                {
                  (yyval.sort_key) = new sort_key_t( (yyvsp[-2].boolean), *(yyvsp[0].fields) );
                }
#line 27921 "parse.cc"
    break;

  case 1322: /* sort_key: on forward_order key  */
#line 9046 "parse.y"
                {
                  field_list_t flist;
                  (yyval.sort_key) = new sort_key_t( (yyvsp[-1].boolean), flist );
                }
#line 27930 "parse.cc"
    break;

  case 1323: /* forward_order: ASCENDING  */
#line 9052 "parse.y"
                           { (yyval.boolean) = true; }
#line 27936 "parse.cc"
    break;

  case 1324: /* forward_order: DESCENDING  */
#line 9053 "parse.y"
                           { (yyval.boolean) = false; }
#line 27942 "parse.cc"
    break;

  case 1325: /* field_list: name  */
#line 9055 "parse.y"
                     { (yyval.fields) = new field_list_t((yyvsp[0].field)); }
#line 27948 "parse.cc"
    break;

  case 1326: /* field_list: field_list name  */
#line 9056 "parse.y"
                                { (yyvsp[-1].fields)->fields.push_back((yyvsp[0].field)); }
#line 27954 "parse.cc"
    break;

  case 1327: /* sort_dup: %empty  */
#line 9059 "parse.y"
                       { (yyval.boolean) = false; }
#line 27960 "parse.cc"
    break;

  case 1328: /* sort_dup: with DUPLICATES in order  */
#line 9060 "parse.y"
                                         { (yyval.boolean) = true; }
#line 27966 "parse.cc"
    break;

  case 1329: /* sort_seq: %empty  */
#line 9062 "parse.y"
                       { (yyval.alphasym) = NULL; }
#line 27972 "parse.cc"
    break;

  case 1330: /* sort_seq: collating SEQUENCE is ctx_name  */
#line 9064 "parse.y"
                {
                  symbol_elem_t *e = symbol_alphabet(PROGRAM, (yyvsp[0].string));
                  if( !e ) {
                    error_msg((yylsp[0]), "not an alphabet: '%s'", (yyvsp[0].string));
                    (yyval.alphasym) = NULL;
                  }
                  (yyval.alphasym) = cbl_alphabet_of(e);
                }
#line 27985 "parse.cc"
    break;

  case 1331: /* sort_input: USING filenames  */
#line 9075 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].files));
                  delete (yyvsp[0].files);
                }
#line 27994 "parse.cc"
    break;

  case 1332: /* sort_input: INPUT PROCEDURE is sort_target  */
#line 9080 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].tgt));
                  delete (yyvsp[0].tgt);
                }
#line 28003 "parse.cc"
    break;

  case 1333: /* sort_output: GIVING filenames  */
#line 9086 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].files));
                }
#line 28011 "parse.cc"
    break;

  case 1334: /* sort_output: OUTPUT PROCEDURE is sort_target  */
#line 9090 "parse.y"
                {
                  (yyval.sort_io) = new file_sort_io_t(*(yyvsp[0].tgt));
                }
#line 28019 "parse.cc"
    break;

  case 1335: /* sort_target: label_name  */
#line 9096 "parse.y"
                {
                  (yyval.tgt) = new cbl_perform_tgt_t((yyvsp[0].label));
                }
#line 28027 "parse.cc"
    break;

  case 1336: /* sort_target: label_name THRU label_name  */
#line 9100 "parse.y"
                {
                  (yyval.tgt) = new cbl_perform_tgt_t((yyvsp[-2].label), (yyvsp[0].label));
                }
#line 28035 "parse.cc"
    break;

  case 1337: /* release: RELEASE NAME FROM scalar  */
#line 9106 "parse.y"
                {
                  statement_begin((yylsp[-3]), RELEASE);
                  symbol_elem_t *record = symbol_find((yylsp[-2]), (yyvsp[-2].string));
                  parser_move(cbl_field_of(record), *(yyvsp[0].refer));
                  parser_release(cbl_field_of(record));
                }
#line 28046 "parse.cc"
    break;

  case 1338: /* release: RELEASE NAME  */
#line 9113 "parse.y"
                {
                  statement_begin((yylsp[-1]), RELEASE);
                  symbol_elem_t *record = symbol_find((yylsp[0]), (yyvsp[0].string));
                  parser_release(cbl_field_of(record));
                }
#line 28056 "parse.cc"
    break;

  case 1341: /* return_impl: RETURN return_body  */
#line 9125 "parse.y"
                {
                  cbl_file_t *file = cbl_file_of(symbol_at(current_sort_file));
                  parser_return_finish(file);
                  current_sort_file = (yyvsp[0].number);
                }
#line 28066 "parse.cc"
    break;

  case 1342: /* return_cond: RETURN return_body return_outputs  */
#line 9133 "parse.y"
                {
                  cbl_file_t *file = cbl_file_of(symbol_at(current_sort_file));
                  parser_return_finish(file);
                  current_sort_file = (yyvsp[-1].number);
                }
#line 28076 "parse.cc"
    break;

  case 1345: /* return_body: return_file  */
#line 9144 "parse.y"
                {
                  file_return_args.call_parser_return_start();
                  }
#line 28084 "parse.cc"
    break;

  case 1346: /* return_body: return_file INTO scalar  */
#line 9148 "parse.y"
                {
                  file_return_args.call_parser_return_start(*(yyvsp[0].refer));
                }
#line 28092 "parse.cc"
    break;

  case 1347: /* return_file: filename  */
#line 9154 "parse.y"
                {
                  statement_begin((yyloc), RETURN);
                  (yyval.number) = current_sort_file; // preserve current sort file
                  current_sort_file = symbol_index(symbol_elem_of((yyvsp[0].file)));
                  file_return_args.init((yyvsp[0].file));
                }
#line 28103 "parse.cc"
    break;

  case 1348: /* return_file: filename RECORD  */
#line 9161 "parse.y"
                {
                  statement_begin((yyloc), RETURN);
                  (yyval.number) = current_sort_file; // preserve current sort file
                  current_sort_file = symbol_index(symbol_elem_of((yyvsp[-1].file)));
                  file_return_args.init((yyvsp[-1].file));
                }
#line 28114 "parse.cc"
    break;

  case 1352: /* output_atend: END  */
#line 9174 "parse.y"
                    {
                  assert((yyvsp[0].number) == END || (yyvsp[0].number) == NOT);
                  auto func = (yyvsp[0].number) == END?
                    parser_return_atend : parser_return_notatend ;
                  func(cbl_file_of(symbol_at(current_sort_file)));
                }
#line 28125 "parse.cc"
    break;

  case 1353: /* filenames: filename  */
#line 9181 "parse.y"
                         { (yyval.files) = new file_list_t((yyvsp[0].file)); }
#line 28131 "parse.cc"
    break;

  case 1354: /* filenames: filenames filename  */
#line 9182 "parse.y"
                                   { (yyvsp[-1].files)->files.push_back((yyvsp[0].file)); }
#line 28137 "parse.cc"
    break;

  case 1355: /* filename: NAME  */
#line 9185 "parse.y"
                {
                  struct symbol_elem_t *e = symbol_file(PROGRAM, (yyvsp[0].string));
                  if( !(e && e->type == SymFile) ) {
                    error_msg((yylsp[0]), "invalid file name");
                    YYERROR;
                  }
                  (yyval.file) = cbl_file_of(e);
                }
#line 28150 "parse.cc"
    break;

  case 1356: /* label_name: NAME  */
#line 9196 "parse.y"
                {
                  struct cbl_label_t *label = symbol_label(PROGRAM,
                                                           LblNone, 0, (yyvsp[0].string));
                  if( !label ) { // no line number for forward declaraion
                    label = label_add((yylsp[0]), LblNone, (yyvsp[0].string));
                  }
                  (yyval.label) = label;
                }
#line 28163 "parse.cc"
    break;

  case 1359: /* backward: %empty  */
#line 9209 "parse.y"
                         { (yyval.boolean) = false; }
#line 28169 "parse.cc"
    break;

  case 1360: /* backward: BACKWARD  */
#line 9210 "parse.y"
                         { (yyval.boolean) = true;  }
#line 28175 "parse.cc"
    break;

  case 1361: /* inspect: INSPECT backward inspected TALLYING tallies  */
#line 9213 "parse.y"
                {
                  statement_begin((yylsp[-4]), INSPECT);
                  ast_inspect( (yyloc), *(yyvsp[-2].refer), (yyvsp[-3].boolean), *(yyvsp[0].insp_all) );
                }
#line 28184 "parse.cc"
    break;

  case 1362: /* inspect: INSPECT backward inspected TALLYING tallies REPLACING replacements  */
#line 9218 "parse.y"
                {
                  if( is_constant((yyvsp[-4].refer)->field) ) {
                    auto name = nice_name_of((yyvsp[-4].refer)->field);
                    if( !name[0] ) name = "its argument";
                    error_msg((yylsp[-4]), "INSPECT cannot write to %s", name);
                    YYERROR;
                  }
                  statement_begin((yylsp[-6]), INSPECT);
                  // All tallying is done before any replacing
                  ast_inspect( (yyloc), *(yyvsp[-4].refer), (yyvsp[-5].boolean), *(yyvsp[-2].insp_all) );
                  ast_inspect( (yyloc), *(yyvsp[-4].refer), (yyvsp[-5].boolean), *(yyvsp[0].insp_all) );
                }
#line 28201 "parse.cc"
    break;

  case 1363: /* inspect: INSPECT backward inspected REPLACING replacements  */
#line 9231 "parse.y"
                {
                  if( is_constant((yyvsp[-2].refer)->field) ) {
                    auto name = nice_name_of((yyvsp[-2].refer)->field);
                    if( !name[0] ) name = "its argument";
                    error_msg((yylsp[-2]), "INSPECT cannot write to %s", name);
                    YYERROR;
                  }
                  statement_begin((yylsp[-4]), INSPECT);
                  ast_inspect( (yyloc), *(yyvsp[-2].refer), (yyvsp[-3].boolean), *(yyvsp[0].insp_all) );
                }
#line 28216 "parse.cc"
    break;

  case 1364: /* inspect: INSPECT backward inspected CONVERTING alpha_val TO all alpha_val insp_mtqual  */
#line 9244 "parse.y"
                {
		  if( (yyvsp[-2].boolean) ) {
		    (yyvsp[-1].refer)->all = true;
		    if( is_literal((yyvsp[-1].refer)->field) ) {
		      if( (yyvsp[-1].refer)->field->data.capacity != 1 ) {
			error_msg((yylsp[-2]), "ALL %s must be a single character",
				 (yyvsp[-1].refer)->field->data.initial);
			YYERROR;
		      }
		    } else {
		      error_msg((yylsp[-2]), "ALL must be part of a figurative constant");
		      YYERROR;
		    }
		  } else {
		    cbl_field_t *match = (yyvsp[-4].refer)->field,
		                *replace = (yyvsp[-1].refer)->field;
		    if( is_literal(match) && is_literal(replace) ) {
		      if( !(yyvsp[-4].refer)->all && !(yyvsp[-1].refer)->all) {
			if( match->data.capacity != replace->data.capacity ) {
			  error_msg((yylsp[-4]), "%qs, size %u NOT EQUAL %qs, size %u",
				    nice_name_of(match), match->data.capacity, 
				    nice_name_of(replace), replace->data.capacity);
			  YYERROR;
			}
		      }
		    }
		  }
                  if( is_constant((yyvsp[-6].refer)->field) ) {
                    auto name = nice_name_of((yyvsp[-6].refer)->field);
                    if( !name[0] ) name = "its argument";
                    error_msg((yylsp[-6]), "INSPECT cannot write to %s", name);
                    YYERROR;
                  }
                  statement_begin((yylsp[-8]), INSPECT);
                  // IBM Format 4 does not show the qualifiers as optional, but
                  // they don't appear in Listing-15-1.
                  parser_inspect_conv( *(yyvsp[-6].refer), (yyvsp[-7].boolean),
                                       *(yyvsp[-4].refer),
                                       *(yyvsp[-1].refer),
                                       (yyvsp[0].insp_match)->before, (yyvsp[0].insp_match)->after );
                }
#line 28262 "parse.cc"
    break;

  case 1365: /* $@35: %empty  */
#line 9287 "parse.y"
                { need_nume_set(); }
#line 28268 "parse.cc"
    break;

  case 1366: /* tallies: $@35 tally  */
#line 9288 "parse.y"
                {
                  (yyval.insp_all) = new cbl_inspect_opers_t( 1, *(yyvsp[0].inspect) );
                }
#line 28276 "parse.cc"
    break;

  case 1367: /* $@36: %empty  */
#line 9291 "parse.y"
                        { need_nume_set(); }
#line 28282 "parse.cc"
    break;

  case 1368: /* tallies: tallies $@36 tally  */
#line 9292 "parse.y"
                {
                  (yyval.insp_all) = (yyvsp[-2].insp_all);
                  cbl_inspect_t& next(*(yyvsp[0].inspect));

                  if( !next.tally.field ) {
                    // prior tally swallowed one too many
                    cbl_inspect_t& prior = (yyval.insp_all)->back();
                    assert(prior.nbound() > 0);
                    cbl_inspect_oper_t& prior_op = prior.back();
                    assert(! prior_op.matches.empty() );
                    assert(prior_op.n_identifier_3() > 0 );
                    cbl_inspect_match_t wrong_match = prior_op.matches.back();
                    dbgmsg("moving overeager tally to next clause");
                    dump_inspect_match(wrong_match);
                    next.tally = wrong_match.premature_tally();
                    if( wrong_match.empty() ) {
                      prior_op.matches.pop_back();
                    }
                  }
                  if( !next.tally.field ) {
                    error_msg((yyloc), "missing summation field before FOR");
                    YYERROR;
                  }
                  (yyval.insp_all)->push_back(next);
                }
#line 28312 "parse.cc"
    break;

  case 1369: /* tally: numeref FOR tally_fors  */
#line 9327 "parse.y"
                { 
                  if( yydebug && !(yyvsp[-2].refer) ) {
                    dbgmsg("tally: caution: missing summation field before FOR");
                  }
                  (yyval.inspect) = (yyvsp[0].insp_one);
                  if( (yyvsp[-2].refer) ) (yyval.inspect)->tally = *(yyvsp[-2].refer);
                }
#line 28324 "parse.cc"
    break;

  case 1370: /* tally_fors: tally_forth  */
#line 9336 "parse.y"
                            { (yyval.insp_one) = new cbl_inspect_t(1, *(yyvsp[0].insp_oper)); }
#line 28330 "parse.cc"
    break;

  case 1371: /* tally_fors: tally_fors tally_forth  */
#line 9337 "parse.y"
                                       { (yyval.insp_one)->push_back(*(yyvsp[0].insp_oper)); (yyval.insp_one) = (yyvsp[-1].insp_one); }
#line 28336 "parse.cc"
    break;

  case 1372: /* tally_forth: CHARACTERS insp_mtqual scalar  */
#line 9341 "parse.y"
                {
                  // Add ensuing scalar as if it were an argument to CHARACTERS.
                  // It will be moved to the succeeding FOR as its tally.
                  dbgmsg("saving overeager tally for next clause");
                  (yyvsp[-1].insp_match)->save_premature_tally(*(yyvsp[0].refer));
                  (yyval.insp_oper) = new cbl_inspect_oper_t(*(yyvsp[-1].insp_match));
                  dump_inspect_match((yyval.insp_oper)->matches.back());
                }
#line 28349 "parse.cc"
    break;

  case 1373: /* tally_forth: CHARACTERS insp_mtqual  */
#line 9350 "parse.y"
                {
                  (yyval.insp_oper) = new cbl_inspect_oper_t(*(yyvsp[0].insp_match));
                }
#line 28357 "parse.cc"
    break;

  case 1374: /* tally_forth: ALL tally_matches  */
#line 9354 "parse.y"
                { (yyvsp[0].insp_oper)->bound = bound_all_e;
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
                }
#line 28365 "parse.cc"
    break;

  case 1375: /* tally_forth: LEADING tally_matches  */
#line 9358 "parse.y"
                { (yyvsp[0].insp_oper)->bound = bound_leading_e;
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
                }
#line 28373 "parse.cc"
    break;

  case 1376: /* tally_forth: TRAILING tally_matches  */
#line 9362 "parse.y"
                { (yyvsp[0].insp_oper)->bound = bound_trailing_e;
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
		  if( ! dialect_mf() ) {
		    dialect_error((yylsp[-1]), "TRAILING", "mf");
		  }
                }
#line 28384 "parse.cc"
    break;

  case 1377: /* tally_matches: tally_match  */
#line 9370 "parse.y"
                            { (yyval.insp_oper) = new cbl_inspect_oper_t(*(yyvsp[0].insp_match)); }
#line 28390 "parse.cc"
    break;

  case 1378: /* tally_matches: tally_matches tally_match  */
#line 9372 "parse.y"
                { // add to the list of matches for an operand
                  (yyvsp[-1].insp_oper)->matches.push_back(*(yyvsp[0].insp_match));
                }
#line 28398 "parse.cc"
    break;

  case 1379: /* tally_match: alpha_val insp_mtqual  */
#line 9377 "parse.y"
                { // include the matching field with the qualifiers
                  (yyval.insp_match) = (yyvsp[0].insp_match);
                  (yyval.insp_match)->matching(*(yyvsp[-1].refer));
                }
#line 28407 "parse.cc"
    break;

  case 1380: /* numeref: %empty  */
#line 9383 "parse.y"
                       { (yyval.refer) = NULL; need_nume_set(false); }
#line 28413 "parse.cc"
    break;

  case 1381: /* numeref: nume subscripts  */
#line 9385 "parse.y"
                {
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field), (yyvsp[0].refers)->vectorize());
                }
#line 28421 "parse.cc"
    break;

  case 1382: /* numeref: nume  */
#line 9388 "parse.y"
                     { (yyval.refer) = new cbl_refer_t((yyvsp[0].field)); }
#line 28427 "parse.cc"
    break;

  case 1383: /* nume: qnume  */
#line 9391 "parse.y"
                      {
                  (yyval.field) = NULL;
                  struct symbol_elem_t *e = NULL;
                  size_t index = 0;
		  auto names( name_queue.pop() );

                  for( ; !names.empty(); names.pop_front() ) {
		    auto nameloc = names.front();
                    if( (e = symbol_field(PROGRAM,
                                          index, nameloc.name)) == NULL ) {
                      error_msg(nameloc.loc, "DATA-ITEM '%s' not found", nameloc.name );
                      YYERROR;
                    }
                    (yyval.field) = cbl_field_of(e);
                    index = symbol_index(e);
                  }
                }
#line 28449 "parse.cc"
    break;

  case 1384: /* qnume: "Name"  */
#line 9410 "parse.y"
                                { name_queue.qualify((yylsp[0]), (yyvsp[0].string)); }
#line 28455 "parse.cc"
    break;

  case 1385: /* qnume: qnume inof "Name"  */
#line 9411 "parse.y"
                                { name_queue.qualify((yylsp[0]), (yyvsp[0].string)); }
#line 28461 "parse.cc"
    break;

  case 1386: /* replacements: replacement  */
#line 9415 "parse.y"
                {
                  cbl_inspect_t inspect( cbl_refer_t(), *(yyvsp[0].insp_one) );
                  (yyval.insp_all) = new cbl_inspect_opers_t(1, inspect);
                }
#line 28470 "parse.cc"
    break;

  case 1387: /* replacement: replace_oper  */
#line 9421 "parse.y"
                {
                  (yyval.insp_one) = new cbl_inspect_t;
                  (yyval.insp_one)->push_back( cbl_inspect_oper_t((yyvsp[0].insp_oper)->bound, (yyvsp[0].insp_oper)->replaces) );
                }
#line 28479 "parse.cc"
    break;

  case 1388: /* replacement: replacement replace_oper  */
#line 9426 "parse.y"
                {
                  (yyval.insp_one)->push_back( cbl_inspect_oper_t((yyvsp[0].insp_oper)->bound, (yyvsp[0].insp_oper)->replaces)  );
                }
#line 28487 "parse.cc"
    break;

  case 1389: /* replace_oper: CHARACTERS BY alpha_val insp_mtqual  */
#line 9431 "parse.y"
                {
                  (yyval.insp_oper) = new cbl_inspect_oper_t( cbl_inspect_replace_t(NULL,
                                                                     *(yyvsp[-1].refer),
                                                                     (yyvsp[0].insp_match)->before,
                                                                     (yyvsp[0].insp_match)->after) );
                }
#line 28498 "parse.cc"
    break;

  case 1390: /* replace_oper: first_leading x_by_ys  */
#line 9438 "parse.y"
                {
                  (yyval.insp_oper) = (yyvsp[0].insp_oper);
                  (yyval.insp_oper)->bound = static_cast<cbl_inspect_bound_t>((yyvsp[-1].number));
                }
#line 28507 "parse.cc"
    break;

  case 1391: /* x_by_ys: x_by_y  */
#line 9445 "parse.y"
                {
                  (yyval.insp_oper) = new cbl_inspect_oper_t(*(yyvsp[0].insp_replace));
                }
#line 28515 "parse.cc"
    break;

  case 1392: /* x_by_ys: x_by_ys x_by_y  */
#line 9449 "parse.y"
                {
                  (yyval.insp_oper)->replaces.push_back(*(yyvsp[0].insp_replace));
                }
#line 28523 "parse.cc"
    break;

  case 1393: /* x_by_y: alpha_val BY alpha_val insp_mtqual  */
#line 9454 "parse.y"
                {
                  (yyval.insp_replace) = new cbl_inspect_replace_t(*(yyvsp[-3].refer), *(yyvsp[-1].refer),
                                                   (yyvsp[0].insp_match)->before, (yyvsp[0].insp_match)->after);
                }
#line 28532 "parse.cc"
    break;

  case 1394: /* insp_mtqual: %empty  */
#line 9461 "parse.y"
                       { (yyval.insp_match) = new cbl_inspect_match_t; }
#line 28538 "parse.cc"
    break;

  case 1396: /* insp_quals: insp_qual  */
#line 9464 "parse.y"
                           {
                  (yyval.insp_match) = new cbl_inspect_match_t;
                  if( (yyvsp[0].insp_qual).before ) {
                    (yyval.insp_match)->before = *(yyvsp[0].insp_qual).qual;
                  } else {
                    (yyval.insp_match)->after = *(yyvsp[0].insp_qual).qual;
                  }
                  dump_inspect_match(*(yyval.insp_match));
                }
#line 28552 "parse.cc"
    break;

  case 1397: /* insp_quals: insp_quals insp_qual  */
#line 9474 "parse.y"
                {
                  if( ((yyval.insp_match)->before.active() && (yyvsp[0].insp_qual).before) ||
                      ((yyval.insp_match)->after.active() && !(yyvsp[0].insp_qual).before) ) {
                    error_msg((yylsp[0]), "duplicate BEFORE/AFTER phrase");
                    YYERROR;
                  }
                  auto p = (yyvsp[0].insp_qual).before? &(yyval.insp_match)->before : &(yyval.insp_match)->after;
                  *p = *(yyvsp[0].insp_qual).qual;
                }
#line 28566 "parse.cc"
    break;

  case 1398: /* insp_qual: befter initial alpha_val  */
#line 9485 "parse.y"
                {
                  // NIST NC115A: INITIAL has no effect (GnuCOBOL & ISO say same).
                  bool initial = (yyvsp[-1].number) == INITIAL_kw;
                  (yyval.insp_qual).before = (yyvsp[-2].number) == BEFORE;
                  (yyval.insp_qual).qual = new cbl_inspect_qual_t(initial, *(yyvsp[0].refer));
                }
#line 28577 "parse.cc"
    break;

  case 1399: /* first_leading: FIRST  */
#line 9493 "parse.y"
                           { (yyval.number) = bound_first_e; }
#line 28583 "parse.cc"
    break;

  case 1400: /* first_leading: ALL  */
#line 9494 "parse.y"
                           { (yyval.number) = bound_all_e; }
#line 28589 "parse.cc"
    break;

  case 1401: /* first_leading: LEADING  */
#line 9495 "parse.y"
                           { (yyval.number) = bound_leading_e; }
#line 28595 "parse.cc"
    break;

  case 1402: /* first_leading: TRAILING  */
#line 9496 "parse.y"
                           { (yyval.number) = bound_trailing_e;
		  if( ! dialect_mf() ) {
		    dialect_error((yylsp[0]), "TRAILING", "mf");
		  }
		}
#line 28605 "parse.cc"
    break;

  case 1403: /* alphaval: LITERAL  */
#line 9503 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 28611 "parse.cc"
    break;

  case 1404: /* alphaval: reserved_value  */
#line 9505 "parse.y"
                {
                  (yyval.refer) = new_reference( constant_of(constant_index((yyvsp[0].number))) );
                }
#line 28619 "parse.cc"
    break;

  case 1406: /* befter: BEFORE  */
#line 9511 "parse.y"
                       { (yyval.number) = BEFORE; }
#line 28625 "parse.cc"
    break;

  case 1407: /* befter: AFTER  */
#line 9512 "parse.y"
                       { (yyval.number) = AFTER; }
#line 28631 "parse.cc"
    break;

  case 1408: /* initialize: INITIALIZE move_tgts  */
#line 9516 "parse.y"
                {
                  statement_begin((yylsp[-1]), INITIALIZE);
                  initialize_statement( (yyvsp[0].targets)->targets, false, data_category_none );
                }
#line 28640 "parse.cc"
    break;

  case 1409: /* initialize: INITIALIZE move_tgts with "FILLER"  */
#line 9521 "parse.y"
                {
                  statement_begin((yylsp[-3]), INITIALIZE);
                  initialize_statement( (yyvsp[-2].targets)->targets, true, data_category_none );
                }
#line 28649 "parse.cc"
    break;

  case 1410: /* initialize: INITIALIZE move_tgts init_clause  */
#line 9526 "parse.y"
                {
                  statement_begin((yylsp[-2]), INITIALIZE);
		  initialize_statement( (yyvsp[-1].targets)->targets, false, (yyvsp[0].init_stmt)->category,
                                        (yyvsp[0].init_stmt)->replacement);
                }
#line 28659 "parse.cc"
    break;

  case 1411: /* initialize: INITIALIZE move_tgts init_clause with "FILLER"  */
#line 9532 "parse.y"
                {
                  statement_begin((yylsp[-4]), INITIALIZE);
                  initialize_statement( (yyvsp[-3].targets)->targets, true, (yyvsp[-2].init_stmt)->category,
                                        (yyvsp[-2].init_stmt)->replacement);
                }
#line 28669 "parse.cc"
    break;

  case 1412: /* initialize: INITIALIZE move_tgts with "FILLER" init_clause  */
#line 9538 "parse.y"
                {
                  statement_begin((yylsp[-4]), INITIALIZE);
                  initialize_statement( (yyvsp[-3].targets)->targets, true, (yyvsp[0].init_stmt)->category,
                                        (yyvsp[0].init_stmt)->replacement );
                }
#line 28679 "parse.cc"
    break;

  case 1414: /* init_clause: init_categora  */
#line 9547 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t(false);
                  (yyval.init_stmt)->category = (yyvsp[0].data_category);
                }
#line 28688 "parse.cc"
    break;

  case 1415: /* init_clause: init_categora to VALUE  */
#line 9552 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t(true);
                  (yyval.init_stmt)->category = (yyvsp[-2].data_category);
                }
#line 28697 "parse.cc"
    break;

  case 1416: /* init_clause: init_categora to VALUE init_value  */
#line 9557 "parse.y"
                {
                  (yyval.init_stmt) = (yyvsp[0].init_stmt);
                  (yyval.init_stmt)->category = (yyvsp[-3].data_category);
                }
#line 28706 "parse.cc"
    break;

  case 1417: /* init_value: init_replace then to DEFAULT  */
#line 9564 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t( *(yyvsp[-3].replacements));
                }
#line 28714 "parse.cc"
    break;

  case 1418: /* init_value: init_replace  */
#line 9568 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t( *(yyvsp[0].replacements));
                }
#line 28722 "parse.cc"
    break;

  case 1419: /* init_value: then to DEFAULT  */
#line 9572 "parse.y"
                {
                  (yyval.init_stmt) = new init_statement_t( false );
                }
#line 28730 "parse.cc"
    break;

  case 1421: /* init_categora: ALL  */
#line 9578 "parse.y"
                    { (yyval.data_category) = data_category_all; }
#line 28736 "parse.cc"
    break;

  case 1422: /* init_category: ALPHABETIC  */
#line 9580 "parse.y"
                                    { (yyval.data_category) = data_alphabetic_e; }
#line 28742 "parse.cc"
    break;

  case 1423: /* init_category: ALPHANUMERIC  */
#line 9581 "parse.y"
                                    { (yyval.data_category) = data_alphanumeric_e; }
#line 28748 "parse.cc"
    break;

  case 1424: /* init_category: "ALPHANUMERIC-EDITED"  */
#line 9582 "parse.y"
                                    { (yyval.data_category) = data_alphanumeric_edited_e; }
#line 28754 "parse.cc"
    break;

  case 1425: /* init_category: DBCS  */
#line 9583 "parse.y"
                                    { (yyval.data_category) = data_dbcs_e; }
#line 28760 "parse.cc"
    break;

  case 1426: /* init_category: EGCS  */
#line 9584 "parse.y"
                                    { (yyval.data_category) = data_egcs_e; }
#line 28766 "parse.cc"
    break;

  case 1427: /* init_category: NATIONAL  */
#line 9585 "parse.y"
                                    { (yyval.data_category) = data_national_e; }
#line 28772 "parse.cc"
    break;

  case 1428: /* init_category: "NATIONAL-EDITED"  */
#line 9586 "parse.y"
                                    { (yyval.data_category) = data_national_edited_e; }
#line 28778 "parse.cc"
    break;

  case 1429: /* init_category: NUMERIC  */
#line 9587 "parse.y"
                                    { (yyval.data_category) = data_numeric_e; }
#line 28784 "parse.cc"
    break;

  case 1430: /* init_category: NUMERIC_EDITED  */
#line 9588 "parse.y"
                                    { (yyval.data_category) = data_numeric_edited_e; }
#line 28790 "parse.cc"
    break;

  case 1431: /* init_replace: then REPLACING init_bys  */
#line 9591 "parse.y"
                                        { (yyval.replacements) = (yyvsp[0].replacements); }
#line 28796 "parse.cc"
    break;

  case 1432: /* init_bys: init_by  */
#line 9594 "parse.y"
                {
                  (yyval.replacements) = new category_map_t;
                  category_map_t& replacements = *(yyval.replacements);
                  replacements[(yyvsp[0].replacement).category] = (yyvsp[0].replacement).replacement;
                }
#line 28806 "parse.cc"
    break;

  case 1433: /* init_bys: init_bys init_by  */
#line 9600 "parse.y"
                {
                  (yyval.replacements) = (yyvsp[-1].replacements);
                  category_map_t& replacements = *(yyval.replacements);
                  replacements[(yyvsp[0].replacement).category] = (yyvsp[0].replacement).replacement;
                }
#line 28816 "parse.cc"
    break;

  case 1434: /* init_by: init_category data BY init_data  */
#line 9607 "parse.y"
                {
                  (yyval.replacement).category = (yyvsp[-3].data_category);
                  (yyval.replacement).replacement = (yyvsp[0].refer);
                }
#line 28825 "parse.cc"
    break;

  case 1436: /* init_data: "numeric literal"  */
#line 9613 "parse.y"
                         {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].numstr).string, (yyvsp[0].numstr).radix));
                }
#line 28833 "parse.cc"
    break;

  case 1439: /* call_impl: CALL call_body  */
#line 9623 "parse.y"
                {
                  ffi_args_t *params = (yyvsp[0].ffi_impl).using_params;
                  if( yydebug && params ) params->dump();
                  size_t narg = params? params->elems.size() : 0;
                  std::vector <cbl_ffi_arg_t> args(narg);
		  cbl_ffi_arg_t *pargs = NULL;
                  if( narg > 0 ) {
		    std::copy( params->elems.begin(),
			       params->elems.end(), args.begin() );
                    pargs = args.data();
                  }
                  ast_call( (yyvsp[0].ffi_impl).loc, *(yyvsp[0].ffi_impl).ffi_name,
                               *(yyvsp[0].ffi_impl).ffi_returning, narg, pargs, NULL, NULL, false );
                  current.declaratives_evaluate();
                }
#line 28853 "parse.cc"
    break;

  case 1440: /* call_cond: CALL call_body call_excepts  */
#line 9640 "parse.y"
                {
                  ffi_args_t *params = (yyvsp[-1].ffi_impl).using_params;
                  if( yydebug && params ) params->dump();
                  size_t narg = params? params->elems.size() : 0;
                  std::vector <cbl_ffi_arg_t> args(narg);
		  cbl_ffi_arg_t *pargs = NULL;
                  if( narg > 0 ) {
		    std::copy( params->elems.begin(),
			       params->elems.end(), args.begin() );
                    pargs = args.data();
                  }
                  ast_call( (yyvsp[-1].ffi_impl).loc, *(yyvsp[-1].ffi_impl).ffi_name,
                               *(yyvsp[-1].ffi_impl).ffi_returning, narg, pargs,
                               (yyvsp[0].error).on_error, (yyvsp[0].error).not_error, false );
                  current.declaratives_evaluate();
                }
#line 28874 "parse.cc"
    break;

  case 1443: /* call_body: ffi_name  */
#line 9662 "parse.y"
                { statement_begin((yylsp[0]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[0].refer);
                  (yyval.ffi_impl).using_params = NULL;
                  (yyval.ffi_impl).ffi_returning = cbl_refer_t::empty();
                }
#line 28884 "parse.cc"
    break;

  case 1444: /* call_body: ffi_name USING parameters  */
#line 9669 "parse.y"
                { statement_begin((yylsp[-2]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[-2].refer);
                  (yyval.ffi_impl).using_params = (yyvsp[0].ffi_args);
                  (yyval.ffi_impl).ffi_returning = cbl_refer_t::empty();
                }
#line 28894 "parse.cc"
    break;

  case 1445: /* call_body: ffi_name call_returning scalar  */
#line 9675 "parse.y"
                { statement_begin((yylsp[-2]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[-2].refer);
                  (yyval.ffi_impl).using_params = NULL;
                  (yyval.ffi_impl).ffi_returning = (yyvsp[0].refer);
                }
#line 28904 "parse.cc"
    break;

  case 1446: /* call_body: ffi_name USING parameters call_returning scalar  */
#line 9681 "parse.y"
                { statement_begin((yylsp[-4]), CALL);
                  (yyval.ffi_impl).ffi_name = (yyvsp[-4].refer);
                  (yyval.ffi_impl).using_params = (yyvsp[-2].ffi_args);
                  (yyval.ffi_impl).ffi_returning = (yyvsp[0].refer);
                }
#line 28914 "parse.cc"
    break;

  case 1448: /* call_returning: GIVING  */
#line 9688 "parse.y"
                       {
		  if( !dialect_mf() ) {
		    dialect_error((yylsp[0]), "CALL ... GIVING", "mf");
		  }
		}
#line 28924 "parse.cc"
    break;

  case 1449: /* entry: ENTRY LITERAL  */
#line 9696 "parse.y"
                { statement_begin((yylsp[-1]), ENTRY);
                  auto name = new_literal((yyvsp[0].literal), quoted_e);
                  parser_entry( name );
                }
#line 28933 "parse.cc"
    break;

  case 1450: /* entry: ENTRY LITERAL USING parameters  */
#line 9701 "parse.y"
                { statement_begin((yylsp[-3]), ENTRY);
                  auto name = new_literal((yyvsp[-2].literal), quoted_e);
                  ffi_args_t *params = (yyvsp[0].ffi_args);
                  size_t narg = params? params->elems.size() : 0;
		  cbl_ffi_arg_t *pargs = NULL;
                  std::vector <cbl_ffi_arg_t> args(narg);
                  if( narg > 0 ) {
		    std::copy( params->elems.begin(),
			       params->elems.end(), args.begin() );
                    pargs = args.data();
                  }
                  parser_entry( name, narg, pargs );
                }
#line 28951 "parse.cc"
    break;

  case 1451: /* ffi_name: scalar  */
#line 9717 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer);
                  if( ! is_callable((yyvsp[0].refer)->field) ) {
                    error_msg((yylsp[0]), "CALL requires %s to be "
                             "PROGRAM-POINTER or alphanumeric", (yyvsp[0].refer)->name());
                    YYERROR;
                  }
                  if( (yyvsp[0].refer)->field->type == FldLiteralA ) {
                    // Replace repository literal with aliased program's name.
                    assert((yyvsp[0].refer)->field->parent > 0);
                    auto& L = *cbl_label_of(symbol_at((yyvsp[0].refer)->field->parent));
                    (yyval.refer)->field = new_literal(strlen(L.name), L.name, quoted_e);
                  }
                }
#line 28970 "parse.cc"
    break;

  case 1452: /* ffi_name: LITERAL  */
#line 9731 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 28976 "parse.cc"
    break;

  case 1453: /* parameters: parameter  */
#line 9734 "parse.y"
                          { (yyval.ffi_args) = new ffi_args_t((yyvsp[0].ffi_arg)); }
#line 28982 "parse.cc"
    break;

  case 1454: /* parameters: parameters parameter  */
#line 9736 "parse.y"
                {
                  (yyvsp[-1].ffi_args)->push_back((yyvsp[0].ffi_arg));
                  (yyval.ffi_args) = (yyvsp[-1].ffi_args);
                }
#line 28991 "parse.cc"
    break;

  case 1455: /* parameter: ffi_by_ref  */
#line 9741 "parse.y"
                           { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); (yyval.ffi_arg)->crv = by_default_e; }
#line 28997 "parse.cc"
    break;

  case 1456: /* parameter: by REFERENCE ffi_by_ref  */
#line 9742 "parse.y"
                                        { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); }
#line 29003 "parse.cc"
    break;

  case 1457: /* parameter: by CONTENT ffi_by_con  */
#line 9743 "parse.y"
                                        { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); }
#line 29009 "parse.cc"
    break;

  case 1458: /* parameter: by VALUE ffi_by_val  */
#line 9744 "parse.y"
                                        { (yyval.ffi_arg) = (yyvsp[0].ffi_arg); }
#line 29015 "parse.cc"
    break;

  case 1459: /* ffi_by_ref: scalar_arg  */
#line 9747 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, (yyvsp[0].refer));
                }
#line 29023 "parse.cc"
    break;

  case 1460: /* ffi_by_ref: ADDRESS OF scalar_arg  */
#line 9751 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, (yyvsp[0].refer), address_of_e);
                }
#line 29031 "parse.cc"
    break;

  case 1461: /* ffi_by_ref: OMITTED  */
#line 9755 "parse.y"
                {
                  cbl_refer_t *r = new cbl_refer_t();
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_reference_e, r);
                }
#line 29040 "parse.cc"
    break;

  case 1462: /* ffi_by_con: expr  */
#line 9762 "parse.y"
                {
                  cbl_refer_t *r = new cbl_refer_t(*(yyvsp[0].refer));
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e, r);
                }
#line 29049 "parse.cc"
    break;

  case 1463: /* ffi_by_con: LITERAL  */
#line 9767 "parse.y"
                {
                  cbl_refer_t *r = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e, r);
                }
#line 29058 "parse.cc"
    break;

  case 1464: /* ffi_by_con: OMITTED  */
#line 9772 "parse.y"
                {
                  cbl_refer_t *r = new cbl_refer_t();
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_content_e, r);
                }
#line 29067 "parse.cc"
    break;

  case 1465: /* ffi_by_val: by_value_arg  */
#line 9779 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer));
                }
#line 29075 "parse.cc"
    break;

  case 1466: /* ffi_by_val: cce_expr  */
#line 9783 "parse.y"
                {
                  auto r = new_reference(new_literal(string_of((yyvsp[0].float128))));
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, r);
                }
#line 29084 "parse.cc"
    break;

  case 1467: /* ffi_by_val: ADDRESS OF scalar  */
#line 9788 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer), address_of_e);
                }
#line 29092 "parse.cc"
    break;

  case 1468: /* ffi_by_val: "LENGTH-OF" scalar  */
#line 9792 "parse.y"
                {
                  (yyval.ffi_arg) = new cbl_ffi_arg_t(by_value_e, (yyvsp[0].refer), length_of_e);
                }
#line 29100 "parse.cc"
    break;

  case 1471: /* call_excepts: call_excepts call_except statements  */
#line 9802 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-1]), "too many ON EXCEPTION clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-1]), "duplicate ON EXCEPTION clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-1]), "duplicate NOT ON EXCEPTION clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-2].error).on_error? (yyvsp[-2].error).on_error : (yyvsp[-2].error).not_error;
                  parser_call_exception_end(tgt);
                }
#line 29132 "parse.cc"
    break;

  case 1472: /* call_excepts: call_except statements  */
#line 9830 "parse.y"
                {
                  (yyval.error) = (yyvsp[-1].error);
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error? (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_call_exception_end(tgt);
                }
#line 29144 "parse.cc"
    break;

  case 1473: /* call_except: EXCEPTION  */
#line 9840 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblArith,
                                          uniq_label("call"), (yylsp[0]).first_line);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_call_exception( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == EXCEPTION || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 29161 "parse.cc"
    break;

  case 1474: /* call_except: "OVERFLOW"  */
#line 9853 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblArith,
                                          uniq_label("call"), (yylsp[0]).first_line);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_call_exception( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == OVERFLOW_kw || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 29178 "parse.cc"
    break;

  case 1475: /* cancel: CANCEL ffi_names  */
#line 9868 "parse.y"
                {
                  statement_begin((yylsp[-1]), CANCEL);
                  std::vector <cbl_refer_t> progs((yyvsp[0].refers)->refers.size());
		  std::copy( (yyvsp[0].refers)->refers.begin(),
			     (yyvsp[0].refers)->refers.end(), progs.begin() );
                  parser_initialize_programs( progs.size(), progs.empty()? NULL : progs.data() );
                }
#line 29190 "parse.cc"
    break;

  case 1476: /* ffi_names: ffi_name  */
#line 9876 "parse.y"
                                   { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 29196 "parse.cc"
    break;

  case 1477: /* ffi_names: ffi_names ffi_name  */
#line 9877 "parse.y"
                                   { (yyval.refers) = (yyvsp[-1].refers)->push_back((yyvsp[0].refer)); }
#line 29202 "parse.cc"
    break;

  case 1478: /* $@37: %empty  */
#line 9880 "parse.y"
                      { statement_begin((yylsp[0]), ALTER); }
#line 29208 "parse.cc"
    break;

  case 1482: /* alter_tgt: label_1 alter_to label_1  */
#line 9887 "parse.y"
                {
                  cbl_perform_tgt_t tgt( (yyvsp[-2].label), (yyvsp[0].label) );
                  parser_alter(&tgt);

                  const auto prog = cbl_label_of( symbol_at(symbol_elem_of((yyvsp[-2].label))->program));
                  if( prog->initial ) {
                    cbl_unimplemented("ALTER %s", (yyvsp[-2].label)->name);
                  }
                }
#line 29222 "parse.cc"
    break;

  case 1485: /* go_to: GOTO labels  */
#line 9903 "parse.y"
                {
                  statement_begin((yylsp[-1]), GOTO);
                  size_t narg = (yyvsp[0].labels)->elems.size();
                  if( 1 != narg ) {
                    error_msg((yylsp[0]), "more than one GO TO label requires DEPENDING");
                    YYERROR;
                  }

		  for( auto& label : (yyvsp[0].labels)->elems ) {
		    label->used = (yylsp[0]).first_line;
		  }
                  cbl_label_t *arg = (yyvsp[0].labels)->elems.front();
                  parser_goto( cbl_refer_t(), 1, &arg );
                }
#line 29241 "parse.cc"
    break;

  case 1486: /* go_to: GOTO labels DEPENDING on scalar  */
#line 9918 "parse.y"
                {
                  statement_begin((yylsp[-4]), GOTO);
		  assert(! (yyvsp[-3].labels)->elems.empty());
                  std::vector <cbl_label_t *> args((yyvsp[-3].labels)->elems.size());
		  std::copy((yyvsp[-3].labels)->elems.begin(), (yyvsp[-3].labels)->elems.end(), args.begin());
		  for( auto& label : (yyvsp[-3].labels)->elems ) {
		    label->used = (yylsp[-3]).first_line;
		  }
                  parser_goto( *(yyvsp[0].refer), args.size(), args.data() );
                }
#line 29256 "parse.cc"
    break;

  case 1487: /* go_to: GOTO  */
#line 9929 "parse.y"
                {
                  cbl_unimplemented("altered GO TO syntax (format 3)");
                  YYERROR;
                }
#line 29265 "parse.cc"
    break;

  case 1488: /* resume: RESUME NEXT STATEMENT  */
#line 9936 "parse.y"
                {
                  statement_begin((yylsp[-2]), RESUME);
                  parser_clear_exception();
                }
#line 29274 "parse.cc"
    break;

  case 1489: /* resume: RESUME label_1  */
#line 9941 "parse.y"
                {
                  statement_begin((yylsp[-1]), RESUME);
                  parser_clear_exception();
		  (yyvsp[0].label)->used = (yylsp[-1]).first_line;
                  parser_goto( cbl_refer_t(), 1, &(yyvsp[0].label) );
                }
#line 29285 "parse.cc"
    break;

  case 1490: /* labels: label_1  */
#line 9949 "parse.y"
                        { (yyval.labels) = new Label_list_t((yyvsp[0].label)); }
#line 29291 "parse.cc"
    break;

  case 1491: /* labels: labels label_1  */
#line 9950 "parse.y"
                               { (yyval.labels) = (yyvsp[-1].labels)->push_back((yyvsp[0].label)); }
#line 29297 "parse.cc"
    break;

  case 1492: /* label_1: qname  */
#line 9953 "parse.y"
                { // Add a forward label with no line number, or get an existing.
                  assert(!name_queue.empty());
		  auto namelocs( name_queue.pop() );

		  auto nameloc = namelocs.back();
                  if( namelocs.size() > 2 ) {
                    error_msg(nameloc.loc,
			      "too many qualifications for %s", nameloc.name);
                    YYERROR;
                  }
                  const char *para = nameloc.name;
                  size_t isect = 0;

                  if( namelocs.size() == 2 ) {
		    auto nameloc = namelocs.front();
                    cbl_label_t *sect = label_add(nameloc.loc, LblSection, nameloc.name);
                    isect = symbol_index(symbol_elem_of(sect));
                  }

                  (yyval.label) = paragraph_reference(para, isect);
                  assert((yyval.label));
                  if( yydebug ) dbgmsg( "using procedure %s of line %d",
                                       (yyval.label)->name, (yyval.label)->line );
                }
#line 29326 "parse.cc"
    break;

  case 1493: /* label_1: "numeric literal"  */
#line 9978 "parse.y"
                {
                  // Add a forward label with no line number, or get an existing.
                  (yyval.label) = label_add((yylsp[0]), LblNone, (yyvsp[0].numstr).string);
                  assert((yyval.label) != NULL);
                }
#line 29336 "parse.cc"
    break;

  case 1496: /* string_impl: "STRING" string_body  */
#line 9992 "parse.y"
                {
                  stringify((yyvsp[0].str_body).inputs, *(yyvsp[0].str_body).into.first, *(yyvsp[0].str_body).into.second);
                  current.declaratives_evaluate();
                }
#line 29345 "parse.cc"
    break;

  case 1497: /* string_cond: "STRING" string_body on_overflows  */
#line 9998 "parse.y"
                {
                  stringify((yyvsp[-1].str_body).inputs, *(yyvsp[-1].str_body).into.first, *(yyvsp[-1].str_body).into.second,
                            (yyvsp[0].error).on_error, (yyvsp[0].error).not_error);
                  current.declaratives_evaluate();
                }
#line 29355 "parse.cc"
    break;

  case 1500: /* string_body: str_delimiteds str_into  */
#line 10009 "parse.y"
                {
                  statement_begin((yyloc), STRING_kw);
                  (yyval.str_body).inputs = (yyvsp[-1].delimiteds);
                  (yyval.str_body).into = (yyvsp[0].refer2);
                }
#line 29365 "parse.cc"
    break;

  case 1501: /* str_delimiteds: str_delimited  */
#line 10017 "parse.y"
                {
                  refer_marked_list_t marked((yyvsp[0].delimited_1).delimiter, (yyvsp[0].delimited_1).input);
                  (yyval.delimiteds) = new refer_collection_t(marked);
                }
#line 29374 "parse.cc"
    break;

  case 1502: /* str_delimiteds: str_delimiteds str_delimited  */
#line 10022 "parse.y"
                {
                  // matching delimiters (or none) adds to the list
                  refer_marked_list_t& marked = (yyvsp[-1].delimiteds)->lists.back();
                  if( !marked.marker ) {
                    marked.push_on((yyvsp[0].delimited_1).delimiter, (yyvsp[0].delimited_1).input);
                  } else { // start a new list
                    (yyvsp[-1].delimiteds)->push_back( refer_marked_list_t((yyvsp[0].delimited_1).delimiter,
                                                       (yyvsp[0].delimited_1).input) );
                  }
                }
#line 29389 "parse.cc"
    break;

  case 1503: /* str_delimited: str_input DELIMITED by str_size  */
#line 10035 "parse.y"
                {
                  (yyval.delimited_1).input = (yyvsp[-3].refer);
                  (yyval.delimited_1).delimiter = (yyvsp[0].refer);
                }
#line 29398 "parse.cc"
    break;

  case 1504: /* str_delimited: str_input  */
#line 10040 "parse.y"
                {
                  (yyval.delimited_1).input = (yyvsp[0].refer);
                  (yyval.delimited_1).delimiter = NULL;
                }
#line 29407 "parse.cc"
    break;

  case 1506: /* str_input: LITERAL  */
#line 10047 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 29413 "parse.cc"
    break;

  case 1507: /* str_input: reserved_value  */
#line 10049 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 29421 "parse.cc"
    break;

  case 1509: /* str_size: SIZE  */
#line 10055 "parse.y"
                       { (yyval.refer) = new_reference(NULL); }
#line 29427 "parse.cc"
    break;

  case 1510: /* str_size: LITERAL  */
#line 10056 "parse.y"
                        { (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e)); }
#line 29433 "parse.cc"
    break;

  case 1512: /* str_size: reserved_value  */
#line 10059 "parse.y"
                {
                  (yyval.refer) = new_reference(constant_of(constant_index((yyvsp[0].number))));
                }
#line 29441 "parse.cc"
    break;

  case 1513: /* str_into: INTO scalar  */
#line 10065 "parse.y"
                {
                  (yyval.refer2).first = (yyvsp[0].refer);
                  (yyval.refer2).second = new_reference(NULL);
                }
#line 29450 "parse.cc"
    break;

  case 1514: /* str_into: INTO scalar with POINTER scalar  */
#line 10070 "parse.y"
                {
                  (yyval.refer2).first = (yyvsp[-3].refer);
                  (yyval.refer2).second = (yyvsp[0].refer);
                }
#line 29459 "parse.cc"
    break;

  case 1515: /* on_overflows: on_overflow statements  */
#line 10077 "parse.y"
                {
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error?
                    (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_string_overflow_end(tgt);
                }
#line 29471 "parse.cc"
    break;

  case 1516: /* on_overflows: on_overflows on_overflow statements  */
#line 10085 "parse.y"
                {
                  if( (yyvsp[-2].error).on_error && (yyvsp[-2].error).not_error ) {
                    error_msg((yylsp[-1]), "too many ON OVERFLOW clauses");
                    YYERROR;
                  }
                  // "ON" and "NOT ON" could be reversed, but not duplicated.
                  if( (yyvsp[-2].error).on_error && (yyvsp[-1].error).on_error ) {
                    error_msg((yylsp[-1]), "duplicate ON OVERFLOW clauses");
                    YYERROR;
                  }
                  if( (yyvsp[-2].error).not_error && (yyvsp[-1].error).not_error ) {
                    error_msg((yylsp[-1]), "duplicate NOT ON OVERFLOW clauses");
                    YYERROR;
                  }
                  (yyval.error) = (yyvsp[-2].error);
                  if( (yyvsp[-1].error).on_error ) {
                    (yyval.error).on_error = (yyvsp[-1].error).on_error;
                    assert((yyvsp[-2].error).not_error);
                  } else {
                    (yyval.error).not_error = (yyvsp[-1].error).not_error;
                    assert((yyvsp[-2].error).on_error);
                  }
                  assert( (yyvsp[-1].error).on_error || (yyvsp[-1].error).not_error );
                  assert( ! ((yyvsp[-1].error).on_error && (yyvsp[-1].error).not_error) );
                  cbl_label_t *tgt = (yyvsp[-1].error).on_error?
                    (yyvsp[-1].error).on_error : (yyvsp[-1].error).not_error;
                  parser_string_overflow_end(tgt);
                }
#line 29504 "parse.cc"
    break;

  case 1517: /* on_overflow: "OVERFLOW"  */
#line 10116 "parse.y"
                {
                  (yyval.error).not_error = NULL;
                  (yyval.error).on_error = label_add(LblString,
                                          uniq_label("string"), (yylsp[0]).first_line);
                  if( !(yyval.error).on_error ) YYERROR;
                  parser_string_overflow( (yyval.error).on_error );

                  assert( (yyvsp[0].number) == OVERFLOW_kw || (yyvsp[0].number) == NOT );
                  if( (yyvsp[0].number) == NOT ) {
                    std::swap((yyval.error).on_error, (yyval.error).not_error);
                  }
                }
#line 29521 "parse.cc"
    break;

  case 1522: /* unstring_impl: UNSTRING unstring_body  */
#line 10138 "parse.y"
                {
                  unstringify( *(yyvsp[0].uns_body).input, (yyvsp[0].uns_body).delimited, (yyvsp[0].uns_body).into );
                  current.declaratives_evaluate();
                }
#line 29530 "parse.cc"
    break;

  case 1523: /* unstring_cond: UNSTRING unstring_body on_overflows  */
#line 10144 "parse.y"
                {
                  unstringify( *(yyvsp[-1].uns_body).input, (yyvsp[-1].uns_body).delimited, (yyvsp[-1].uns_body).into,
                               (yyvsp[0].error).on_error, (yyvsp[0].error).not_error );
                  current.declaratives_evaluate();
                }
#line 29540 "parse.cc"
    break;

  case 1524: /* unstring_body: unstring_src uns_delimited INTO uns_into  */
#line 10152 "parse.y"
                {
                  statement_begin((yyloc), UNSTRING);
                  (yyval.uns_body).input = (yyvsp[-3].refer);
                  (yyval.uns_body).delimited = (yyvsp[-2].refers);
                  (yyval.uns_body).into = (yyvsp[0].uns_into);
                }
#line 29551 "parse.cc"
    break;

  case 1527: /* unstring_src: LITERAL  */
#line 10161 "parse.y"
                {
                  (yyval.refer) = new_reference(new_literal((yyvsp[0].literal), quoted_e));
                }
#line 29559 "parse.cc"
    break;

  case 1528: /* uns_delimited: %empty  */
#line 10166 "parse.y"
                       { (yyval.refers) = NULL; }
#line 29565 "parse.cc"
    break;

  case 1529: /* uns_delimited: DELIMITED by uns_delimiters  */
#line 10167 "parse.y"
                                            { (yyval.refers) = (yyvsp[0].refers); }
#line 29571 "parse.cc"
    break;

  case 1530: /* uns_delimiters: uns_delimiter  */
#line 10170 "parse.y"
                              { (yyval.refers) = new refer_list_t((yyvsp[0].refer)); }
#line 29577 "parse.cc"
    break;

  case 1531: /* uns_delimiters: uns_delimiters OR uns_delimiter  */
#line 10172 "parse.y"
                {
                  (yyval.refers) = (yyvsp[-2].refers);
                  (yyval.refers)->push_back((yyvsp[0].refer));
                }
#line 29586 "parse.cc"
    break;

  case 1532: /* uns_delimiter: all str_input  */
#line 10178 "parse.y"
                {
                  (yyval.refer) = (yyvsp[0].refer);
                  (yyval.refer)->all = (yyvsp[-1].boolean);
                }
#line 29595 "parse.cc"
    break;

  case 1533: /* uns_into: uns_tgts  */
#line 10185 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[0].uns_tgts));
                }
#line 29603 "parse.cc"
    break;

  case 1534: /* uns_into: uns_tgts with POINTER scalar  */
#line 10189 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[-3].uns_tgts), (yyvsp[0].refer));
                }
#line 29611 "parse.cc"
    break;

  case 1535: /* uns_into: uns_tgts TALLYING in scalar  */
#line 10193 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[-3].uns_tgts), NULL, (yyvsp[0].refer));
                }
#line 29619 "parse.cc"
    break;

  case 1536: /* uns_into: uns_tgts with POINTER scalar TALLYING in scalar  */
#line 10197 "parse.y"
                {
                  (yyval.uns_into) = new unstring_into_t((yyvsp[-6].uns_tgts), (yyvsp[-3].refer), (yyvsp[0].refer));
                }
#line 29627 "parse.cc"
    break;

  case 1537: /* uns_tgts: uns_tgt  */
#line 10202 "parse.y"
                                 { (yyval.uns_tgts) = new unstring_tgt_list_t((yyvsp[0].uns_tgt)); }
#line 29633 "parse.cc"
    break;

  case 1538: /* uns_tgts: uns_tgts uns_tgt  */
#line 10203 "parse.y"
                                 { (yyval.uns_tgts) = (yyvsp[-1].uns_tgts); (yyval.uns_tgts)->push_back((yyvsp[0].uns_tgt)); }
#line 29639 "parse.cc"
    break;

  case 1539: /* uns_tgt: scalar  */
#line 10206 "parse.y"
                {
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[0].refer));
                }
#line 29647 "parse.cc"
    break;

  case 1540: /* uns_tgt: scalar DELIMITER in scalar  */
#line 10210 "parse.y"
                {
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[-3].refer), (yyvsp[0].refer));
                }
#line 29655 "parse.cc"
    break;

  case 1541: /* uns_tgt: scalar COUNT in scalar  */
#line 10214 "parse.y"
                {
                  if( ! (yyvsp[0].refer)->field->is_integer() ) {
                    error_msg((yylsp[0]), "COUNT %s must be integer type",
                             (yyvsp[0].refer)->field->name);
                  }
                  if( (yyvsp[0].refer)->field->has_attr(scaled_e) ) {
                    error_msg((yylsp[0]), "COUNT %s may not be P scaled",
                             (yyvsp[0].refer)->field->name);
                  }
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[-3].refer), NULL, (yyvsp[0].refer));
                }
#line 29671 "parse.cc"
    break;

  case 1542: /* uns_tgt: scalar DELIMITER in scalar COUNT in scalar  */
#line 10226 "parse.y"
                {
                  if( ! (yyvsp[0].refer)->field->is_integer() ) {
                    error_msg((yylsp[0]), "COUNT %s must be integer type",
                             (yyvsp[0].refer)->field->name);
                  }
                  if( (yyvsp[0].refer)->field->has_attr(scaled_e) ) {
                    error_msg((yylsp[0]), "COUNT %s may not be P scaled",
                             (yyvsp[0].refer)->field->name);
                  }
                  (yyval.uns_tgt) = new unstring_tgt_t((yyvsp[-6].refer), (yyvsp[-3].refer), (yyvsp[0].refer));
                }
#line 29687 "parse.cc"
    break;

  case 1543: /* intrinsic_call: function intrinsic  */
#line 10240 "parse.y"
                                   { // "intrinsic" includes UDFs.
                  (yyval.refer) = new_reference((yyvsp[0].field));
                  (yyval.refer)->field->attr |= constant_e;
                }
#line 29696 "parse.cc"
    break;

  case 1544: /* intrinsic_call: function intrinsic refmod  */
#line 10245 "parse.y"
                {
                  if( (yyvsp[0].refmod_parts).from->is_reference() || (yyvsp[0].refmod_parts).len->is_reference() ) {
                    error_msg((yylsp[0]), "subscripts on start:len refmod "
                            "parameters are unsupported");
                    YYERROR;
                  }
                  if( (yyvsp[-1].field)->type != FldAlphanumeric ) {
                    error_msg((yylsp[0]), "'%s' only AlphaNumeric fields accept refmods",
                             (yyvsp[-1].field)->name);
                    YYERROR;
                  }
                  cbl_span_t span( (yyvsp[0].refmod_parts).from, (yyvsp[0].refmod_parts).len );
                  (yyval.refer) = new cbl_refer_t((yyvsp[-1].field), span);
                  (yyval.refer)->field->attr |= constant_e;
                }
#line 29716 "parse.cc"
    break;

  case 1545: /* intrinsic_call: function NAME  */
#line 10260 "parse.y"
                              {
		  error_msg((yylsp[0]), "no such function: %s", (yyvsp[0].string));
		  YYERROR;
		}
#line 29725 "parse.cc"
    break;

  case 1546: /* function: %empty  */
#line 10267 "parse.y"
                {
                  statement_begin((yyloc), FUNCTION);
                }
#line 29733 "parse.cc"
    break;

  case 1547: /* function: FUNCTION  */
#line 10271 "parse.y"
                {
                  statement_begin((yylsp[0]), FUNCTION);
                }
#line 29741 "parse.cc"
    break;

  case 1548: /* function_udf: "UDF name" '(' arg_list ')'  */
#line 10276 "parse.y"
                                                    {
		  std::vector<function_descr_arg_t> params;
                  auto L = cbl_label_of(symbol_at((yyvsp[-3].number)));
		  if( ! current.udf_args_valid(L, (yyvsp[-1].refers)->refers, params) ) {
		    YYERROR;
		  }
		  const auto returning = cbl_field_of(symbol_at(L->returning));
                  (yyval.field) = new_temporary_clone(returning);
		  (yyval.field)->data.initial = returning->name; // user's name for the field
                  std::vector <cbl_ffi_arg_t> args((yyvsp[-1].refers)->refers.size());
		  size_t i = 0;
		  // Pass parameters as defined by the function.
                  std::transform( (yyvsp[-1].refers)->refers.begin(), (yyvsp[-1].refers)->refers.end(), args.begin(),
				  [params, &i]( const cbl_refer_t& arg ) {
				    function_descr_arg_t param = params.at(i++);
				    auto ar = new cbl_refer_t(arg);
				    cbl_ffi_arg_t actual(param.crv, ar);
				    return actual;
				  } );
		  auto name = new_literal(strlen(L->name), L->name, quoted_e);
		  ast_call( (yylsp[-3]), name, (yyval.field), args.size(), args.data(), NULL, NULL, true );
                }
#line 29768 "parse.cc"
    break;

  case 1549: /* function_udf: "UDF"  */
#line 10298 "parse.y"
                               {
                  static const size_t narg = 0;
                  static cbl_ffi_arg_t *args = NULL;

                  auto L = cbl_label_of(symbol_at((yyvsp[0].number)));
		  const auto returning = cbl_field_of(symbol_at(L->returning));
                  (yyval.field) = new_temporary_clone(returning);
		  (yyval.field)->data.initial = returning->name; // user's name for the field

                  auto name = new_literal(strlen(L->name), L->name, quoted_e);
                  ast_call( (yylsp[0]), name, (yyval.field), narg, args, NULL, NULL, true );
                }
#line 29785 "parse.cc"
    break;

  case 1552: /* intrinsic: intrinsic_v '(' arg_list ')'  */
#line 10329 "parse.y"
                                                   {
                  location_set((yylsp[-3]));
                  std::vector <cbl_refer_t> args((yyvsp[-1].refers)->size());
		  assert(! args.empty());
                  std::copy( (yyvsp[-1].refers)->begin(), (yyvsp[-1].refers)->end(), args.begin() );
                  cbl_refer_t *p = intrinsic_inconsistent_parameter(args.size(),
								    args.data());
                  if( p != NULL ) {
		    auto loc = symbol_field_location(field_index(p->field));
                    error_msg(loc, "FUNCTION %qs has "
                              "inconsistent parameter type %ld (%qs)",
                              keyword_str((yyvsp[-3].number)), (long)(p - args.data()), name_of(p->field) );
                    YYERROR;
                  }
                  (yyval.field) = is_numeric(args[0].field)?
                         new_tempnumeric_float() :
                         new_alphanumeric();
		  (yyval.field)->data.initial = keyword_str((yyvsp[-3].number));
                  parser_intrinsic_callv( (yyval.field), intrinsic_cname((yyvsp[-3].number)),
					  args.size(), args.data() );
                }
#line 29811 "parse.cc"
    break;

  case 1553: /* intrinsic: PRESENT_VALUE '(' arg_list ')'  */
#line 10352 "parse.y"
                {
                  static char s[] = "__gg__present_value";
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric_float("PRESENT-VALUE");
                  size_t n = (yyvsp[-1].refers)->size();
                  assert(n > 0);
                  if( n < 2 ) {
                    error_msg((yylsp[-1]), "PRESENT-VALUE requires 2 parameters");
                    YYERROR;
                  }
                  std::vector <cbl_refer_t> args(n);
		  std::copy( (yyvsp[-1].refers)->begin(), (yyvsp[-1].refers)->end(), args.begin() );
		  bool ok = std::all_of( args.begin(),
					 args.end(), [loc = (yylsp[-3])]( auto r ) {
					     return require_numeric(loc, r); } );
		  if( ! ok ) YYERROR;
                  parser_intrinsic_callv( (yyval.field), s, args.size(), args.data() );
                }
#line 29834 "parse.cc"
    break;

  case 1554: /* intrinsic: BASECONVERT '(' varg varg varg ')'  */
#line 10371 "parse.y"
                                                                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("BASECONVERT");
		  cbl_unimplemented("BASECONVERT");
                  if( ! intrinsic_call_3((yyval.field), BASECONVERT, (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer) )) YYERROR;
                }
#line 29845 "parse.cc"
    break;

  case 1555: /* intrinsic: "BIT-OF" '(' expr ')'  */
#line 10377 "parse.y"
                                         {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric("BIT-OF");
                  if( ! intrinsic_call_1((yyval.field), BIT_OF, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29855 "parse.cc"
    break;

  case 1556: /* intrinsic: CHAR '(' expr ')'  */
#line 10382 "parse.y"
                                       {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric(1,"CHAR");
                  if( ! intrinsic_call_1((yyval.field), CHAR, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 29865 "parse.cc"
    break;

  case 1557: /* intrinsic: CONVERT '(' varg convert_src convert_dst ')'  */
#line 10388 "parse.y"
                                                                            {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric(1,"CONVERT");
		  cbl_unimplemented("CONVERT");
                  /* if( ! intrinsic_call_3($$, CONVERT, $r1, $src, $dst) ) YYERROR; */
                }
#line 29876 "parse.cc"
    break;

  case 1558: /* intrinsic: "DISPLAY OF" '(' varg ')'  */
#line 10395 "parse.y"
                                              {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric("DISPLAY-OF");
                  if( ! intrinsic_call_2((yyval.field), DISPLAY_OF, (yyvsp[-1].refer), NULL) ) YYERROR;
                }
#line 29886 "parse.cc"
    break;

  case 1559: /* intrinsic: "DISPLAY OF" '(' varg varg ')'  */
#line 10400 "parse.y"
                                                       {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric("DISPLAY-OF");
                  if( ! intrinsic_call_2((yyval.field), DISPLAY_OF, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29896 "parse.cc"
    break;

  case 1560: /* intrinsic: "EXCEPTION-FILE" filename  */
#line 10406 "parse.y"
                                        {
                  location_set((yylsp[-1]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-FILE");
                  parser_exception_file( (yyval.field), (yyvsp[0].file) );
                }
#line 29906 "parse.cc"
    break;

  case 1561: /* intrinsic: "FIND-STRING" '(' varg last start_after anycase ')'  */
#line 10412 "parse.y"
                                                                      {
                  location_set((yylsp[-6]));
                  (yyval.field) = new_alphanumeric("FIND-STRING");
                  /* auto r1 = new_reference(new_literal(strlen($r1), $r1, quoted_e)); */
		  cbl_unimplemented("%<FIND_STRING%>");
                  /* if( ! intrinsic_call_4($$, FIND_STRING, r1, $r2) ) YYERROR; */
                }
#line 29918 "parse.cc"
    break;

  case 1562: /* intrinsic: "FORMATTED-DATE" '(' "date format" expr ')'  */
#line 10420 "parse.y"
                                                             {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATE, "FORMATTED-DATE");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), FORMATTED_DATE, r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29929 "parse.cc"
    break;

  case 1563: /* intrinsic: "FORMATTED-DATETIME" '(' "datetime format" expr expr ')'  */
#line 10429 "parse.y"
                                                                     {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATETIME, "FORMATTED-DATETIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-3].string)), (yyvsp[-3].string), quoted_e));
                  static cbl_refer_t r3(literally_zero);
                  if( ! intrinsic_call_4((yyval.field), FORMATTED_DATETIME,
                                         r1, (yyvsp[-2].refer), (yyvsp[-1].refer), &r3) ) YYERROR;
                }
#line 29942 "parse.cc"
    break;

  case 1564: /* intrinsic: "FORMATTED-DATETIME" '(' "datetime format" expr expr expr ')'  */
#line 10438 "parse.y"
                                                              {
                  location_set((yylsp[-6]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATETIME, "FORMATTED-DATETIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-4].string)), (yyvsp[-4].string), quoted_e));
                  if( ! intrinsic_call_4((yyval.field), FORMATTED_DATETIME,
                                             r1, (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29954 "parse.cc"
    break;

  case 1565: /* intrinsic: "FORMATTED-DATETIME" '(' error ')'  */
#line 10445 "parse.y"
                                                 {
                  YYERROR;
                }
#line 29962 "parse.cc"
    break;

  case 1566: /* intrinsic: "FORMATTED-TIME" '(' "time format" expr expr ')'  */
#line 10449 "parse.y"
                                                              {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_TIME, "FORMATTED-DATETIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-3].string)), (yyvsp[-3].string), quoted_e));
                  if( ! intrinsic_call_3((yyval.field), FORMATTED_TIME,
                                             r1, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 29974 "parse.cc"
    break;

  case 1567: /* intrinsic: "FORMATTED-TIME" '(' "time format" expr ')'  */
#line 10456 "parse.y"
                                                              {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_TIME, "FORMATTED-TIME");
                  auto r3 = new_reference(new_literal("0"));
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_3((yyval.field), FORMATTED_TIME,
                                             r1, (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 29987 "parse.cc"
    break;

  case 1568: /* intrinsic: "FORMATTED-CURRENT-DATE" '(' "datetime format" ')'  */
#line 10464 "parse.y"
                                                                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_FORMATTED_DATETIME, "FORMATTED-CURRENT_DATE");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-1].string)), (yyvsp[-1].string), quoted_e));
                  if( ! intrinsic_call_1((yyval.field), FORMATTED_CURRENT_DATE, r1, (yylsp[-1])) )
                                         YYERROR;
                }
#line 29999 "parse.cc"
    break;

  case 1569: /* intrinsic: "TEST-FORMATTED-DATETIME" '(' "date format" varg ')'  */
#line 10471 "parse.y"
                                                                      {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("TEST-FORMATTED-DATETIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), TEST_FORMATTED_DATETIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30011 "parse.cc"
    break;

  case 1570: /* intrinsic: "TEST-FORMATTED-DATETIME" '(' "time format" varg ')'  */
#line 10478 "parse.y"
                                                                      {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("TEST-FORMATTED-DATETIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), TEST_FORMATTED_DATETIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30023 "parse.cc"
    break;

  case 1571: /* intrinsic: "TEST-FORMATTED-DATETIME" '(' "datetime format" varg ')'  */
#line 10486 "parse.y"
                {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("TEST-FORMATTED-DATETIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), TEST_FORMATTED_DATETIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30035 "parse.cc"
    break;

  case 1572: /* intrinsic: "INTEGER-OF-FORMATTED-DATE" '(' "date format" varg ')'  */
#line 10493 "parse.y"
                                                                        {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("INTEGER-OF-FORMATTED-DATE");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), INTEGER_OF_FORMATTED_DATE,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30047 "parse.cc"
    break;

  case 1573: /* intrinsic: "INTEGER-OF-FORMATTED-DATE" '(' "datetime format" varg ')'  */
#line 10501 "parse.y"
                {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("INTEGER-OF-FORMATTED-DATE");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), INTEGER_OF_FORMATTED_DATE,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30059 "parse.cc"
    break;

  case 1574: /* intrinsic: "SECONDS-FROM-FORMATTED-TIME" '(' "time format" varg ')'  */
#line 10508 "parse.y"
                                                                          {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("SECONDS-FROM-FORMATTED-TIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), SECONDS_FROM_FORMATTED_TIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30071 "parse.cc"
    break;

  case 1575: /* intrinsic: "SECONDS-FROM-FORMATTED-TIME" '(' "datetime format" varg ')'  */
#line 10516 "parse.y"
                {
                location_set((yylsp[-4]));
		(yyval.field) = new_tempnumeric("SECONDS-FROM-FORMATTED-TIME");
                  auto r1 = new_reference(new_literal(strlen((yyvsp[-2].string)), (yyvsp[-2].string), quoted_e));
                  if( ! intrinsic_call_2((yyval.field), SECONDS_FROM_FORMATTED_TIME,
                                              r1, (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30083 "parse.cc"
    break;

  case 1576: /* intrinsic: "HEX-OF" '(' varg ')'  */
#line 10524 "parse.y"
                                         {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric("HEX-OF");
                  if( ! intrinsic_call_1((yyval.field), HEX_OF, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30093 "parse.cc"
    break;

  case 1577: /* intrinsic: LENGTH '(' tableish ')'  */
#line 10529 "parse.y"
                                             {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric("LENGTH");
		  (yyval.field)->clear_attr(signable_e);
		  parser_set_numeric((yyval.field), (yyvsp[-1].refer)->field->size());
		  if( ! intrinsic_call_1((yyval.field), LENGTH, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
		}
#line 30105 "parse.cc"
    break;

  case 1578: /* intrinsic: LENGTH '(' varg1a ')'  */
#line 10536 "parse.y"
                                           {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric("LENGTH");
		  (yyval.field)->clear_attr(signable_e);
		  parser_set_numeric((yyval.field), (yyvsp[-1].refer)->field->data.capacity);
		  if( ! intrinsic_call_1((yyval.field), LENGTH, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
		}
#line 30117 "parse.cc"
    break;

  case 1579: /* intrinsic: lopper_case '(' alpha_val ')'  */
#line 10543 "parse.y"
                                                        {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric((yyvsp[-1].refer)->field->data.capacity, "lopper_case[func]");
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30127 "parse.cc"
    break;

  case 1580: /* intrinsic: "MODULE-NAME " '(' module_type ')'  */
#line 10550 "parse.y"
                {
		  (yyval.field) = new_alphanumeric(sizeof(cbl_name_t), "MODULE-NAME");
		  parser_module_name( (yyval.field), (yyvsp[-1].module_type) );
		}
#line 30136 "parse.cc"
    break;

  case 1581: /* intrinsic: "NUMVAL-C" '(' varg numval_locale anycase ')'  */
#line 10555 "parse.y"
                                                                    {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("NUMVAL-C");
                  parser_intrinsic_numval_c( (yyval.field), *(yyvsp[-3].refer), (yyvsp[-2].numval_locale_t).is_locale,
                                                      *(yyvsp[-2].numval_locale_t).arg2, (yyvsp[-1].boolean) );
                }
#line 30147 "parse.cc"
    break;

  case 1582: /* intrinsic: ORD '(' alpha_val ')'  */
#line 10562 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric("ORD");
                  if( ! intrinsic_call_1((yyval.field), ORD, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30157 "parse.cc"
    break;

  case 1583: /* intrinsic: RANDOM  */
#line 10568 "parse.y"
                {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric_float("RANDOM");
                  parser_intrinsic_call_0( (yyval.field), intrinsic_cname(RANDOM) );
                }
#line 30167 "parse.cc"
    break;

  case 1584: /* intrinsic: RANDOM_SEED expr ')'  */
#line 10574 "parse.y"
                { // left parenthesis consumed by lexer
                  location_set((yylsp[-2]));
                  (yyval.field) = new_tempnumeric_float("RANDOM-SEED");
                  if( ! intrinsic_call_1((yyval.field), RANDOM, (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30177 "parse.cc"
    break;

  case 1585: /* intrinsic: "STANDARD-COMPARE" '(' varg varg varg varg ')'  */
#line 10581 "parse.y"
                {
                  location_set((yylsp[-6]));
                  (yyval.field) = new_tempnumeric("STANDARD-COMPARE");
		  cbl_unimplemented("STANDARD-COMPARE");
                  /* if( ! intrinsic_call_4($$, STANDARD_COMPARE, $r1) ) YYERROR; */
                }
#line 30188 "parse.cc"
    break;

  case 1586: /* intrinsic: "STANDARD-COMPARE" '(' varg varg varg ')'  */
#line 10588 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("STANDARD-COMPARE");
		  cbl_unimplemented("STANDARD-COMPARE");
                  /* if( ! intrinsic_call_4($$, STANDARD_COMPARE, $r1) ) YYERROR; */
                }
#line 30199 "parse.cc"
    break;

  case 1587: /* intrinsic: "STANDARD-COMPARE" '(' varg varg ')'  */
#line 10595 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric("STANDARD-COMPARE");
		  cbl_unimplemented("STANDARD-COMPARE");
                  /* if( ! intrinsic_call_4($$, STANDARD_COMPARE, $r1) ) YYERROR; */
                }
#line 30210 "parse.cc"
    break;

  case 1588: /* intrinsic: SUBSTITUTE '(' varg subst_inputs ')'  */
#line 10602 "parse.y"
                                                                 {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric("SUBSTITUTE");
                  std::vector <cbl_substitute_t> args((yyvsp[-1].substitutions)->size());
                  std::transform( (yyvsp[-1].substitutions)->begin(), (yyvsp[-1].substitutions)->end(), args.begin(),
                                  []( const substitution_t& arg ) {
                                    cbl_substitute_t output( arg.anycase,
                                                             char(arg.first_last),
                                                             arg.orig,
                                                             arg.replacement );
                                  return output; } );

                  parser_intrinsic_subst((yyval.field), *(yyvsp[-2].refer), args.size(), args.data());
                }
#line 30229 "parse.cc"
    break;

  case 1589: /* intrinsic: "TEST-NUMVAL-C" '(' varg numval_locale anycase ')'  */
#line 10618 "parse.y"
                                                                         {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("parser_intrinsic_subst($$,");
                  parser_intrinsic_numval_c( (yyval.field), *(yyvsp[-3].refer), (yyvsp[-2].numval_locale_t).is_locale,
                                                 *(yyvsp[-2].numval_locale_t).arg2, (yyvsp[-1].boolean), true );
                }
#line 30240 "parse.cc"
    break;

  case 1590: /* intrinsic: TRIM '(' error ')'  */
#line 10624 "parse.y"
                                   {
                  error_msg((yylsp[-1]), "invalid TRIM argument");
                  YYERROR;
                }
#line 30249 "parse.cc"
    break;

  case 1591: /* intrinsic: TRIM '(' expr trim_trailing ')'  */
#line 10629 "parse.y"
                {
                  location_set((yylsp[-4]));
                   switch( (yyvsp[-2].refer)->field->type ) {
                   case FldGroup:
                   case FldAlphanumeric:
                   case FldLiteralA:
                   case FldAlphaEdited:
                   case FldNumericEdited:
                     break; // alphanumeric OK
                   default:
                     // BLANK WHEN ZERO implies numeric-edited, so OK
                     if( (yyvsp[-2].refer)->field->has_attr(blank_zero_e) ) {
                       break;
                     }
                     error_msg((yylsp[-2]), "TRIM argument must be alphanumeric");
                     YYERROR;
                     break;
                  }
		   (yyval.field) = new_alphanumeric("TRIM");
                  cbl_refer_t * how = new_reference((yyvsp[-1].field));
                  if( ! intrinsic_call_2((yyval.field), TRIM, (yyvsp[-2].refer), how) ) YYERROR;
                }
#line 30276 "parse.cc"
    break;

  case 1592: /* intrinsic: USUBSTR '(' alpha_val expr expr ')'  */
#line 10652 "parse.y"
                                                                 {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric("USUBSTR");
                  if( ! intrinsic_call_3((yyval.field), FORMATTED_DATETIME,
                                             (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30287 "parse.cc"
    break;

  case 1593: /* intrinsic: intrinsic_I '(' expr ')'  */
#line 10660 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric(keyword_str((yyvsp[-3].number)));
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30297 "parse.cc"
    break;

  case 1594: /* intrinsic: intrinsic_N '(' expr ')'  */
#line 10667 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_tempnumeric_float(keyword_str((yyvsp[-3].number)));
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30307 "parse.cc"
    break;

  case 1595: /* intrinsic: intrinsic_X '(' varg ')'  */
#line 10674 "parse.y"
                {
                  location_set((yylsp[-3]));
                  auto type = intrinsic_return_type((yyvsp[-3].number));
                  switch(type) {
                  case FldAlphanumeric:
                    (yyval.field) = new_alphanumeric(keyword_str((yyvsp[-3].number)));
                    break;
                  default:
                    if( (yyvsp[-3].number) == NUMVAL || (yyvsp[-3].number) == NUMVAL_F ) {
			(yyval.field) = new_temporary(FldFloat, keyword_str((yyvsp[-3].number)));
		    } else {
                      (yyval.field) = new_temporary(type, keyword_str((yyvsp[-3].number)));
		    }
                  }
                  if( (yyvsp[-3].number) == NUMVAL_F ) {
		    if( is_literal((yyvsp[-1].refer)->field) && ! is_numeric((yyvsp[-1].refer)->field->type) ) {
		      // The parameter might be literal, but could be "hello".
                      auto input = (yyvsp[-1].refer)->field->data.initial;
		      error_msg((yylsp[-1]), "'%s' is not a numeric literal", input);
                    }
                  }
                  if( ! intrinsic_call_1((yyval.field), (yyvsp[-3].number), (yyvsp[-1].refer), (yylsp[-1]))) YYERROR;
                }
#line 30335 "parse.cc"
    break;

  case 1596: /* intrinsic: intrinsic_I2 '(' expr expr ')'  */
#line 10699 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_tempnumeric("intrinsic_I2");
                  if( ! intrinsic_call_2((yyval.field), (yyvsp[-4].number), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30345 "parse.cc"
    break;

  case 1597: /* intrinsic: "DATE-TO-YYYYMMDD" '(' expr ')'  */
#line 10706 "parse.y"
                {
                  location_set((yylsp[-3]));
                  static auto r2 = new_reference(FldNumericDisplay, "50");
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric("DATE_TO_YYYYMMDD");
                  if( ! intrinsic_call_3((yyval.field), DATE_TO_YYYYMMDD,
                                         (yyvsp[-1].refer), r2, r3) ) YYERROR;
                }
#line 30365 "parse.cc"
    break;

  case 1598: /* intrinsic: "DATE-TO-YYYYMMDD" '(' expr expr ')'  */
#line 10723 "parse.y"
                {
                  location_set((yylsp[-4]));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric("DATE_TO_YYYYMMDD");
                  if( ! intrinsic_call_3((yyval.field), DATE_TO_YYYYMMDD,
                                         (yyvsp[-2].refer), (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 30384 "parse.cc"
    break;

  case 1599: /* intrinsic: "DATE-TO-YYYYMMDD" '(' expr expr expr ')'  */
#line 10740 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("DATE_TO_YYYYMMDD");
                  if( ! intrinsic_call_3((yyval.field), DATE_TO_YYYYMMDD,
                                         (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30395 "parse.cc"
    break;

  case 1600: /* intrinsic: "DAY-TO-YYYYDDD" '(' expr ')'  */
#line 10748 "parse.y"
                {
                  location_set((yylsp[-3]));
                  static auto r2 = new_reference(FldNumericDisplay, "50");
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric("DAY_TO_YYYYDDD");
                  if( ! intrinsic_call_3((yyval.field), DAY_TO_YYYYDDD,
                                         (yyvsp[-1].refer), r2, r3) ) YYERROR;
                }
#line 30415 "parse.cc"
    break;

  case 1601: /* intrinsic: "DAY-TO-YYYYDDD" '(' expr expr ')'  */
#line 10765 "parse.y"
                {
                  location_set((yylsp[-4]));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric("DAY_TO_YYYYDDD");
                  if( ! intrinsic_call_3((yyval.field), DAY_TO_YYYYDDD,
                                         (yyvsp[-2].refer), (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 30434 "parse.cc"
    break;

  case 1602: /* intrinsic: "DAY-TO-YYYYDDD" '(' expr expr expr ')'  */
#line 10782 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("DAY_TO_YYYYDDD");
                  if( ! intrinsic_call_3((yyval.field), DAY_TO_YYYYDDD,
                                         (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30445 "parse.cc"
    break;

  case 1603: /* intrinsic: YEAR_TO_YYYY '(' expr ')'  */
#line 10790 "parse.y"
                {
                  location_set((yylsp[-3]));
                  static auto r2 = new_reference(new_literal("50", decimal_e));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric("YEAR_TO_YYYY");
                  if( ! intrinsic_call_3((yyval.field), YEAR_TO_YYYY,
                                         (yyvsp[-1].refer), r2, r3) ) YYERROR;
                }
#line 30465 "parse.cc"
    break;

  case 1604: /* intrinsic: YEAR_TO_YYYY '(' expr expr ')'  */
#line 10807 "parse.y"
                {
                  location_set((yylsp[-4]));
                  static auto one = new cbl_refer_t( new_literal("1") );
                  static auto four = new cbl_refer_t( new_literal("4") );
                  cbl_span_t year(one, four);
                  auto r3 = new_reference(new_alphanumeric(MAXLENGTH_CALENDAR_DATE));
                  r3->refmod = year;

                  parser_intrinsic_call_0( r3->field, "__gg__current_date" );

                  (yyval.field) = new_tempnumeric("YEAR_TO_YYYY");
                  if( ! intrinsic_call_3((yyval.field), YEAR_TO_YYYY,
                                         (yyvsp[-2].refer), (yyvsp[-1].refer), r3) ) YYERROR;
                }
#line 30484 "parse.cc"
    break;

  case 1605: /* intrinsic: YEAR_TO_YYYY '(' expr expr expr ')'  */
#line 10824 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_tempnumeric("YEAR_TO_YYYY");
                  if( ! intrinsic_call_3((yyval.field), YEAR_TO_YYYY,
                                         (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30495 "parse.cc"
    break;

  case 1606: /* intrinsic: intrinsic_N2 '(' expr expr ')'  */
#line 10832 "parse.y"
                {
                  location_set((yylsp[-4]));
                  switch((yyvsp[-4].number)) {
		  case ANNUITY:
		    (yyval.field) = new_tempnumeric_float();
		    break;
		  case COMBINED_DATETIME:
		    (yyval.field) = new_tempnumeric();
		    break;
		  case REM:
		    (yyval.field) = new_tempnumeric_float();
		    break;
		  }
		  (yyval.field)->data.initial = keyword_str((yyvsp[-4].number)); // function name
                  if( ! intrinsic_call_2((yyval.field), (yyvsp[-4].number), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30516 "parse.cc"
    break;

  case 1607: /* intrinsic: intrinsic_X2 '(' varg varg ')'  */
#line 10850 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric(keyword_str((yyvsp[-4].number)));
                  if( ! intrinsic_call_2((yyval.field), (yyvsp[-4].number), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30526 "parse.cc"
    break;

  case 1609: /* module_type: ACTIVATING  */
#line 10858 "parse.y"
                           { (yyval.module_type) = module_activating_e; }
#line 30532 "parse.cc"
    break;

  case 1610: /* module_type: CURRENT  */
#line 10859 "parse.y"
                           { (yyval.module_type) = module_current_e; }
#line 30538 "parse.cc"
    break;

  case 1611: /* module_type: NESTED  */
#line 10860 "parse.y"
                           { (yyval.module_type) = module_nested_e; }
#line 30544 "parse.cc"
    break;

  case 1612: /* module_type: STACK  */
#line 10861 "parse.y"
                           { (yyval.module_type) = module_stack_e; }
#line 30550 "parse.cc"
    break;

  case 1613: /* module_type: TOP_LEVEL  */
#line 10862 "parse.y"
                           { (yyval.module_type) = module_toplevel_e; }
#line 30556 "parse.cc"
    break;

  case 1623: /* numval_locale: %empty  */
#line 10878 "parse.y"
                       {
                  (yyval.numval_locale_t).is_locale = false;
                  (yyval.numval_locale_t).arg2 = cbl_refer_t::empty();
                }
#line 30565 "parse.cc"
    break;

  case 1624: /* numval_locale: LOCALE NAME  */
#line 10882 "parse.y"
                             { (yyval.numval_locale_t).is_locale = true;  (yyval.numval_locale_t).arg2 = NULL;
                  cbl_unimplemented("%<NUMVAL_C LOCALE%>"); YYERROR;
                }
#line 30573 "parse.cc"
    break;

  case 1625: /* numval_locale: varg  */
#line 10885 "parse.y"
                             { (yyval.numval_locale_t).is_locale = false; (yyval.numval_locale_t).arg2 = (yyvsp[0].refer); }
#line 30579 "parse.cc"
    break;

  case 1626: /* subst_inputs: subst_input  */
#line 10888 "parse.y"
                            { (yyval.substitutions) = new substitutions_t; (yyval.substitutions)->push_back((yyvsp[0].substitution)); }
#line 30585 "parse.cc"
    break;

  case 1627: /* subst_inputs: subst_inputs subst_input  */
#line 10889 "parse.y"
                                         { (yyval.substitutions) = (yyvsp[-1].substitutions); (yyval.substitutions)->push_back((yyvsp[0].substitution)); }
#line 30591 "parse.cc"
    break;

  case 1628: /* subst_input: anycase first_last varg varg  */
#line 10891 "parse.y"
                                                     {
                  (yyval.substitution).init( (yyvsp[-3].boolean), (yyvsp[-2].number), (yyvsp[-1].refer), (yyvsp[0].refer) );
                }
#line 30599 "parse.cc"
    break;

  case 1629: /* intrinsic_locale: "LOCALE-COMPARE" '(' varg varg ')'  */
#line 10898 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_3((yyval.field), LOCALE_COMPARE, (yyvsp[-2].refer), (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 30610 "parse.cc"
    break;

  case 1630: /* intrinsic_locale: "LOCALE-COMPARE" '(' varg varg varg ')'  */
#line 10905 "parse.y"
                {
                  location_set((yylsp[-5]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_3((yyval.field), LOCALE_COMPARE, (yyvsp[-3].refer), (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30620 "parse.cc"
    break;

  case 1631: /* intrinsic_locale: "LOCALE-DATE" '(' varg ')'  */
#line 10912 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_2((yyval.field), LOCALE_DATE, (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 30631 "parse.cc"
    break;

  case 1632: /* intrinsic_locale: "LOCALE-DATE" '(' varg varg ')'  */
#line 10919 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), LOCALE_DATE, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30641 "parse.cc"
    break;

  case 1633: /* intrinsic_locale: "LOCALE-TIME" '(' varg ')'  */
#line 10925 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME, (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 30652 "parse.cc"
    break;

  case 1634: /* intrinsic_locale: "LOCALE-TIME" '(' varg varg ')'  */
#line 10932 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30662 "parse.cc"
    break;

  case 1635: /* intrinsic_locale: "LOCALE-TIME-FROM-SECONDS" '(' varg ')'  */
#line 10938 "parse.y"
                {
                  location_set((yylsp[-3]));
                  (yyval.field) = new_alphanumeric();
                  cbl_refer_t dummy = {};
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME_FROM_SECONDS, (yyvsp[-1].refer), &dummy) ) YYERROR;
                }
#line 30673 "parse.cc"
    break;

  case 1636: /* intrinsic_locale: "LOCALE-TIME-FROM-SECONDS" '(' varg varg ')'  */
#line 10945 "parse.y"
                {
                  location_set((yylsp[-4]));
                  (yyval.field) = new_alphanumeric();
                  if( ! intrinsic_call_2((yyval.field), LOCALE_TIME_FROM_SECONDS, (yyvsp[-2].refer), (yyvsp[-1].refer)) ) YYERROR;
                }
#line 30683 "parse.cc"
    break;

  case 1637: /* lopper_case: "LOWER-CASE"  */
#line 10952 "parse.y"
                                { (yyval.number) = LOWER_CASE; }
#line 30689 "parse.cc"
    break;

  case 1638: /* lopper_case: UPPER_CASE  */
#line 10953 "parse.y"
                                { (yyval.number) = UPPER_CASE; }
#line 30695 "parse.cc"
    break;

  case 1639: /* trim_trailing: %empty  */
#line 10956 "parse.y"
                                { (yyval.field) = new_literal("0"); }
#line 30701 "parse.cc"
    break;

  case 1640: /* trim_trailing: LEADING  */
#line 10957 "parse.y"
                                { (yyval.field) = new_literal("1"); }
#line 30707 "parse.cc"
    break;

  case 1641: /* trim_trailing: TRAILING  */
#line 10958 "parse.y"
                                { (yyval.field) = new_literal("2"); }
#line 30713 "parse.cc"
    break;

  case 1642: /* intrinsic0: CURRENT_DATE  */
#line 10961 "parse.y"
                             {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric(MAXLENGTH_CALENDAR_DATE, "CURRENT-DATE");
                  parser_intrinsic_call_0( (yyval.field), "__gg__current_date" );
                }
#line 30723 "parse.cc"
    break;

  case 1643: /* intrinsic0: E  */
#line 10966 "parse.y"
                  {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric("E");
                 parser_intrinsic_call_0( (yyval.field), "__gg__e" );
                }
#line 30733 "parse.cc"
    break;

  case 1644: /* intrinsic0: "EXCEPTION-FILE-N"  */
#line 10972 "parse.y"
                                 {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-FILE-N");
                  intrinsic_call_0( (yyval.field), EXCEPTION_FILE_N );
                }
#line 30743 "parse.cc"
    break;

  case 1645: /* intrinsic0: "EXCEPTION-FILE"  */
#line 10978 "parse.y"
                               {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-FILE");
                  parser_exception_file( (yyval.field) );
                }
#line 30753 "parse.cc"
    break;

  case 1646: /* intrinsic0: "EXCEPTION-LOCATION-N"  */
#line 10983 "parse.y"
                                     {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-LOCATION-N");
                  intrinsic_call_0( (yyval.field), EXCEPTION_LOCATION_N );
                }
#line 30763 "parse.cc"
    break;

  case 1647: /* intrinsic0: "EXCEPTION-LOCATION"  */
#line 10988 "parse.y"
                                   {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-LOCATION");
                  intrinsic_call_0( (yyval.field), EXCEPTION_LOCATION );
                }
#line 30773 "parse.cc"
    break;

  case 1648: /* intrinsic0: "EXCEPTION-STATEMENT"  */
#line 10993 "parse.y"
                                    {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-STATEMENT");
                  intrinsic_call_0( (yyval.field), EXCEPTION_STATEMENT );
                }
#line 30783 "parse.cc"
    break;

  case 1649: /* intrinsic0: "EXCEPTION-STATUS"  */
#line 10998 "parse.y"
                                 {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("EXCEPTION-STATUS");
                  intrinsic_call_0( (yyval.field), EXCEPTION_STATUS );
                }
#line 30793 "parse.cc"
    break;

  case 1650: /* intrinsic0: PI  */
#line 11004 "parse.y"
                   {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric_float("PI");
                 parser_intrinsic_call_0( (yyval.field), "__gg__pi" );
                }
#line 30803 "parse.cc"
    break;

  case 1651: /* intrinsic0: "SECONDS-PAST-MIDNIGHT"  */
#line 11009 "parse.y"
                                      {
                  location_set((yylsp[0]));
                  (yyval.field) = new_tempnumeric("SECONDS-PAST-MIDNIGHT");
                 intrinsic_call_0( (yyval.field), SECONDS_PAST_MIDNIGHT );
                }
#line 30813 "parse.cc"
    break;

  case 1652: /* intrinsic0: UUID4  */
#line 11014 "parse.y"
                      {
                  location_set((yylsp[0]));
                  (yyval.field) = new_alphanumeric("UUID4");
                 parser_intrinsic_call_0( (yyval.field), "__gg__uuid4" );
                }
#line 30823 "parse.cc"
    break;

  case 1653: /* intrinsic0: WHEN_COMPILED  */
#line 11019 "parse.y"
                              {
                  location_set((yylsp[0]));
		  // Returns YYYYMMDDhhmmssss-0500)
                  (yyval.field) = new_alphanumeric(MAXLENGTH_CALENDAR_DATE, "WHEN-COMPILED"); 
                 parser_intrinsic_call_0( (yyval.field), "__gg__when_compiled" );
                }
#line 30834 "parse.cc"
    break;

  case 1654: /* intrinsic_I: "BOOLEAN-OF-INTEGER"  */
#line 11027 "parse.y"
                                       { (yyval.number) = BOOLEAN_OF_INTEGER;
		  cbl_unimplemented("BOOLEAN-OF-INTEGER");
		}
#line 30842 "parse.cc"
    break;

  case 1655: /* intrinsic_I: "CHAR-NATIONAL"  */
#line 11030 "parse.y"
                                       { (yyval.number) = CHAR_NATIONAL;
		    cbl_unimplemented("CHAR-NATIONAL");
		}
#line 30850 "parse.cc"
    break;

  case 1656: /* intrinsic_I: "DATE-OF-INTEGER"  */
#line 11033 "parse.y"
                                       { (yyval.number) = DATE_OF_INTEGER; }
#line 30856 "parse.cc"
    break;

  case 1657: /* intrinsic_I: "DAY-OF-INTEGER"  */
#line 11034 "parse.y"
                                       { (yyval.number) = DAY_OF_INTEGER; }
#line 30862 "parse.cc"
    break;

  case 1658: /* intrinsic_I: FACTORIAL  */
#line 11035 "parse.y"
                                       { (yyval.number) = FACTORIAL; }
#line 30868 "parse.cc"
    break;

  case 1659: /* intrinsic_I: "FRACTION-PART"  */
#line 11036 "parse.y"
                                       { (yyval.number) = FRACTION_PART; }
#line 30874 "parse.cc"
    break;

  case 1660: /* intrinsic_I: "HIGHEST-ALGEBRAIC"  */
#line 11037 "parse.y"
                                       { (yyval.number) = HIGHEST_ALGEBRAIC; }
#line 30880 "parse.cc"
    break;

  case 1661: /* intrinsic_I: INTEGER  */
#line 11038 "parse.y"
                                       { (yyval.number) = INTEGER; }
#line 30886 "parse.cc"
    break;

  case 1662: /* intrinsic_I: "INTEGER-OF-BOOLEAN"  */
#line 11039 "parse.y"
                                       { (yyval.number) = INTEGER_OF_BOOLEAN;
		    cbl_unimplemented("INTEGER-OF-BOOLEAN");
		}
#line 30894 "parse.cc"
    break;

  case 1663: /* intrinsic_I: "INTEGER-OF-DATE"  */
#line 11042 "parse.y"
                                       { (yyval.number) = INTEGER_OF_DATE; }
#line 30900 "parse.cc"
    break;

  case 1664: /* intrinsic_I: "INTEGER-OF-DAY"  */
#line 11043 "parse.y"
                                       { (yyval.number) = INTEGER_OF_DAY; }
#line 30906 "parse.cc"
    break;

  case 1665: /* intrinsic_I: "INTEGER-PART"  */
#line 11044 "parse.y"
                                       { (yyval.number) = INTEGER_PART; }
#line 30912 "parse.cc"
    break;

  case 1666: /* intrinsic_I: "LOWEST-ALGEBRAIC"  */
#line 11045 "parse.y"
                                       { (yyval.number) = LOWEST_ALGEBRAIC; }
#line 30918 "parse.cc"
    break;

  case 1667: /* intrinsic_I: SIGN  */
#line 11046 "parse.y"
                                       { (yyval.number) = SIGN; }
#line 30924 "parse.cc"
    break;

  case 1668: /* intrinsic_I: "TEST-DATE-YYYYMMDD"  */
#line 11047 "parse.y"
                                       { (yyval.number) = TEST_DATE_YYYYMMDD; }
#line 30930 "parse.cc"
    break;

  case 1669: /* intrinsic_I: "TEST-DAY-YYYYDDD"  */
#line 11048 "parse.y"
                                       { (yyval.number) = TEST_DAY_YYYYDDD; }
#line 30936 "parse.cc"
    break;

  case 1670: /* intrinsic_I: ULENGTH  */
#line 11049 "parse.y"
                                       { (yyval.number) = ULENGTH; }
#line 30942 "parse.cc"
    break;

  case 1671: /* intrinsic_I: UPOS  */
#line 11050 "parse.y"
                                       { (yyval.number) = UPOS; }
#line 30948 "parse.cc"
    break;

  case 1672: /* intrinsic_I: USUPPLEMENTARY  */
#line 11051 "parse.y"
                                       { (yyval.number) = USUPPLEMENTARY; }
#line 30954 "parse.cc"
    break;

  case 1673: /* intrinsic_I: UVALID  */
#line 11052 "parse.y"
                                       { (yyval.number) = UVALID; }
#line 30960 "parse.cc"
    break;

  case 1674: /* intrinsic_I: UWIDTH  */
#line 11053 "parse.y"
                                       { (yyval.number) = UWIDTH; }
#line 30966 "parse.cc"
    break;

  case 1675: /* intrinsic_I2: MOD  */
#line 11056 "parse.y"
                                       { (yyval.number) = MOD; }
#line 30972 "parse.cc"
    break;

  case 1676: /* intrinsic_N: ABS  */
#line 11059 "parse.y"
                                       { (yyval.number) = ABS; }
#line 30978 "parse.cc"
    break;

  case 1677: /* intrinsic_N: ACOS  */
#line 11060 "parse.y"
                                       { (yyval.number) = ACOS; }
#line 30984 "parse.cc"
    break;

  case 1678: /* intrinsic_N: ASIN  */
#line 11061 "parse.y"
                                       { (yyval.number) = ASIN; }
#line 30990 "parse.cc"
    break;

  case 1679: /* intrinsic_N: ATAN  */
#line 11062 "parse.y"
                                       { (yyval.number) = ATAN; }
#line 30996 "parse.cc"
    break;

  case 1680: /* intrinsic_N: COS  */
#line 11063 "parse.y"
                                       { (yyval.number) = COS; }
#line 31002 "parse.cc"
    break;

  case 1681: /* intrinsic_N: EXP  */
#line 11064 "parse.y"
                                       { (yyval.number) = EXP; }
#line 31008 "parse.cc"
    break;

  case 1682: /* intrinsic_N: EXP10  */
#line 11065 "parse.y"
                                       { (yyval.number) = EXP10; }
#line 31014 "parse.cc"
    break;

  case 1683: /* intrinsic_N: LOG  */
#line 11066 "parse.y"
                                       { (yyval.number) = LOG; }
#line 31020 "parse.cc"
    break;

  case 1684: /* intrinsic_N: LOG10  */
#line 11067 "parse.y"
                                       { (yyval.number) = LOG10; }
#line 31026 "parse.cc"
    break;

  case 1685: /* intrinsic_N: SIN  */
#line 11068 "parse.y"
                                       { (yyval.number) = SIN; }
#line 31032 "parse.cc"
    break;

  case 1686: /* intrinsic_N: "SMALLEST-ALGEBRAIC"  */
#line 11069 "parse.y"
                                       { (yyval.number) = SMALLEST_ALGEBRAIC;
		    cbl_unimplemented("SMALLEST-ALGEBRAIC");
		}
#line 31040 "parse.cc"
    break;

  case 1687: /* intrinsic_N: SQRT  */
#line 11072 "parse.y"
                                       { (yyval.number) = SQRT; }
#line 31046 "parse.cc"
    break;

  case 1688: /* intrinsic_N: TAN  */
#line 11073 "parse.y"
                                       { (yyval.number) = TAN; }
#line 31052 "parse.cc"
    break;

  case 1689: /* intrinsic_N2: ANNUITY  */
#line 11076 "parse.y"
                                       { (yyval.number) = ANNUITY; }
#line 31058 "parse.cc"
    break;

  case 1690: /* intrinsic_N2: "COMBINED-DATETIME"  */
#line 11077 "parse.y"
                                       { (yyval.number) = COMBINED_DATETIME; }
#line 31064 "parse.cc"
    break;

  case 1691: /* intrinsic_N2: REM  */
#line 11078 "parse.y"
                                       { (yyval.number) = REM; }
#line 31070 "parse.cc"
    break;

  case 1692: /* intrinsic_X: "BIT-TO-CHAR"  */
#line 11081 "parse.y"
                                       { (yyval.number) = BIT_TO_CHAR; }
#line 31076 "parse.cc"
    break;

  case 1693: /* intrinsic_X: "BYTE-LENGTH"  */
#line 11082 "parse.y"
                                       { (yyval.number) = BYTE_LENGTH; }
#line 31082 "parse.cc"
    break;

  case 1694: /* intrinsic_X: "HEX-TO-CHAR"  */
#line 11083 "parse.y"
                                       { (yyval.number) = HEX_TO_CHAR; }
#line 31088 "parse.cc"
    break;

  case 1695: /* intrinsic_X: NUMVAL  */
#line 11084 "parse.y"
                                       { (yyval.number) = NUMVAL; }
#line 31094 "parse.cc"
    break;

  case 1696: /* intrinsic_X: "NUMVAL-F"  */
#line 11085 "parse.y"
                                       { (yyval.number) = NUMVAL_F; }
#line 31100 "parse.cc"
    break;

  case 1697: /* intrinsic_X: REVERSE  */
#line 11086 "parse.y"
                                       { (yyval.number) = REVERSE; }
#line 31106 "parse.cc"
    break;

  case 1698: /* intrinsic_X: "TEST-NUMVAL"  */
#line 11087 "parse.y"
                                       { (yyval.number) = TEST_NUMVAL; }
#line 31112 "parse.cc"
    break;

  case 1699: /* intrinsic_X: "TEST-NUMVAL-F"  */
#line 11088 "parse.y"
                                       { (yyval.number) = TEST_NUMVAL_F; }
#line 31118 "parse.cc"
    break;

  case 1700: /* intrinsic_X2: "NATIONAL-OF"  */
#line 11091 "parse.y"
                                       { (yyval.number) = NATIONAL_OF; }
#line 31124 "parse.cc"
    break;

  case 1701: /* intrinsic_v: CONCAT  */
#line 11094 "parse.y"
                                       { (yyval.number) = CONCAT; }
#line 31130 "parse.cc"
    break;

  case 1702: /* intrinsic_v: "Max"  */
#line 11095 "parse.y"
                                       { (yyval.number) = MAXX; }
#line 31136 "parse.cc"
    break;

  case 1703: /* intrinsic_v: MEAN  */
#line 11096 "parse.y"
                                       { (yyval.number) = MEAN; }
#line 31142 "parse.cc"
    break;

  case 1704: /* intrinsic_v: MEDIAN  */
#line 11097 "parse.y"
                                       { (yyval.number) = MEDIAN; }
#line 31148 "parse.cc"
    break;

  case 1705: /* intrinsic_v: MIDRANGE  */
#line 11098 "parse.y"
                                       { (yyval.number) = MIDRANGE; }
#line 31154 "parse.cc"
    break;

  case 1706: /* intrinsic_v: "Min"  */
#line 11099 "parse.y"
                                       { (yyval.number) = MINN; }
#line 31160 "parse.cc"
    break;

  case 1707: /* intrinsic_v: "ORD-MAX"  */
#line 11100 "parse.y"
                                       { (yyval.number) = ORD_MAX; }
#line 31166 "parse.cc"
    break;

  case 1708: /* intrinsic_v: "ORD-MIN"  */
#line 11101 "parse.y"
                                       { (yyval.number) = ORD_MIN; }
#line 31172 "parse.cc"
    break;

  case 1709: /* intrinsic_v: RANGE  */
#line 11102 "parse.y"
                                       { (yyval.number) = RANGE; }
#line 31178 "parse.cc"
    break;

  case 1710: /* intrinsic_v: "STANDARD-DEVIATION "  */
#line 11103 "parse.y"
                                       { (yyval.number) = STANDARD_DEVIATION; }
#line 31184 "parse.cc"
    break;

  case 1711: /* intrinsic_v: SUM  */
#line 11104 "parse.y"
                                       { (yyval.number) = SUM; }
#line 31190 "parse.cc"
    break;

  case 1712: /* intrinsic_v: VARIANCE  */
#line 11105 "parse.y"
                                       { (yyval.number) = VARIANCE; }
#line 31196 "parse.cc"
    break;

  case 1713: /* all: %empty  */
#line 11108 "parse.y"
                       { (yyval.boolean) = false; }
#line 31202 "parse.cc"
    break;

  case 1714: /* all: ALL  */
#line 11109 "parse.y"
                       { (yyval.boolean) = true; }
#line 31208 "parse.cc"
    break;

  case 1715: /* anycase: %empty  */
#line 11112 "parse.y"
                        { (yyval.boolean) = false; }
#line 31214 "parse.cc"
    break;

  case 1716: /* anycase: ANYCASE  */
#line 11113 "parse.y"
                        { (yyval.boolean) = true; }
#line 31220 "parse.cc"
    break;

  case 1737: /* first_last: %empty  */
#line 11156 "parse.y"
                        { (yyval.number) = 0; }
#line 31226 "parse.cc"
    break;

  case 1738: /* first_last: FIRST  */
#line 11157 "parse.y"
                        { (yyval.number) = 'F'; }
#line 31232 "parse.cc"
    break;

  case 1739: /* first_last: LAST  */
#line 11158 "parse.y"
                        { (yyval.number) = 'L'; }
#line 31238 "parse.cc"
    break;

  case 1740: /* is_global: %empty  */
#line 11161 "parse.y"
                                    { (yyval.boolean) = false; }
#line 31244 "parse.cc"
    break;

  case 1741: /* is_global: is GLOBAL  */
#line 11162 "parse.y"
                                    { (yyval.boolean) = true; }
#line 31250 "parse.cc"
    break;

  case 1742: /* global: %empty  */
#line 11165 "parse.y"
                                    { (yyval.boolean) = false; }
#line 31256 "parse.cc"
    break;

  case 1743: /* global: GLOBAL  */
#line 11166 "parse.y"
                                    { (yyval.boolean) = true; }
#line 31262 "parse.cc"
    break;

  case 1744: /* initial: %empty  */
#line 11169 "parse.y"
                            { (yyval.number) = 0; }
#line 31268 "parse.cc"
    break;

  case 1745: /* initial: "INITIAL"  */
#line 11170 "parse.y"
                            { (yyval.number) = INITIAL_kw; }
#line 31274 "parse.cc"
    break;

  case 1763: /* optional: %empty  */
#line 11206 "parse.y"
                         { (yyval.boolean) = false; }
#line 31280 "parse.cc"
    break;

  case 1764: /* optional: OPTIONAL  */
#line 11207 "parse.y"
                         { (yyval.boolean) = true;  }
#line 31286 "parse.cc"
    break;

  case 1773: /* is_signed: %empty  */
#line 11226 "parse.y"
                            { (yyval.boolean) = true; }
#line 31292 "parse.cc"
    break;

  case 1774: /* is_signed: SIGNED_kw  */
#line 11227 "parse.y"
                            { (yyval.boolean) = true; }
#line 31298 "parse.cc"
    break;

  case 1775: /* is_signed: UNSIGNED_kw  */
#line 11228 "parse.y"
                            { (yyval.boolean) = false; }
#line 31304 "parse.cc"
    break;

  case 1780: /* strong: %empty  */
#line 11238 "parse.y"
                       { (yyval.boolean) = true; }
#line 31310 "parse.cc"
    break;

  case 1781: /* strong: STRONG  */
#line 11239 "parse.y"
                       { (yyval.boolean) = false; }
#line 31316 "parse.cc"
    break;

  case 1801: /* cdf_use: cdf_use_when  */
#line 11279 "parse.y"
                             {
		  statement_cleanup = false;
		}
#line 31324 "parse.cc"
    break;

  case 1802: /* cdf_use_when: USE DEBUGGING on labels  */
#line 11285 "parse.y"
                {
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-3]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  std::for_each((yyvsp[0].labels)->elems.begin(), (yyvsp[0].labels)->elems.end(),
                                add_debugging_declarative);

                }
#line 31338 "parse.cc"
    break;

  case 1803: /* cdf_use_when: USE DEBUGGING on ALL PROCEDURES  */
#line 11295 "parse.y"
                {
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-4]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  static const cbl_label_t all = {
		    LblNone, 0, 0,0,0, false, false, false, 0,0, ":all:" };
                  add_debugging_declarative(&all);
                 }
#line 31352 "parse.cc"
    break;

  case 1804: /* cdf_use_when: USE globally mistake procedure on filenames  */
#line 11306 "parse.y"
                { // Format 1
                  if( ! current.declarative_section_name() ) {
		    error_msg((yylsp[-5]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  bool global = (yyvsp[-4].number) == GLOBAL;
                  std::list<size_t> files;
		  auto& culprits = (yyvsp[0].files)->files;
                    std::transform( culprits.begin(), culprits.end(),
                                    std::back_inserter(files),
                                    file_list_t::symbol_index );
                  cbl_declarative_t declarative(current.declarative_section(),
                                                ec_io_e, files,
                                                file_mode_any_e, global);
                  current.declaratives.add(declarative);
		}
#line 31373 "parse.cc"
    break;

  case 1805: /* cdf_use_when: USE globally mistake procedure on io_mode  */
#line 11324 "parse.y"
                { // Format 1
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-5]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                  bool global = (yyvsp[-4].number) == GLOBAL;
                  std::list<size_t> files;
                  cbl_declarative_t declarative(current.declarative_section(),
                                                ec_io_e, files,
                                                (yyvsp[0].io_mode), global);
                  current.declaratives.add(declarative);
                }
#line 31390 "parse.cc"
    break;

  case 1806: /* cdf_use_when: USE cdf_use_excepts  */
#line 11337 "parse.y"
                { // Format 3 (AFTER swallowed by lexer)
                  if( ! current.declarative_section_name() ) {
                    error_msg((yylsp[-1]), "USE valid only in DECLARATIVES");
                    YYERROR;
                  }
                }
#line 31401 "parse.cc"
    break;

  case 1809: /* cdf_use_except: EC NAME cdf_use_files  */
#line 11350 "parse.y"
                {
                  auto ec = ec_type_of((yyvsp[-1].string));
                  if( ec == ec_none_e ) {
                    error_msg((yylsp[-1]), "not an EXCEPTION CONDITION: %s", (yyvsp[-1].string));
                    YYERROR;
                  }
                  std::list<size_t> files;
                  if( (yyvsp[0].files) ) {
                    if( ec_io_e != (ec_io_e & ec) ) {
                      error_msg((yylsp[-1]), "not an I-O EXCEPTION CONDITION: %s", (yyvsp[-1].string));
                      YYERROR;
                    }
                    auto& culprits = (yyvsp[0].files)->files;
                    std::transform( culprits.begin(), culprits.end(),
                                    std::back_inserter(files),
                                    file_list_t::symbol_index );
                  }

                  cbl_declarative_t declarative(current.declarative_section(),
                                                ec, files, file_mode_none_e);
                  // Check for duplicates, but keep going.
                  current.declaratives.add(declarative);
                }
#line 31429 "parse.cc"
    break;

  case 1810: /* cdf_use_files: %empty  */
#line 11374 "parse.y"
                                  { (yyval.files) = NULL; }
#line 31435 "parse.cc"
    break;

  case 1811: /* cdf_use_files: "File" filenames  */
#line 11375 "parse.y"
                                  { (yyval.files) = (yyvsp[0].files); }
#line 31441 "parse.cc"
    break;

  case 1812: /* io_mode: INPUT  */
#line 11378 "parse.y"
                           { (yyval.io_mode) = file_mode_input_e; }
#line 31447 "parse.cc"
    break;

  case 1813: /* io_mode: OUTPUT  */
#line 11379 "parse.y"
                           { (yyval.io_mode) = file_mode_output_e; }
#line 31453 "parse.cc"
    break;

  case 1814: /* io_mode: IO  */
#line 11380 "parse.y"
                           { (yyval.io_mode) = file_mode_io_e; }
#line 31459 "parse.cc"
    break;

  case 1815: /* io_mode: EXTEND  */
#line 11381 "parse.y"
                           { (yyval.io_mode) = file_mode_extend_e; }
#line 31465 "parse.cc"
    break;

  case 1816: /* globally: global  */
#line 11384 "parse.y"
                                                  { (yyval.number) = (yyvsp[0].boolean)? GLOBAL : 0; }
#line 31471 "parse.cc"
    break;

  case 1817: /* globally: global STANDARD  */
#line 11385 "parse.y"
                                                  { (yyval.number) = (yyvsp[-1].boolean)? GLOBAL : STANDARD; }
#line 31477 "parse.cc"
    break;

  case 1818: /* globally: global AFTER  */
#line 11386 "parse.y"
                                                  { (yyval.number) = (yyvsp[-1].boolean)? GLOBAL : 0; }
#line 31483 "parse.cc"
    break;

  case 1819: /* globally: global AFTER STANDARD  */
#line 11387 "parse.y"
                                                  { (yyval.number) = (yyvsp[-2].boolean)? GLOBAL : STANDARD; }
#line 31489 "parse.cc"
    break;

  case 1820: /* mistake: EXCEPTION  */
#line 11389 "parse.y"
                                    { (yyval.number) = EXCEPTION; }
#line 31495 "parse.cc"
    break;

  case 1821: /* mistake: ERROR  */
#line 11390 "parse.y"
                                    { (yyval.number) = ERROR; }
#line 31501 "parse.cc"
    break;

  case 1827: /* star_cbl_opt: LIST  */
#line 11401 "parse.y"
                       { (yyval.number) = (yyvsp[0].string)[0]   == 'N'? NOLIST : LIST; }
#line 31507 "parse.cc"
    break;

  case 1828: /* star_cbl_opt: MAP  */
#line 11402 "parse.y"
                       { (yyval.number) = (yyvsp[0].string)[0]    == 'N'? NOMAP : MAP; }
#line 31513 "parse.cc"
    break;


#line 31517 "parse.cc"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      {
        yypcontext_t yyctx
          = {yyssp, yytoken, &yylloc};
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == -1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *,
                             YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (yymsg)
              {
                yysyntax_error_status
                  = yysyntax_error (&yymsg_alloc, &yymsg, &yyctx);
                yymsgp = yymsg;
              }
            else
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = YYENOMEM;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == YYENOMEM)
          YYNOMEM;
      }
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
  return yyresult;
}

#line 11423 "parse.y"


static YYLTYPE
first_line_of( YYLTYPE loc ) {
    if( loc.first_line < loc.last_line ) loc.last_line = loc.first_line;
    if( loc.last_column < loc.first_column ) loc.last_column = loc.first_column;
    return loc;
}

void ast_call( const YYLTYPE& loc, cbl_refer_t name, const cbl_refer_t& returning,
                  size_t narg, cbl_ffi_arg_t args[],
                  cbl_label_t *except,
                  cbl_label_t *not_except,
                  bool is_function)
{
  if( is_literal(name.field) ) {
    cbl_field_t called = {      0, FldLiteralA, FldInvalid, quoted_e | constant_e,
                                0, 0, 77, nonarray, 0, "",
                                0, cbl_field_t::linkage_t(), {}, NULL };
    snprintf(called.name, sizeof(called.name), "_%s", name.field->data.initial);
    called.data = name.field->data;
    name.field = cbl_field_of(symbol_field_add(PROGRAM, &called));
    symbol_field_location(field_index(name.field), loc);
    parser_symbol_add(name.field);
  }

  parser_call( name, returning, narg, args, except, not_except, is_function );
}

/*
 * Check if any EC *could* be raised that would be handled by a declarative. If
 * so, the generated statement epilog will ask the runtime library to attempt
 * to match any raised EC with a declarative.  If not, the statement epilog
 * will be limited to calling the default EC handler, which logs unhandled ECs
 * [todo] and calls abort(3) for fatal ECs.
 */
static bool
possible_ec() {
  cbl_enabled_exceptions_t& enabled_exceptions( cdf_enabled_exceptions() );
  bool format_1 = current.declaratives.has_format_1();
      
  bool enabled = 0xFF < (current.declaratives.status()
			 &
			 enabled_exceptions.status());
  bool epilog = enabled || format_1;
  
  dbgmsg("%sEC handling for DCL %08x && EC %08x with %s Format 1",
	 epilog? "" : "no ", 
	 current.declaratives.status(),
	 enabled_exceptions.status(), format_1? "a" : "no");
  
  return epilog;
}

/*
 * If there's potential overlap between enabled ECs and Declaratives, generate
 * a PERFORM of the _DECLARATIVES_EVAL "ladder" that matches a section number
 * to its name, and executes the Declarative.
 */
static void
statement_epilog( int token ) {
  cbl_enabled_exceptions_t& enabled_exceptions( cdf_enabled_exceptions() );
  if( possible_ec() && token != CONTINUE ) { 
    if( enabled_exceptions.size() ) {
      current.declaratives_evaluate();
    }
  }
  parser_check_fatal_exception();
}

static inline void
statement_prolog( int token ) {
  parser_statement_begin( keyword_str(token),
			  current.declaratives.runtime.ena,
			  current.declaratives.runtime.dcl );
}

/*
 * We check the EC against the Declarative status prior to parsing the
 * statement because a TURN directive can be embedded in the statement.  An
 * embedded directive applies to the following statement, not the one being
 * parsed.
 */
static void
statement_begin( const YYLTYPE& loc, int token ) {
  static int prior_token = 0;

  if( statement_cleanup )  {
    statement_epilog(prior_token);
  } else {
    statement_cleanup = true;
  }
  location_set(loc);
  statement_prolog(token);

  prior_token = token;
}

#include "parse_util.h"
#include <sys/types.h>

struct string_match {
  const char *name;
  explicit string_match( const char name[] ) : name(name) {}
  bool operator()( const char input[] ) const {
    return strlen(name) == strlen(input) && 0 == strcasecmp(name, input);
  }
};

const char *
keyword_str( int token ) {
  switch( token ) {
  case YYEOF:   return "YYEOF";
  case YYEMPTY: return "YYEMPTY";
  case 256:     return "YYerror";
  case 257:     return "invalid token"; // YYUNDEF
  }
  
  if( token < 256 ) {
    static char ascii[2];
    ascii[0] = token;
    return ascii;
  }

  return cdf_tokens.name_of(token);
}

bool iso_cobol_word( const std::string& name, bool include_context );

/*
 * Return the token for the Cobol name, unless it is a function name.  The
 * lexer uses keyword_tok to determine if what appears to be a NAME is in fact
 * a token defined by the parser.  For functions, the situation is unambiguous:
 * a function name appears only after FUNCTION or in the REPOSITORY paragraph.
 * All function names are rejected here; the lexer uses typed_name to check
 * REPOSITORY names.
 */

// tokens.h is generated as needed from parse.h with tokens.h.gen
current_tokens_t::tokenset_t::tokenset_t() {
#include "token_names.h"
}


// Look up the lowercase form of a keyword, excluding some CDF names.
int
current_tokens_t::tokenset_t::find( const cbl_name_t name, bool include_intrinsics ) {
  static const cbl_name_t non_names[] = { // including CDF NAMES, and "SWITCH"
    "CHECKING", "LIST", "LOCATION", "MAP", "SWITCH",
  }, * const eonames = non_names + COUNT_OF(non_names);

  if( std::any_of(non_names, eonames,
		  [candidate=name](const cbl_name_t non_name) {
		    return 0 == strcasecmp(non_name, candidate)
		      && strlen(non_name) == strlen(candidate);
		  } ) ) {
    return 0; // CDF names are never ordinary tokens
  }

  if( dialect_ibm() ) {
      static const cbl_name_t ibm_non_names[] = {
	  "RESUME",
      }, * const eoibm = ibm_non_names + COUNT_OF(ibm_non_names);

      if( std::any_of(ibm_non_names, eoibm,
		      [candidate=name](const cbl_name_t non_name) {
			  return 0 == strcasecmp(non_name, candidate)
			      && strlen(non_name) == strlen(candidate);
		      } ) ) {
	  return 0; // Names not reserved by IBM are never ordinary IBM tokens
      }
  }

  /*
   * The input name may be one of:
   *  1. an intrinsic function name (OK if include_intrinsics)
   *  2. an ISO/GCC reserved word or context-sensitive word (OK)
   *  3. a token in our token list for convenience, such as BINARY_INTEGER (bzzt)
   */
  
  cbl_name_t lname;
  std::transform(name, name + strlen(name) + 1, lname, ftolower);
  auto p = tokens.find(lname);
  if( p == tokens.end() ) return 0;
  int token = p->second;

  if( token == SECTION ) yylval.number = 0;

  if( include_intrinsics && intrinsic_cname(token) ) return token;
  if( iso_cobol_word(uppercase(name), true) ) return token;
  
  return 0;
}

int
keyword_tok( const char * text, bool include_intrinsics ) {
  return cdf_tokens.find(text, include_intrinsics);
}

static inline size_t
verify_figconst( enum cbl_figconst_t figconst , size_t pos ) {
  const cbl_field_t *f = cbl_field_of(symbol_at(pos));
  assert((f->attr & FIGCONST_MASK) == figconst);
  return pos;
}

static size_t
constant_index( int token ) {
  switch(token) {
  case SPACES      : return 0;
  case LOW_VALUES  : return verify_figconst(low_value_e, 2);
  case ZERO        : return verify_figconst(zero_value_e, 3);
  case HIGH_VALUES : return verify_figconst(high_value_e, 4);
  case QUOTES      : return 5;
  case NULLS       : return 6;
  }
  cbl_errx( "%s:%d: no such constant %d", __func__, __LINE__, token);
  return (size_t)-1;
}


static enum relop_t
relop_of(int token) {
  switch(token) {
  case '<': return lt_op;
  case LE:  return le_op;
  case '=': return eq_op;
  case NE:  return ne_op;
  case GE:  return ge_op;
  case '>': return gt_op;
  }
  cbl_internal_error( "%s:%d: invalid relop token %d",
		      __func__, __LINE__, token);

  return lt_op; // not reached
}

static relop_t
relop_invert(relop_t op) {
  switch(op) {
  case lt_op: return ge_op;
  case le_op: return gt_op;
  case eq_op: return ne_op;
  case ne_op: return eq_op;
  case ge_op: return lt_op;
  case gt_op: return le_op;
  }
  cbl_internal_error("%s:%d: invalid %<relop_t%> %d", __func__, __LINE__, op);

  return relop_t(0); // not reached
}

#if needed
static const char *
relop_debug_str(int token) {
  switch(token) {
  case 0:   return "zilch";
  case '<': return "<";
  case LE:  return "LE";
  case '=': return "=";
  case NE:  return "NE";
  case GE:  return "GE";
  case '>': return ">";
  }
  dbgmsg("%s:%d: invalid relop token %d", __func__, __LINE__, token);
  return "???";
}

static int
token_of(enum relop_t op) {
  switch(op) {
  case lt_op: return '<';
  case le_op: return LE;
  case eq_op: return '=';
  case ne_op: return NE;
  case ge_op: return GE;
  case gt_op: return '>';
  }
  cbl_errx( "%s:%d: invalid relop_t %d", __func__, __LINE__, op);

  return 0; // not reached
}
#endif

static enum classify_t
classify_of( int token ) {
  switch(token) {
  case NUMERIC:             return ClassNumericType;
  case ALPHABETIC:          return ClassAlphabeticType;
  case ALPHABETIC_LOWER:    return ClassLowerType;
  case ALPHABETIC_UPPER:    return ClassUpperType;
  case DBCS:                return ClassDbcsType;
  case KANJI:               return ClassKanjiType;
  }
  return (enum classify_t)-1;
}

static cbl_round_t
rounded_of( int token ) {
  cbl_round_t mode = current_rounded_mode();
  if( 0 <= token && token <= int(truncation_e) ) {
    return cbl_round_t(token);
  }
  switch(token) {
  case ROUNDED:
    mode = current.rounded_mode();
    break;
  case AWAY_FROM_ZERO:
    mode = away_from_zero_e;
    break;
  case NEAREST_TOWARD_ZERO:
    mode = nearest_toward_zero_e;
    break;
  case TOWARD_GREATER:
    mode = toward_greater_e;
    break;
  case TOWARD_LESSER:
    mode = toward_lesser_e;
    break;
  case NEAREST_AWAY_FROM_ZERO:
    mode = nearest_away_from_zero_e;
    break;
  case NEAREST_EVEN:
    mode = nearest_even_e;
    break;
  case PROHIBITED:
    mode = prohibited_e;
    break;
  case TRUNCATION:
    mode = truncation_e;
    break;
  default:
    dbgmsg("%s: logic error: unrecognized rounding value %d", __func__, token);
  }
  return mode;
}

static cbl_round_t
current_rounded_mode( int token ) {
  cbl_round_t mode = rounded_of(token);
  return current.rounded_mode(mode);
}

template <cbl_label_type_t T>
class label_named {
  size_t program;
  const char *name;
 public:
 label_named( size_t program, const char name[] )
   : program(program), name(name) {}
    bool operator()( const symbol_elem_t& sym ) const {
    if( sym.program == program && sym.type == SymLabel ) {
      auto p = cbl_label_of(&sym);
      return p->type == T && 0 == strcasecmp(p->name, name);
    }
    return false;
  }
};

typedef label_named<LblSection> section_named;
typedef label_named<LblParagraph> paragraph_named;

static struct cbl_label_t *
label_add( const YYLTYPE& loc,
	   enum cbl_label_type_t type, const char name[] ) {
  size_t parent = 0;

  // Verify the new paragraph doesn't conflict with a section
  if( type == LblParagraph ) {
    parent = current.program_section();
    auto p = std::find_if(symbols_begin(PROGRAM), symbols_end(),
                          section_named(PROGRAM, name));
    if( p != symbols_end() ) {
      error_msg(loc, "paragraph %s conflicts with section %s on line %d",
                name, cbl_label_of(p)->name, cbl_label_of(p)->line);
    }
  }

  // Verify the new section doesn't conflict with a paragraph
  if( type == LblSection ) {
    // line is zero if the forward reference is to PARA OF SECT
    auto p = std::find_if(symbols_begin(PROGRAM), symbols_end(),
                          paragraph_named(PROGRAM, name));
    if( p != symbols_end() ) {
      error_msg(loc, "section %s conflicts with paragraph %s on line %d",
                name, cbl_label_of(p)->name, cbl_label_of(p)->line);
    }
  }
  struct cbl_label_t label = { type, parent, loc.first_line };

  if( !namcpy(loc, label.name, name) ) return NULL;
  auto p =  symbol_label_add(PROGRAM, &label);

  if( type == LblParagraph || type == LblSection ) {
    procedure_definition_add(PROGRAM, p);
  }

  assert( !(p->type == LblSection && p->parent > 0) );

  return p;
}

/*
 * Many label names are defined statically and so are guaranteed to be in
 * bounds. Often they are created far away from the yacc metavariables, so
 * there's no location to access.
 */
static struct cbl_label_t *
label_add( enum cbl_label_type_t type, const char name[], int line ) {
  YYLTYPE loc { line, 1, line, 1 };
  return label_add(loc, type, name);
}

cbl_label_t *
perform_t::ec_labels_t::new_label( cbl_label_type_t type,
				   const cbl_name_t role )
{
  size_t n = 1 + symbols_end() - symbols_begin();
  cbl_name_t name;
  sprintf(name, "_perf_%s_" HOST_SIZE_T_PRINT_UNSIGNED, role, (fmt_size_t)n);
  return label_add( type, name, yylineno );
}

/*
 * An unqualified procedure reference occurs within a section may refer to a:
 *   1.  section
 *   2.  paragraph, perhaps in a section, perhaps the current section.
 *
 * The named procedure need only be unique, either within the current section
 * or globally. A paragraph within one section may be referenced without
 * qualification in another section if its name is unique.
 *
 * An otherwise globally unique name is shadowed by the same name in the
 * current section, and the section-local name may be referenced before being
 * defined.  That is, given:
 *
 *   S1 SECTION.
 *     PROC.
 *       ...
 *   S2 SECTION.
 *     PERFORM PROC.
 *     PROC. ...
 *
 * the procedure performed is PROC OF S2.
 *
 * That creates a challenge for the compiler, because PROC appears to have been
 * defined when PERFORM is encountered.  When PROC OF S2 is defined, the parser
 * detects and corrects its misstep.
 */
static struct cbl_label_t *
paragraph_reference( const char name[], size_t section )
{
  // A reference has line == 0.  It is LblParagraph if the section is
  // explicitly named, else LblNone (because we don't know).
  struct cbl_label_t *p, label = { section? LblParagraph : LblNone, section };
  assert(strlen(name) < sizeof(label.name)); // caller ensures
  strcpy(label.name, name);
  if( label.type == LblNone ) assert(label.parent == 0);

  p = symbol_label_add(PROGRAM, &label);
  assert(p);

  const char *sect_name = section? cbl_label_of(symbol_at(section))->name : NULL;
  procedure_reference_add(sect_name, p->name, yylineno, current.program_section());

  return p;
}

void
current_t::repository_add_all() {
  assert( !programs.empty() );
  auto& repository = programs.top().function_repository;
  std::copy( function_descrs, function_descrs_end,
                  std::inserter(repository, repository.begin()) );
}

/*
 * A function is added to the symbol table when first named, in Identification
 * Division. It's also added to the current list of UDFs in current_t::udfs.
 * Its return type and parameters, if any, are defined later, in Procedure
 * Division.  When they are parsed, we call udf_update to finalize the
 * functions's descriptor, giving us enough information to validate the
 * arguments at point of invocation.
 */
void
current_t::udf_update( const ffi_args_t *ffi_args ) {
  auto L = cbl_label_of(symbol_at(program_index()));
  assert(L);
  assert(L->type == LblFunction);
  assert(L->returning);
  if( ! ffi_args ) return;
  assert(ffi_args->elems.size() < sizeof(function_descr_t::types));

  const auto returning = cbl_field_of(symbol_at(L->returning));
  auto key = function_descr_t::init(L->name);
  auto func = udfs.find(key);
  assert(func != udfs.end());

  function_descr_t udf = *func;

  udf.ret_type = returning->type;
  udf.token = ffi_args->elems.empty()? FUNCTION_UDF_0 : FUNCTION_UDF;
  auto types = ffi_args->parameter_types();
  strcpy(udf.types, types);

  std::transform( ffi_args->elems.begin(), ffi_args->elems.end(),
		  std::back_inserter(udf.linkage_fields),
		  []( const cbl_ffi_arg_t& arg ) {
		    return function_descr_arg_t( field_index( arg.refer.field ),
						 arg.crv, arg.optional );
		  } );

  udfs.erase(func);
  auto result = udfs.insert(udf);
  assert(result.second);
}

bool
current_t::udf_args_valid( const cbl_label_t *L,
			   const std::list<cbl_refer_t>& args,
			   std::vector<function_descr_arg_t>& params /*out*/ )
{
  auto key = function_descr_t::init(L->name);
  auto func = udfs.find(key);
  assert(func != udfs.end());
  function_descr_t udf = *func;
  params = udf.linkage_fields;

  if( udf.linkage_fields.size() < args.size() ) {
    auto loc = symbol_field_location(field_index(args.back().field));
    error_msg(loc, "too many parameters for UDF %s", L->name);
    return false;
  }

  size_t i = 0;
  for( const cbl_refer_t& arg : args ) {
    if( arg.field ) { // else omitted
      auto tgt = cbl_field_of(symbol_at(udf.linkage_fields.at(i).isym));
      if( ! valid_move(tgt, arg.field) ) {
	auto loc = symbol_field_location(field_index(arg.field));
	error_msg(loc, "FUNCTION %s argument %zu, '%s' cannot be passed to %s, type %s",
		  L->name, i, arg.field->pretty_name(),
		  tgt->pretty_name(), 3 + cbl_field_type_str(tgt->type) );
	return false;
      }
    }
    i++;
  }
  return true;
}

bool
current_t::repository_add( const char name[]) {
  assert( !programs.empty() );
  function_descr_t arg = function_descr_t::init(name);
  auto parg = std::find( function_descrs, function_descrs_end, arg );
  if( parg == function_descrs_end ) {
    dbgmsg("%s:%d: no intrinsic %s found", __func__, __LINE__, name);
    return false;
  }
  auto p = programs.top().function_repository.insert(*parg);
  if( yydebug ) {
    for( auto descr : programs.top().function_repository ) {
      dbgmsg("%s:%d: %-20s %-20s %-20s", __func__, __LINE__,
	    keyword_str(descr.token), descr.name, descr.cname);
    }
  }
  return p.second;
}

int
current_t::repository_in( const char name[]) {
  assert( !programs.empty() );
  auto isym = programs.top().program_index;
  // possible to call self
  auto self = cbl_label_of(symbol_at(isym));
  if( self->type == LblFunction ) {
    if( 0 == strcasecmp(self->name, name) ) {
      return FUNCTION_UDF;
    }
  }
  function_descr_t arg = function_descr_t::init(name);
  auto repository = programs.top().function_repository;
  auto p = repository.find(arg);
  return p != repository.end()? p->token : 0;
}

int repository_function_tok( const char name[] ) {
  return current.repository_in(name);
}

function_descr_t
function_descr_t::init( int isym ) {
  function_descr_t descr = { FUNCTION_UDF_0 };
  descr.ret_type = FldInvalid;
  const auto L = cbl_label_of(symbol_at(isym));
  bool ok = namcpy(YYLTYPE(), descr.name, L->name);
  gcc_assert(ok);
  return descr;
}

arith_t::arith_t( cbl_arith_format_t format, refer_list_t * refers )
  : format(format), on_error(NULL), not_error(NULL)
{
  std::copy( refers->refers.begin(), refers->refers.end(), back_inserter(A) );
  refers->refers.clear();
  delete refers;
}

cbl_key_t::cbl_key_t( sort_key_t that )
  : ascending(that.ascending)
  , fields( that.fields.begin(), that.fields.end() )
{}

cbl_key_t&
cbl_key_t::operator=( const sort_key_t& that ) {
  ascending = that.ascending;
  fields = that.as_vector();
  return *this;
}

static cbl_refer_t *
ast_op( cbl_refer_t *lhs, char op, cbl_refer_t *rhs ) {
  assert(lhs);
  assert(rhs);
  if( ! (is_numeric(lhs->field) && is_numeric(rhs->field)) ) {
    // If one of the fields isn't numeric, allow for index addition.
    switch(op) {
    case '+':
    case '-':
      // Simple addition OK for table indexes.
      if( lhs->field->type == FldIndex || rhs->field->type == FldIndex ) {
        goto ok;
      }
    }

    auto f  = !is_numeric(lhs->field)? lhs->field : rhs->field;
    auto loc = symbol_field_location(field_index(f));
    error_msg(loc, "'%s' is not numeric", f->name);
    return NULL;
  }
 ok:
  cbl_field_t skel = determine_intermediate_type( *lhs, op, *rhs );
  cbl_refer_t *tgt = new_reference_like(skel);
  if( !mode_syntax_only() ) {
    parser_op( *tgt, *lhs, op, *rhs, current.compute_label() );
  }
  return tgt;
}

static void
ast_add( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size();
  std::vector <cbl_num_result_t> C(nC);
  cbl_num_result_t *pC;
  std::vector <cbl_refer_t> A(nA);
  cbl_refer_t *pA;

  pC = use_any(arith->tgts, C);
  pA = use_any(arith->A, A);

  parser_add( nC, pC, nA, pA, arith->format, arith->on_error, arith->not_error );

  current.declaratives_evaluate();
}

static bool
ast_subtract( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size(), nB = arith->B.size();
  std::vector <cbl_refer_t> A(nA);
  std::vector <cbl_refer_t> B(nB);
  std::vector <cbl_num_result_t> C(nC);

  cbl_refer_t *pA = use_any(arith->A, A);
  cbl_refer_t *pB = use_any(arith->B, B);
  cbl_num_result_t *pC = use_any(arith->tgts, C);

  parser_subtract( nC, pC, nA, pA, nB, pB, arith->format, arith->on_error, arith->not_error );

  current.declaratives_evaluate();
  return true;
}

static bool
ast_multiply( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size(), nB = arith->B.size();
  std::vector <cbl_refer_t> A(nA);
  std::vector <cbl_refer_t> B(nB);
  std::vector <cbl_num_result_t> C(nC);

  cbl_refer_t *pA = use_any(arith->A, A);
  cbl_refer_t *pB = use_any(arith->B, B);
  cbl_num_result_t *pC = use_any(arith->tgts, C);

  parser_multiply( nC, pC, nA, pA, nB, pB, arith->on_error, arith->not_error );

  current.declaratives_evaluate();
  return true;
}

static bool
ast_divide( arith_t *arith ) {
  size_t nC = arith->tgts.size(), nA = arith->A.size(), nB = arith->B.size();
  std::vector <cbl_refer_t> A(nA);
  std::vector <cbl_refer_t> B(nB);
  std::vector <cbl_num_result_t> C(nC);

  cbl_refer_t *pA = use_any(arith->A, A);
  cbl_refer_t *pB = use_any(arith->B, B);
  cbl_num_result_t *pC = use_any(arith->tgts, C);

  parser_divide( nC, pC, nA, pA, nB, pB,
                 arith->remainder, arith->on_error, arith->not_error );

  current.declaratives_evaluate();
  return true;
}

/*
 * Populate a parser API struct from lists built up by the parser.
 * The API doesn't use STL containers or classes that exist only for
 * the convenience of the parser.
*/
struct stringify_src_t : public cbl_string_src_t {
  stringify_src_t( const refer_marked_list_t& marked = refer_marked_list_t() )
    : cbl_string_src_t( marked.marker? *marked.marker : null_reference,
                        marked.refers.size(),
                        new cbl_refer_t[marked.refers.size()] )
  {
    std::copy( marked.refers.begin(), marked.refers.end(), inputs );
  }

  static void dump( const cbl_string_src_t& src ) {
    dbgmsg( "%s:%d:, " HOST_SIZE_T_PRINT_UNSIGNED " inputs delimited by %s:",
           __func__, __LINE__, (fmt_size_t)src.ninput,
           src.delimited_by.field? field_str(src.delimited_by.field) : "SIZE" );
    std::for_each(src.inputs, src.inputs + src.ninput, dump_input);
  }

 protected:
  static void dump_input( const cbl_refer_t& refer ) {
    yywarn( "%s: %s", __func__, field_str(refer.field) );
  }
};

void
stringify( refer_collection_t *inputs,
           const cbl_refer_t& into, const cbl_refer_t& pointer,
           cbl_label_t  *on_error,
           cbl_label_t *not_error )
{
  std::vector <stringify_src_t> sources(inputs->lists.size());

  if( inputs->lists.back().marker == NULL ) {
    inputs->lists.back().marker = cbl_refer_t::empty();
  }
  assert( inputs->lists.back().marker );
  std::copy( inputs->lists.begin(), inputs->lists.end(), sources.begin() );
  parser_string( into, pointer, sources.size(), sources.data(), on_error, not_error );
}

void
unstringify( const cbl_refer_t& src,
             refer_list_t *delimited,
             unstring_into_t * into,
             cbl_label_t  *on_error,
             cbl_label_t *not_error )
{
  size_t ndelimited = delimited? delimited->size() : 0;
  cbl_refer_t *pdelimited = NULL;
  // cppcheck-suppress [variableScope] pdelimited points to delimiteds.data()
  std::vector <cbl_refer_t> delimiteds(ndelimited);
  if( ndelimited > 0 ) {
    pdelimited = use_any( delimited->refers, delimiteds );
  }

  std::vector <cbl_refer_t> outputs(into->size());
  into->use_list( outputs, unstring_tgt_t::tgt_of );

  std::vector <cbl_refer_t> delimiters(into->size());
  into->use_list( delimiters, unstring_tgt_t::delimiter_of );

  std::vector <cbl_refer_t> counts(into->size());
  into->use_list( counts, unstring_tgt_t::count_of );

  parser_unstring( src,
                   ndelimited, pdelimited,
                   // into
                   outputs.size(),
                   outputs.data(), delimiters.data(), counts.data(),
                   into->pointer, into->tally,
                   on_error, not_error );
  delete into;
}

static const char *
data_section_str( data_section_t section ) {
  switch(section) {
  case not_data_datasect_e:
    return "NONE";
  case local_storage_datasect_e:
    return "LOCAL";
  case file_datasect_e:
    return "FILE";
  case working_storage_datasect_e:
    return "WORKING";
  case linkage_datasect_e:
    return "LINKAGE";
  }
  gcc_unreachable();
  return NULL;
}

static bool
current_data_section_set(const YYLTYPE& loc,  data_section_t data_section ) {
  // order is mandatory
  if( data_section < current_data_section ) {
    error_msg(loc, "%s SECTION must precede %s SECTION",
	      data_section_str(data_section),
	      data_section_str(current_data_section));
    return false;
  }

  cbl_section_type_t type = file_sect_e;

  switch(data_section) {
  case not_data_datasect_e:
    gcc_unreachable();
    break;
  case file_datasect_e:
    type = file_sect_e;
    break;
  case working_storage_datasect_e:
    type = working_sect_e;
    break;
  case local_storage_datasect_e:
    type = local_sect_e;
    break;
  case linkage_datasect_e:
    type = linkage_sect_e;
    break;
  }

  cbl_section_t section = { type, yylineno, NULL };

  if( ! symbol_section_add(PROGRAM, &section) ) {
    error_msg(loc, "could not add section %s to program %s, exists line %d",
              section.name(), current.program()->name,
              symbol_section(PROGRAM, &section)->line );
    return false;
  }

  current_data_section = data_section ;
  return true;
}

void apply_declaratives() {
  // look for declaratives for this procedure, and all procedures
  bool tf[2] = { false, true };
  for( bool *yn = tf; yn < tf + COUNT_OF(tf); yn++ ) {
    auto declaratives = current.debugging_declaratives(*yn);
    for( auto p  = declaratives.begin() ;
         p != declaratives.end(); p++ ) {
      // TODO: delarative for PARA OF SECTION
      cbl_label_t *label = symbol_label(PROGRAM, LblNone, 0, p->c_str());
      assert(label);
      parser_perform(label);
    }
  }
}
#define FIG_CONST(X) constant_of(constant_index((X)))

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

int warn_abi_version = -1;
int cp_unevaluated_operand;
void
lang_check_failed (const char* file, int line, const char* function) {}

#pragma GCC diagnostic pop

void
ast_inspect( YYLTYPE loc, cbl_refer_t& input, bool backward,
             cbl_inspect_opers_t& inspects )
{
  if( yydebug ) {
    dbgmsg("%s:%d: INSPECT " HOST_SIZE_T_PRINT_UNSIGNED " operations on %s, "
           "lines %d:%d - %d:%d",
           __func__, __LINE__,
           (fmt_size_t)inspects.size(), input.field->name,
           loc.first_line, loc.first_column, loc.last_line, loc.last_column );
  }
  std::for_each(inspects.begin(), inspects.end(), dump_inspect);
  parser_inspect( input, backward, inspects );
}

static const char *
cbl_refer_str( char output[], const cbl_refer_t& R ) {
  sprintf( output, "refer = %s %s %s",
           R.field? field_str(R.field) : "(none)",
           R.is_table_reference()? "(table)" : "",
           R.is_refmod_reference()? "(refmod)" : "" );
  return output;
}

void
dump_inspect_match( const cbl_inspect_match_t& M ) {
  static char fields[4][4 * 64];
  cbl_refer_str(fields[0], M.match);
  cbl_refer_str(fields[1], M.tally);
  cbl_refer_str(fields[2], M.before.identifier_4);
  cbl_refer_str(fields[3], M.after.identifier_4);

  dbgmsg( "matching %s [tally %s]\n\t\tbefore %s%s \n\t\tafter  %s%s",
         fields[0], fields[1],
         M.before.initial? "initial " : "", fields[2],
         M.after.initial?  "initial " : "", fields[3] );
}

static void
dump_inspect_replace( const cbl_inspect_replace_t& R ) {
  static char fields[4][4 * 64];
  cbl_refer_str(fields[0], R.matching());
  cbl_refer_str(fields[1], R.before.identifier_4);
  cbl_refer_str(fields[2], R.after.identifier_4);
  cbl_refer_str(fields[3], R.replacement);

  dbgmsg( "matching    %s \n\treplacement %s\n\t\tbefore %s%s \n\t\tafter  %s%s",
         fields[0], fields[3],
         R.before.initial? "initial " : "", fields[1],
         R.after.initial?  "initial " : "", fields[2] );
}

static const char *
bound_str( cbl_inspect_bound_t bound ) {
  switch(bound) {
  case bound_characters_e: return "characters";
  case bound_all_e: return "all";
  case bound_first_e: return "first";
  case bound_leading_e: return "leading";
  case bound_trailing_e: return "trailing";
  }
  return "bound?";
}

/*
 * INITIALIZE
 */
static data_category_t
data_category_of( const cbl_refer_t& refer ) {
  assert(refer.field);
  switch( refer.field->type ) {
  case FldInvalid:
    assert(refer.field->type != FldInvalid);
    return data_category_none;

  case FldGroup:
    return data_category_none;

  case FldLiteralA:
  case FldAlphanumeric:
    return refer.field->has_attr(all_alpha_e)?
      data_alphabetic_e : data_alphanumeric_e;

  case FldNumericBinary:
  case FldFloat:
  case FldNumericBin5:
  case FldPacked:
  case FldNumericDisplay:
  case FldLiteralN:
    return data_numeric_e;

  case FldNumericEdited:
    return data_numeric_edited_e;
  case FldAlphaEdited:
    return data_alphanumeric_edited_e;

  case FldPointer:
    return data_data_pointer_e;

  case FldClass:
  case FldConditional:
  case FldForward:
  case FldIndex:
  case FldSwitch:
  case FldDisplay:
  case FldBlob:
    return data_category_none;
  }
  gcc_unreachable();
  return data_category_none;
}

static bool
valid_target( const cbl_refer_t& refer ) {
  assert(refer.field);
  switch( refer.field->type ) {
  case FldInvalid:
    assert(refer.field->type != FldInvalid);
    return false;
  case FldGroup:
  case FldAlphanumeric:
  case FldNumericBinary:
  case FldFloat:
  case FldNumericBin5:
  case FldPacked:
  case FldNumericDisplay:
  case FldNumericEdited:
  case FldAlphaEdited:
  case FldPointer:
    return true;
  case FldLiteralA:
  case FldLiteralN:
  case FldClass:
  case FldConditional:
  case FldForward:
  case FldIndex:
  case FldSwitch:
  case FldDisplay:
  case FldBlob:
    return false;
  }
  gcc_unreachable();
  return false;
}

static REAL_VALUE_TYPE
numstr2i( const char input[], radix_t radix ) {
  REAL_VALUE_TYPE output;
  size_t integer = 0;
  fmt_size_t integerf = 0;
  int erc=0;

  switch( radix ) {
  case decimal_e: { // Use decimal point for comma, just in case.
      auto local = xstrdup(input);
      if( !local ) { erc = -1; break; }
      std::replace(local, local + strlen(local), ',', '.');
      real_from_string3 (&output, local, TYPE_MODE (float128_type_node));
    }
    break;
  case hexadecimal_e:
    erc = sscanf(input, "%" GCC_PRISZ "x", &integerf);
    integer = integerf;
    real_from_integer (&output, VOIDmode, integer, UNSIGNED);
    break;
  case boolean_e:
    for( const char *p = input; *p != '\0'; p++ ) {
      if( ssize_t(8 * sizeof(integer) - 1) < p - input ) {
        yywarn("'%s' was accepted as %zu", input, integer);
        break;
      }
      switch(*p) {
        case '0':
        case '1':
          integer = (integer << (p - input));
          integer |= ((*p) == '0' ? 0 : 1);
          break;
      default:
        yywarn("'%s' was accepted as %zu", input, integer);
	break;
      }
    }
    real_from_integer (&output, VOIDmode, integer, UNSIGNED);
    return output;
  }
  if( erc == -1 ) {
    yywarn("'%s' was accepted as %zu", input, integer);
  }
  return output;
}

static inline cbl_field_t *
new_literal( const char initial[], enum radix_t radix ) {
  auto attr = constant_e;

  switch( radix ) {
  case decimal_e:
    break;
  case hexadecimal_e:
    attr = hex_encoded_e;
    break;
  case boolean_e:
    attr = bool_encoded_e;
    break;
  }
  return new_literal(strlen(initial), initial,
                     cbl_field_attr_t(constant_e | attr));
}

class is_elementary_type { // for INITIALIZE purposes
  bool with_filler;
public:
  explicit is_elementary_type( bool with_filler ) : with_filler(with_filler) {}

  bool operator()( const symbol_elem_t& elem ) const {
    if( elem.type != SymField ) return false;
    const cbl_field_t *f = cbl_field_of(&elem);
    if( symbol_redefines(f) ) return false;
    return ( f->has_attr(filler_e) && with_filler )
      || ::is_elementary(f->type);
  }
};

size_t end_of_group( size_t igroup );

static std::list<cbl_refer_t>
symbol_group_data_members( const cbl_refer_t& refer, bool with_filler ) {
  std::list<cbl_refer_t> refers;
  refers.push_front( refer );

  if( refer.field->type != FldGroup ) return refers;

  class refer_of : public cbl_refer_t {
   public:
    explicit refer_of( const cbl_refer_t& refer ) : cbl_refer_t(refer) {}
    cbl_refer_t operator()( symbol_elem_t& elem ) {
      this->field = cbl_field_of(&elem); // preserve subscript/refmod
      return *this;
    }
  };

  size_t igroup = field_index(refer.field), eogroup = end_of_group(igroup);
  std::list<symbol_elem_t> elems;
  is_elementary_type is_elem(with_filler);

  std::copy_if( symbols_begin(igroup), symbols_begin(eogroup),
                std::back_inserter(elems), [is_elem]( const symbol_elem_t& elem ) {
                  return is_elem(elem) || cbl_field_of(&elem)->occurs.ntimes() > 0; } );
  std::transform( elems.begin(), elems.end(),
                  std::back_inserter(refers), refer_of(refer) );
  return refers;
}

struct expand_group : public std::list<cbl_refer_t> {
  static cbl_refer_t referize( cbl_field_t *field ) {
    return cbl_refer_t(field);
  }
  bool with_filler;
  explicit expand_group( bool with_filler ) : with_filler(with_filler) {}

  void operator()( const cbl_refer_t& refer ) {
    assert(refer.field);
    if( refer.field->type != FldGroup ) {
      push_back(refer);
      return;
    }
    std::list<cbl_refer_t> members = symbol_group_data_members( refer,
                                                                with_filler );
    std::copy( members.begin(), members.end(), back_inserter(*this) );
  }
};


static const char * initial_default_value;
       const char * wsclear() { return initial_default_value; }

void
wsclear( char ch ) {
  static char byte = ch;
  initial_default_value = &byte;
  current.program_needs_initial();
}

static void
initialize_allocated( const cbl_refer_t& input ) {
  cbl_num_result_t result = { truncation_e, input };
  std::list<cbl_num_result_t> results;
  results.push_back(result);
  initialize_statement(results, true,
		       data_category_all, category_map_t());
}

static int
initialize_with( const cbl_refer_t& tgt ) {
  if( tgt.field->type == FldPointer ) return ZERO;
  if( tgt.is_refmod_reference() ) return SPACES;
  return is_numeric(tgt.field)? ZERO : SPACES;
}

static bool
// cppcheck-suppress [passedByValue] target.refer.field is modified
initialize_one( cbl_num_result_t target, bool with_filler,
                data_category_t value_category,
                const category_map_t& replacements,
                bool explicitly )
{
  cbl_refer_t& tgt( target.refer );
  if( ! valid_target(tgt) ) return false;

  // Rule 1 c: is valid for VALUE, REPLACING, or DEFAULT
  // If no VALUE (category none), set to blank/zero.
  if( value_category == data_category_none && replacements.empty() ) {
    auto token = initialize_with(tgt);
    auto src = constant_of(constant_index(token));
    cbl_refer_t source(src);
    auto s = wsclear();
    if( s ) {
      char ach[5];
      int v = *s;
      sprintf(ach, "%d", v);
      source.field = new_literal(ach);
      source.addr_of = true;
    }

    if( tgt.field->type == FldPointer ) {
      parser_set_pointers(1, &tgt, source);
    } else {
      parser_move(tgt, src, current_rounded_mode());
    }
    return true;
  }

  /*
   *  Either VALUE or REPLACING specified.
   */

  if( value_category == data_category_all ||
      value_category == data_category_of(tgt) ) {
    // apply any applicable VALUE
    if( explicitly || tgt.field->data.initial ) {
      assert( with_filler || !tgt.field->has_attr(filler_e) );
      if( tgt.field->data.initial ) {
        parser_initialize(tgt);
      }
    }
  }

  // apply REPLACING, possibly overwriting VALUE
  // N.B., may be wrong:
  /*
   * "If the data item does not qualify as a receiving-operand because of the
   *  VALUE phrase, but does qualify because of the REPLACING phrase ..."
  */
  auto r = replacements.find(data_category_of(tgt));
  if( r != replacements.end() ) {
    parser_move( tgt, *r->second );

    return true;
  }

  return true;
}

typedef std::pair<cbl_field_t*,cbl_field_t*> field_span_t;
typedef std::pair<size_t, size_t>  cbl_bytespan_t;

/*
 * After the 1st record is initialized, copy it to the others.
 */
static bool
initialize_table( const cbl_num_result_t& target,
		  size_t nspan, const cbl_bytespan_t spans[],
		  const std::list<cbl_subtable_t>& subtables )
{
  assert( target.refer.nsubscript() == dimensions(target.refer.field) );
  const cbl_refer_t& src( target.refer );
  size_t n( src.field->occurs.ntimes());
  assert( 0 < n );

  size_t isym( field_index(src.field) );
  std::vector <cbl_subtable_t> tbls(subtables.size());
  std::copy( subtables.begin(), subtables.end(), tbls.begin() );
  parser_initialize_table( n, src, nspan, spans, isym, tbls.size(), tbls.data() );
  return true;
}

static cbl_refer_t
synthesize_table_refer( cbl_refer_t tgt ) {
  // For a table, use supplied subscripts or start with 1.
  auto ndim( dimensions(tgt.field) );
  if( tgt.nsubscript() < ndim ) { // it's an incomplete table
    std::vector <cbl_refer_t> subscripts(ndim);
    for( size_t i=0; i < ndim; i++ ) {
      if( i < tgt.nsubscript() ) {
	subscripts[i] = tgt.subscripts[i];
	continue;
      }
      subscripts[i].field = new_tempnumeric();
      parser_set_numeric(subscripts[i].field, 1);
    }
    return cbl_refer_t( tgt.field, subscripts );
  }
  return tgt;
}

static size_t
group_offset( const cbl_field_t *field ) {
  if( field->parent ) {
    auto e = symbol_at(field->parent);
    if( e->type == SymField ) {
      const auto parent = cbl_field_of(e);
      return field->offset - parent->offset;
    }
  }
  return field->offset;
}

static bool
initialize_statement( const cbl_num_result_t& target, bool with_filler,
                      data_category_t value_category,
                      const category_map_t& replacements,
                      size_t depth = 0 )
{
  const cbl_refer_t& tgt( target.refer );
  assert(dimensions(tgt.field) == tgt.nsubscript() || 0 < depth);
  assert(!is_literal(tgt.field));

  if( tgt.field->type == FldGroup ) {
    if( tgt.field->data.initial )   goto initialize_this;
    if( tgt.is_refmod_reference() ) goto initialize_this;
    // iterate over group memebers
    auto imember = field_index(tgt.field);
    auto eogroup = end_of_group(imember);
    bool fOK = true;
    std::list<cbl_field_t*> members;
    std::list<cbl_subtable_t> subtables;

    while( ++imember < eogroup ) {
        auto e = symbol_at(imember);
        if( e->type != SymField ) continue;
        auto f = cbl_field_of(e);
        if( ! (f->type == FldGroup || is_elementary(f->type)) ) continue;
        if( ! symbol_redefines(f) ) {
	  members.push_back(f);
	  if( is_table(f) ) {
	    size_t offset = group_offset(f);
	    subtables.push_back( cbl_subtable_t { offset, imember } );
	  }
          cbl_num_result_t next_target(target);
	  next_target.refer.field = f;
          // recurse on each member, which might be a table or group
          fOK = fOK && initialize_statement( next_target, with_filler, value_category,
                                             replacements, 1 + depth );
        }
        if( f->type == FldGroup ) {
          imember = end_of_group(imember) - 1;
        }
    }

    if( fOK && is_table(tgt.field) ) {
      cbl_num_result_t output = { target.rounded, synthesize_table_refer(tgt) };
      if( tgt.nsubscript() < output.refer.nsubscript() ) { // tgt is whole table
	std::list<field_span_t> field_spans;
	static const field_span_t empty_span = { NULL, NULL };
	field_span_t span = empty_span;
	bool honor_filler = false;
	// construct non-filler field spans
	for( auto member : members ) {
	  if( !with_filler && member->has_attr(filler_e) ) {
	    if( span.first ) { // conclude the span and begin to skip filler
	      field_spans.push_back(span);
	      span = empty_span;
	      honor_filler = true;
	    }
	    continue;
	  }
	  if( span.first ) {
	    span.second = member; // extend the span
	  } else {
	    span.first = member;  // start a new span
	  }
	}
	if( span.first ) {
	  field_spans.push_back(span);
	}
	// convert field spans to byte ranges
	std::vector <cbl_bytespan_t> ranges( field_spans.size() );
	size_t nrange = 0;
	if( honor_filler ) {
	  nrange = ranges.size();
	  std::transform( field_spans.begin(), field_spans.end(), ranges.begin(),
			  []( const auto& span ) {
			    size_t first, second;
			    first = second = group_offset(span.first);
			    if( ! span.second ) {
			      second += std::max(span.first->data.capacity,
						 span.first->data.memsize);
			    } else {
			      second = group_offset(span.second)
				     - group_offset(span.first);
			      second += std::max(span.second->data.capacity,
						 span.second->data.memsize);
			    }
			    return std::make_pair(first, second);
			  } );
	}
	return initialize_table( output, nrange, ranges.data(), subtables );
      }
    }
    return fOK;
  }

  if( !is_elementary(tgt.field->type) ) return false;

  assert(is_elementary(tgt.field->type));
  assert(data_category_of(tgt) != data_category_none);

  /*
   * Initialize elementary field.
   */

 initialize_this:
  // Cannot initialize constants
  if( is_constant(tgt.field) ) {
    auto loc = symbol_field_location(field_index(tgt.field));
    error_msg(loc, "%s is constant", name_of(tgt.field));
    return false;
  }
  // Ignore filler unless instructed otherwise.
  if( !with_filler && tgt.field->has_attr(filler_e) ) return true;

  cbl_num_result_t output = { target.rounded, synthesize_table_refer(tgt) };

  bool fOK = initialize_one( output, with_filler, value_category,
			     replacements, depth == 0 );

  if( fOK && is_table(tgt.field) ) {
    return initialize_table( output,
			     0, NULL, std::list<cbl_subtable_t>() );
  }

  return fOK;
}

const char *
data_category_str( data_category_t category ) {
  switch(category) {
  case data_category_none: return "category_none";
  case data_category_all: return "category_all";
  case data_alphabetic_e: return "alphabetic";
  case data_alphanumeric_e: return "alphanumeric";
  case data_alphanumeric_edited_e: return "alphanumeric_edited";
  case data_boolean_e: return "data_boolean";
  case data_data_pointer_e: return "data_data_pointer";
  case data_function_pointer_e: return "data_function_pointer";
  case data_msg_tag_e: return "data_msg_tag";
  case data_dbcs_e: return "dbcs";
  case data_egcs_e: return "egcs";
  case data_national_e: return "national";
  case data_national_edited_e: return "national_edited";
  case data_numeric_e: return "numeric";
  case data_numeric_edited_e: return "numeric_edited";
  case data_object_referenc_e: return "data_object_referenc";
  case data_program_pointer_e: return "data_program_pointer";
 }
  return "???";
}

static void
initialize_statement( std::list<cbl_num_result_t>& tgts, bool with_filler,
                     data_category_t value_category,
                     const category_map_t& replacements) {
  for( const auto& tgt : tgts ) {
    initialize_statement( tgt, with_filler, value_category,
                         replacements );
  }
  tgts.clear();
}

static void
dump_inspect_oper( const cbl_inspect_oper_t& op ) {
  dbgmsg("\t%s: " HOST_SIZE_T_PRINT_UNSIGNED
         " \"matches\", " HOST_SIZE_T_PRINT_UNSIGNED " \"replaces\"",
         bound_str(op.bound),
         (fmt_size_t)op.matches.size(), 
         (fmt_size_t)op.replaces.size());
  std::for_each(op.matches.begin(), op.matches.end(), dump_inspect_match);
  std::for_each(op.replaces.begin(), op.replaces.end(), dump_inspect_replace);
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"

static void
dump_inspect( const cbl_inspect_t& I ) {
  if( !yydebug ) return;
  if( I.tally.field ) {
    fprintf( stderr, "\tTALLYING to %s %s %s:\n",
             field_str(I.tally.field),
             I.tally.is_table_reference()? "(table)" : "",
             I.tally.is_refmod_reference()? "(refmod)" : "" );
  } else {
    fprintf( stderr, "\tREPLACING:\n" );
  }
  std::for_each( I.begin(), I.end(), dump_inspect_oper );
}
#pragma GCC diagnostic pop

#include <iterator>

struct declarative_file_list_t : protected cbl_declarative_t {
  explicit declarative_file_list_t( const cbl_declarative_t& d )
    : cbl_declarative_t(d)
    {
      if( nfile > 0 )
        assert(d.files[0] == this->files[0]);
    }
  static std::ostream&
  splat( std::ostream& os, const declarative_file_list_t& dcl ) {
    static int i=0;

    os << "static size_t dcl_file_list_" << i++
       << "[" << dcl.nfile << "] = { ";
    std::ostream_iterator<size_t> out(os, ", ");
    std::copy( dcl.files, dcl.files + dcl.nfile, out );
    return os << "};";
  }
};

std::ostream&
operator<<( std::ostream& os, const declarative_file_list_t& dcl ) {
  return dcl.splat( os, dcl );
}

static declarative_file_list_t
file_list_of( const cbl_declarative_t& dcl ) {
  return declarative_file_list_t(dcl);
}

std::ostream&
operator<<( std::ostream& os, const cbl_declarative_t& dcl ) {
  static int i=0;

  return os <<
    "\t{ " << dcl.section << ", "
           << std::boolalpha << dcl.global << ", "
           << ec_type_str(dcl.type) << ", "
           << dcl.nfile << ", "
           << "dcl_file_list_" << i++ << ", "
           << cbl_file_mode_str(dcl.mode) << " }"
           << std::flush;
}

void parser_add_declaratives( size_t n, cbl_declarative_t *declaratives) {
  const char *prog = cbl_label_of(symbol_at(PROGRAM))->name;
  char *filename = xasprintf("declaratives.%s.h", prog);
  std::ofstream os(filename);
  {
    std::ostream_iterator<declarative_file_list_t> out(os, "\n");
    std::transform( declaratives, declaratives + n, out, file_list_of );
  }
  os << "\nstatic cbl_declarative_base_t declaratives[] = {\n";
  std::ostream_iterator<cbl_declarative_t> out(os, ", \n");
  std::copy( declaratives, declaratives + n, out );
  os << "};\n" << std::endl;
}

cbl_field_t *
new_literal( const literal_t& lit, enum cbl_field_attr_t attr ) {
  bool zstring = lit.prefix[0] == 'Z';
  if( !zstring && lit.data[lit.len] != '\0' ) {
    dbgmsg("%s:%d: line %d, no NUL terminator '%-*.*s'{"
          HOST_SIZE_T_PRINT_UNSIGNED "/" HOST_SIZE_T_PRINT_UNSIGNED "}",
          __func__, __LINE__, yylineno,
          int(lit.len), int(lit.len),
          lit.data, (fmt_size_t)strlen(lit.data), (fmt_size_t)lit.len);
  }
  assert(zstring || lit.data[lit.len] == '\0');

  size_t attrs(attr);
  attrs |= constant_e;
  attrs |= literal_attr(lit.prefix);

  return new_literal(lit.len, lit.data, cbl_field_attr_t(attrs));
}

bool
cbl_file_t::validate_forward( size_t isym ) const {
  if( isym > 0 && FldForward == symbol_field_forward(isym)->type ) {
    auto loc = symbol_field_location(isym);
    error_msg(loc, "line %d: %s of %s is not defined",
              this->line, cbl_field_of(symbol_at(isym))->name,
              this->name );
    return false;
  }
  return true;
}

bool
cbl_file_t::validate_key( const cbl_file_key_t& key ) const {
  for( auto f = key.fields; f < key.fields + key.nfield; f++ ) {
    if( ! validate_forward(*f) ) return false;
  }
  return true;
}

bool
cbl_file_t::validate() const {
  const size_t members[] = { user_status, vsam_status, record_length };
  bool tf = true;

  for( auto isym : members ) {
    if( ! validate_forward(isym) ) tf = false;
  }

  for( auto p = keys; p < keys + nkey; p++ ) {
    if( ! validate_key(*p) ) tf = false;
  }

  return tf;
}

bool
cbl_file_lock_t::mode_set( int token ) {
  switch( token ) {
  case MANUAL:    mode = manual_e; break;
  case RECORD:    mode = record_e; break;
  case AUTOMATIC: mode = automatic_e; break;
  default:
    return  false;
  }
  return true;
}

enum cbl_figconst_t
cbl_figconst_of( const char *value ) {
  struct values_t {
    const char *value; cbl_figconst_t type;
  } static const values[] = {
    { constant_of(constant_index(ZERO))->data.initial, zero_value_e },
    { constant_of(constant_index(SPACES))->data.initial, space_value_e },
    { constant_of(constant_index(HIGH_VALUES))->data.initial, high_value_e },
    { constant_of(constant_index(LOW_VALUES))->data.initial, low_value_e },
    { constant_of(constant_index(QUOTES))->data.initial, quote_value_e },
    { constant_of(constant_index(NULLS))->data.initial, null_value_e },
  }, *eovalues = values + COUNT_OF(values);

  auto p = std::find_if( values, eovalues,
                         [value]( const values_t& elem ) {
                           return elem.value == value;
                         } );

  return p == eovalues? normal_value_e : p->type;
}

int
cbl_figconst_tok( const char *value ) {
  struct values_t {
    const char *value; int token;
  } static const values[] = {
    { constant_of(constant_index(ZERO))->data.initial, ZERO },
    { constant_of(constant_index(SPACES))->data.initial, SPACES },
    { constant_of(constant_index(HIGH_VALUES))->data.initial, HIGH_VALUES },
    { constant_of(constant_index(LOW_VALUES))->data.initial, LOW_VALUES },
    { constant_of(constant_index(QUOTES))->data.initial, QUOTES },
    { constant_of(constant_index(NULLS))->data.initial, NULLS },
  }, *eovalues = values + COUNT_OF(values);

  auto p = std::find_if( values, eovalues,
                         [value]( const values_t& elem ) {
                           return elem.value == value;
                         } );

  return p == eovalues? 0 : p->token;
}

const cbl_field_t *
cbl_figconst_field_of( const char *value ) {
  int token = cbl_figconst_tok(value);
  return token == 0 ? nullptr : constant_of(constant_index(token));
}


cbl_field_attr_t
literal_attr( const char prefix[] ) {
  switch(strlen(prefix)) {
  case 0: return none_e;

  case 1:
    switch(prefix[0]) {
    case 'B': return bool_encoded_e;
    case 'N': cbl_unimplemented("National"); return none_e;
    case 'X': return hex_encoded_e;
    case 'Z': return quoted_e;
    }
    break;

  case 2:
    switch(prefix[1]) {
    case 'X':
      switch(prefix[0]) {
      case 'B': return cbl_field_attr_t(hex_encoded_e | bool_encoded_e);
      case 'N': cbl_unimplemented("National"); return none_e;
      }
      break;
    }
  }

  // must be [BN]X
  cbl_internal_error("invalid literal prefix: %qs", prefix);
  gcc_unreachable();
  return none_e;
}

bool
cbl_field_t::has_subordinate( const cbl_field_t *that ) const {
  while( (that = parent_of(that)) != NULL ) {
    if( field_index(this) == field_index(that) ) return true;
  }
  return false;
}

const char *
cbl_field_t::value_str() const {
    if( data.etc_type == cbl_field_data_t::value_e )
	return string_of( data.value_of() );
    return "???";
}

static const cbl_division_t not_syntax_only = cbl_division_t(-1);
             cbl_division_t cbl_syntax_only = not_syntax_only;

void
mode_syntax_only( cbl_division_t division ) {
  cbl_syntax_only = division;
}

// Parser moves to syntax-only mode if data-division errors preclude compilation.
bool
mode_syntax_only() {
  return cbl_syntax_only != not_syntax_only
      && cbl_syntax_only <= current_division;
}

void
cobol_dialect_set( cbl_dialect_t dialect ) {
  switch(dialect) {
  case dialect_gcc_e:
    break;
  case dialect_ibm_e:
    cobol_gcobol_feature_set(feature_embiggen_e);
    break;
  case dialect_mf_e:
    break;
  case dialect_gnu_e:
    if( 0 == (cbl_dialects & dialect) ) { // first time
      cdf_tokens.equate(YYLTYPE(), "BINARY-DOUBLE", "BINARY-C-LONG");
    }
    break;
  }    
  cbl_dialects |= dialect;
}

static bool internal_ebcdic_locked = false;

void internal_ebcdic_lock() {
  internal_ebcdic_locked = true;
}
void internal_ebcdic_unlock() {
  internal_ebcdic_locked = false;
}

bool
cobol_gcobol_feature_set( cbl_gcobol_feature_t gcobol_feature, bool on ) {
  if( gcobol_feature == feature_internal_ebcdic_e ) {
    if( internal_ebcdic_locked ) return false;
  }
  if( on ) {
    cbl_gcobol_features |= gcobol_feature;
  } else {
    cbl_gcobol_features &= ~gcobol_feature;
  }
  return true;
}

static bool
literal_refmod_valid( YYLTYPE loc, const cbl_refer_t& r ) {
  if( r.field->has_attr(any_length_e) ) return true;

  const cbl_span_t& refmod(r.refmod);

  if( ! is_literal(refmod.from->field) ) {
    if( ! refmod.len ) return true;
    if( ! is_literal(refmod.len->field) ) return true;
    auto edge = refmod.len->field->as_integer();
    if( 0 < edge ) {
      if( edge-1 < r.field->data.capacity ) return true;
    }
    // len < 0 or not: 0 < from + len <= capacity
    error_msg(loc, "%s(%s:%zu) out of bounds, "
	           "size is %u",
	      r.field->name,
	      refmod.from->name(),
	      size_t(edge),
	      static_cast<unsigned int>(r.field->data.capacity) );
    return false;
  }

  auto edge = refmod.from->field->as_integer();
  if( edge > 0 ) {
    if( --edge < r.field->data.capacity ) {
      if( ! refmod.len ) return true;
      if( ! is_literal(refmod.len->field) ) return true;
      auto len = refmod.len->field->as_integer();
      if( len > 0 ) {
	edge += len;
	if( --edge < r.field->data.capacity ) return true;
      }
      // len < 0 or not: 0 < from + len <= capacity
      loc = symbol_field_location(field_index(r.field));
      error_msg(loc, "%s(%zu:%zu) out of bounds, "
		"size is %u",
		r.field->name,
		size_t(refmod.from->field->as_integer()),
		size_t(len),
		static_cast<unsigned int>(r.field->data.capacity) );
      return false;
    }
  }
  // not: 0 < from <= capacity
  error_msg(loc,"%s(%zu) out of bounds, size is %u",
	    r.field->name,
	    size_t(refmod.from->field->as_integer()),
	    static_cast<unsigned int>(r.field->data.capacity) );
  return false;
}

const cbl_field_t *
literal_subscript_oob( const cbl_refer_t& r, size_t& isub );

static bool
literal_subscripts_valid( YYLTYPE loc, const cbl_refer_t& name ) {
  size_t isub;

  // Report any out-of-bound subscript. 
  const cbl_field_t *oob = literal_subscript_oob(name, isub);
  if( oob ) {
    std::string sep("");
    std::string subscript_names = 
      std::accumulate( name.subscripts.begin(),
                       name.subscripts.end(),
                       std::string(),
                       [&sep]( std::string acc, const auto& sub ) {
                         acc += sep;
                         sep = " ";
                         return acc + nice_name_of(sub.field);
                       } );
    
    const char *upper_phrase = "";
    if( ! oob->occurs.bounds.fixed_size() ) {
      static char ub[32] = "boo";
      sprintf(ub, " to " HOST_SIZE_T_PRINT_UNSIGNED,
              (fmt_size_t)oob->occurs.bounds.upper);
      upper_phrase = ub;
    }

    // X(0): subscript 1 of for out of range for 02 X OCCURS 4 to 6
    error_msg(loc, "%s(%s): subscript %zu out of range "
                   "for %s %s OCCURS %zu%s",
	      oob->name, subscript_names.c_str(), 1 + isub,
	      oob->level_str(), oob->name,
	      oob->occurs.bounds.lower, upper_phrase );
    return false;
  }
  return true;
}

static void
subscript_dimension_error( YYLTYPE loc, size_t nsub, const cbl_refer_t *scalar ) {
  if( 0 == dimensions(scalar->field) ) {
    error_msg(loc, "%zu subscripts provided for %s, "
              "which has no dimensions",
              nsub, scalar->name() );
  } else {
    error_msg(loc, "%zu subscripts provided for %s, "
              "which requires %zu dimensions",
              nsub, scalar->name(), dimensions(scalar->field) );
  }
}

static void
reject_refmod( YYLTYPE loc, const cbl_refer_t& scalar ) {
  if( scalar.is_refmod_reference() ) {
    error_msg(loc, "%s cannot be reference-modified here", scalar.name());
  }
}

static bool
require_pointer( YYLTYPE loc, const cbl_refer_t& scalar ) {
  if( scalar.field->type != FldPointer ) {
    error_msg(loc, "%s must have USAGE POINTER", scalar.name());
    return false;
  }
  return true;
}

static bool
require_numeric( YYLTYPE loc, const cbl_refer_t& scalar ) {
  if( ! is_numeric(scalar.field) ) {
    error_msg(loc, "%s must have numeric USAGE", scalar.name());
    return false;
  }
  return true;
}

static bool
require_integer( YYLTYPE loc, const cbl_refer_t& scalar ) {
  if( is_literal(scalar.field) ) {
    if( ! is_integer_literal(scalar.field) ) {
      error_msg(loc, "numeric literal '%s' must be an integer",
		scalar.field->pretty_name());
      return false;
    }
  }
  return require_numeric(loc, scalar);
}
/* eval methods */

eval_subject_t::eval_subject_t()
  : result( new_temporary(FldConditional) )
{
  labels.when = label("when");
  labels.yeah = label("yeah");
  labels.done = label("done");
  pcol = columns.begin();
}

cbl_label_t *
eval_subject_t::label( const char skel[] ) {
  static const cbl_label_t protolabel = { LblEvaluate };
  cbl_label_t label = protolabel;
  label.line = yylineno;
  size_t n = 1 + symbols_end() - symbols_begin();
  snprintf(label.name, sizeof(label.name),
           "_eval_%s_" HOST_SIZE_T_PRINT_UNSIGNED, skel, (fmt_size_t)n);
  auto output = symbol_label_add( PROGRAM, &label );
  return output;
}

bool
eval_subject_t::compatible( const cbl_field_t *object ) const {
  assert(pcol != columns.end());
  assert(pcol->field);
  auto subject(pcol->field);
  if( subject->type != object->type ) {
    if( is_conditional(subject) ) {
      return is_conditional(object);
    }
    return ! is_conditional(object);
  }
  return true;
}


cbl_field_t *
eval_subject_t::compare( int token ) {
  size_t tf( very_false_register() );

  switch( token ) {
  case ANY:
    parser_logop(result,
		 field_at(very_true_register()), and_op,
		 field_at(very_true_register()));
    break;
  case TRUE_kw:
    tf = very_true_register();
    __attribute__((fallthrough));
  case FALSE_kw:
    assert( is_conditional(pcol->field) );
    parser_logop(this->result, pcol->field, xnor_op, field_at(tf));
    break;
  default:
    assert(token == -1 && false );
    break;
  }
  return result;
}

cbl_field_t *
eval_subject_t::compare( relop_t op, const cbl_refer_t& object, bool deciding ) {
  auto subject(*pcol);
  if( compatible(object.field) ) {
    if( ! is_conditional(subject.field) ) {
      auto result = deciding? this->result : new_temporary(FldConditional);
      parser_relop(result, subject, op, object);
      return result;
      }
    }
  if( yydebug ) {
    dbgmsg("%s:%d: failed for %s %s %s",
	  __func__, __LINE__,
	  name_of(subject.field), relop_str(op), name_of(object.field));
  }
  return nullptr;
}

cbl_field_t *
eval_subject_t::compare( const cbl_refer_t& object,
			 const cbl_refer_t& object2 ) {
  auto subject(*pcol);

  if( ! compatible( object.field ) ) {
    if( yydebug ) {
      dbgmsg("%s:%d: failed for %s %s",
	    __func__, __LINE__,
	    name_of(subject.field), name_of(object.field));
    }
    return nullptr;
  }
  if( object2.field ) {
    if( ! compatible( object2.field ) ) {
      if( yydebug ) {
	dbgmsg("%s:%d: failed for %s %s",
	      __func__, __LINE__,
	      name_of(subject.field), name_of(object2.field));
      }
      return nullptr;
    }
  }

  if( is_conditional(subject.field) ) {
    assert( object2.field == nullptr );
    parser_logop(result, subject.field, xnor_op, object.field);
    return result;
  }

  if( object2.field ) {
    assert( ! is_conditional(object.field) );
    assert( ! is_conditional(object2.field) );

    cbl_field_t * gte = new_temporary(FldConditional);
    cbl_field_t * lte = new_temporary(FldConditional);

    parser_relop( gte, object, le_op, subject );
    parser_relop( lte, subject, le_op, object2 );

    parser_logop(result, gte, and_op, lte);
    return result;
  }

  parser_relop(result, subject, eq_op, object);
  return result;
}
